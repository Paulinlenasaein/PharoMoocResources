(MaDrawingArea subclass: #TsAfficheurTerrain	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Tetris')forward: {}!!TsAfficheurTerrain methodsFor: 'affichage' stamp: 'NouryBouraqadi 2/17/2015 21:57'!dessinerCarreEn: coordonneesCase couleurFond: couleurFond couleurBord: couleurBord 	| sommets |	sommets := self sommetsCarrePourCase: coordonneesCase.	self drawPolygon: sommets color: couleurFond borderWidth: 1 borderColor: couleurBord! !!TsAfficheurTerrain methodsFor: 'affichage' stamp: 'NouryBouraqadi 2/17/2015 18:47'!couleurDeFond	^Color black! !!TsAfficheurTerrain methodsFor: 'affichage' stamp: 'NouryBouraqadi 2/17/2015 18:47'!effacer	self fillWith: self couleurDeFond ! !!TsAfficheurTerrain methodsFor: 'affichage' stamp: 'NouryBouraqadi 2/17/2015 21:26'!deltasSommets	^{0@0. 	self coteCarreEnPixel  @ 0. 	self coteCarreEnPixel @self coteCarreEnPixel . 	0@self coteCarreEnPixel }! !!TsAfficheurTerrain methodsFor: 'affichage' stamp: 'NouryBouraqadi 2/17/2015 21:59'!effacerCarre: unCarre	self dessinerCarreEn: unCarre position couleurFond: self couleurDeFond  couleurBord: self couleurDeFond ! !!TsAfficheurTerrain methodsFor: 'affichage' stamp: 'NouryBouraqadi 2/17/2015 21:25'!sommetsCarrePourCase: coordonneesCase	| origine |	origine := (coordonneesCase - 1) * self coteCarreEnPixel.	^self deltasSommets collect: [ :unSommet | unSommet + origine ]! !!TsAfficheurTerrain methodsFor: 'affichage' stamp: 'NouryBouraqadi 2/17/2015 21:58'!dessinerCarre: unCarre	self dessinerCarreEn: unCarre position couleurFond: unCarre couleur couleurBord: Color gray ! !!TsAfficheurTerrain methodsFor: 'initialize - release' stamp: 'NouryBouraqadi 2/17/2015 21:25'!coteCarreEnPixel	^50! !!TsAfficheurTerrain methodsFor: 'initialize - release' stamp: 'NouryBouraqadi 2/17/2015 21:46'!terrain: unTerrain	self extent: (unTerrain largeur * self coteCarreEnPixel) @ (unTerrain hauteur * self coteCarreEnPixel).	unTerrain afficheur: self! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TsAfficheurTerrain class	instanceVariableNames: ''!!TsAfficheurTerrain class methodsFor: 'instance creation' stamp: 'NouryBouraqadi 2/17/2015 21:36'!pour: unTerrain	^self new		terrain: unTerrain;		yourself! !MaContainerMorph subclass: #TsContainerWithKeyboardSupport	instanceVariableNames: 'actionDictionary'	classVariableNames: ''	poolDictionaries: ''	category: 'Tetris'!!TsContainerWithKeyboardSupport methodsFor: 'event handling' stamp: 'NouryBouraqadi 2/17/2015 23:25'!mouseLeave: anEvent 	super mouseLeave: anEvent 	"anEvent hand newKeyboardFocus: nil"! !!TsContainerWithKeyboardSupport methodsFor: 'event handling' stamp: 'NouryBouraqadi 2/17/2015 22:59'!handlesMouseOver: evt	^true! !!TsContainerWithKeyboardSupport methodsFor: 'event handling' stamp: 'NouryBouraqadi 2/17/2015 23:00'!mouseEnter: anEvent 	anEvent hand newKeyboardFocus: self! !!TsContainerWithKeyboardSupport methodsFor: 'event handling' stamp: 'NouryBouraqadi 2/17/2015 23:18'!on: aCharacter do: actionBlock	actionDictionary at: aCharacter put: actionBlock ! !!TsContainerWithKeyboardSupport methodsFor: 'event handling' stamp: 'NouryBouraqadi 2/17/2015 23:20'!handlesKeyboard: evt	^actionDictionary keys includes: evt keyCharacter ! !!TsContainerWithKeyboardSupport methodsFor: 'event handling' stamp: 'NouryBouraqadi 2/17/2015 23:12'!keyStroke: evt	(actionDictionary at: evt keyCharacter) value! !!TsContainerWithKeyboardSupport methodsFor: 'initialize-release' stamp: 'NouryBouraqadi 2/17/2015 23:07'!initialize	super initialize.	actionDictionary := Dictionary new! !(MaComposite subclass: #TsTetris	instanceVariableNames: 'terrain pieceCourante affichage process compteurScore'	classVariableNames: ''	poolDictionaries: ''	category: 'Tetris')forward: {}!!TsTetris methodsFor: 'accessing' stamp: 'NouryBouraqadi 2/17/2015 22:01'!pieceCourante: anObject	pieceCourante := anObject! !!TsTetris methodsFor: 'accessing' stamp: 'NouryBouraqadi 2/17/2015 22:01'!pieceCourante	^ pieceCourante! !!TsTetris methodsFor: 'accessing' stamp: 'NouryBouraqadi 2/17/2015 18:45'!name	^'Tetris Mines Douai'! !!TsTetris methodsFor: 'jouer' stamp: 'NouryBouraqadi 2/18/2015 10:30'!nouvellePartie	self terminerPartieEnCours.	compteurScore reset.	self viderTerrain.	self jouer.! !!TsTetris methodsFor: 'jouer' stamp: 'NouryBouraqadi 2/18/2015 10:32'!jouer	process := [[terrain peutAccepterUneNouvellePiece] whileTrue: [  		self prendreUneNouvellePiece.		[self pieceCourante peutAvancerVersLeBas] whileTrue: [			1 second wait.			self pieceCourante avancerVersLeBas.			]		]	] forkAt: Processor userInterruptPriority! !!TsTetris methodsFor: 'jouer' stamp: 'NouryBouraqadi 2/18/2015 10:31'!terminerPartieEnCours	process ifNil: [ ^self ].	process terminate! !!TsTetris methodsFor: 'jouer' stamp: 'NouryBouraqadi 2/18/2015 10:25'!prendreUneNouvellePiece	compteurScore increment.	self pieceCourante: (TsBarre deLargeur: (1 to: 4) atRandom).	self pieceCourante terrain: terrain.! !!TsTetris methodsFor: 'jouer' stamp: 'NouryBouraqadi 2/17/2015 18:47'!viderTerrain	terrain libererToutesLesCases.	affichage effacer! !!TsTetris methodsFor: 'initialize - release' stamp: 'NouryBouraqadi 2/17/2015 21:38'!largeurTerrainParDefaut	^8! !!TsTetris methodsFor: 'initialize - release' stamp: 'NouryBouraqadi 2/18/2015 10:30'!initialize	| afficheurScore boutonNouvellePartie barreControle |	super initialize.	terrain := TsTerrain deHauteur: self hauteurTerrainParDefaut deLargeur: self largeurTerrainParDefaut.	affichage := TsAfficheurTerrain pour: terrain.	compteurScore := MaCounter new.	afficheurScore := MaStringDisplay new.	afficheurScore 		fontSize: 16.	compteurScore connect: #countPort to: #contents: of: afficheurScore.	compteurScore reset.	boutonNouvellePartie := MaSimpleButton newWithLabel: 'Nouvelle Partie'.	boutonNouvellePartie 		color: Color lightGray;		fontSize: 16;		connect: #clickPort to: #nouvellePartie of: self.	barreControle := MaContainerMorph newRow.	barreControle 		color: Color white;		addMorph: boutonNouvellePartie;		addSpaceFiller;		addMorph: afficheurScore.	container := TsContainerWithKeyboardSupport newColumn.	container 		color: self defaultBackgroundColor;		addMorph: barreControle;		addMorph: affichage.	container on: Character arrowLeft do: [ self pieceCourante avancerVersLaGauche  ].	container on: Character arrowRight do: [ self pieceCourante avancerVersLaDroite  ].	"container on: Character arrowUp do: [ self pieceCourante rotation  ]."		"container on: #keyStroke send: #value to: [ self pieceCourante avancerVersLaDroite  ]."! !!TsTetris methodsFor: 'initialize - release' stamp: 'NouryBouraqadi 2/17/2015 21:38'!hauteurTerrainParDefaut	^10! !!TsTetris methodsFor: 'running' stamp: 'NouryBouraqadi 2/18/2015 10:15'!basicStart	super basicStart.	self nouvellePartie.	self currentHand  newKeyboardFocus: self view! !!TsTetris methodsFor: 'running' stamp: 'NouryBouraqadi 2/18/2015 10:31'!basicStop	self terminerPartieEnCours.	super basicStop! !Object subclass: #TsPiece	instanceVariableNames: 'couleur'	classVariableNames: ''	poolDictionaries: ''	category: 'Tetris'!!TsPiece methodsFor: 'initialize - release' stamp: 'NouryBouraqadi 2/17/2015 18:23'!couleurParDefaut	^{Color yellow. Color red. Color blue. Color green. Color purple. Color pink} atRandom! !!TsPiece methodsFor: 'initialize - release' stamp: 'NouryBouraqadi 2/17/2015 17:37'!initialize	super initialize.	self couleur: self couleurParDefaut! !!TsPiece methodsFor: 'deplacement' stamp: 'NouryBouraqadi 2/17/2015 22:36'!avancerVersLaGauche	self peutAvancerVersLaGauche ifFalse: [ ^self ].	self avancerDe: -1@0! !!TsPiece methodsFor: 'deplacement' stamp: 'NouryBouraqadi 2/17/2015 17:59'!rotation	self subclassResponsibility ! !!TsPiece methodsFor: 'deplacement' stamp: 'NouryBouraqadi 2/17/2015 22:36'!avancerVersLaDroite	self peutAvancerVersLaDroite ifFalse: [ ^self ].	self avancerDe: 1@0! !!TsPiece methodsFor: 'deplacement' stamp: 'NouryBouraqadi 2/17/2015 22:27'!peutAvancerVersLaGauche	self subclassResponsibility ! !!TsPiece methodsFor: 'deplacement' stamp: 'NouryBouraqadi 2/17/2015 22:27'!peutAvancerVersLaDroite	self subclassResponsibility ! !!TsPiece methodsFor: 'deplacement' stamp: 'NouryBouraqadi 2/17/2015 22:37'!avancerVersLeBas	self avancerDe: 0@1! !!TsPiece methodsFor: 'deplacement' stamp: 'NouryBouraqadi 2/17/2015 21:51'!peutAvancerVersLeBas	^self carres allSatisfy: [ :unCarre| 		unCarre peutAvancerVersLeBas	]! !!TsPiece methodsFor: 'deplacement' stamp: 'NouryBouraqadi 2/17/2015 22:36'!avancerDe: delta	self carres do: [ :each | each enlever].	self carres do: [ :each| each position: each position + delta ].	self carres do: [ :each | each placer ].! !!TsPiece methodsFor: 'accessing' stamp: 'NouryBouraqadi 2/17/2015 18:02'!terrain: unTerrain	self carres do: [ :unCarre| unCarre terrain: unTerrain ]! !!TsPiece methodsFor: 'accessing' stamp: 'NouryBouraqadi 2/17/2015 17:36'!couleur	^ couleur! !!TsPiece methodsFor: 'accessing' stamp: 'NouryBouraqadi 2/17/2015 17:30'!positionsOccupees	^self carres collect: [ :unCarre|  unCarre position ]! !!TsPiece methodsFor: 'accessing' stamp: 'NouryBouraqadi 2/17/2015 17:29'!carres	self subclassResponsibility ! !!TsPiece methodsFor: 'accessing' stamp: 'NouryBouraqadi 2/17/2015 17:36'!couleur: anObject	couleur := anObject! !TsPiece subclass: #TsPieceComplexe	instanceVariableNames: 'carres'	classVariableNames: ''	poolDictionaries: ''	category: 'Tetris'!!TsPieceComplexe methodsFor: 'accessing' stamp: 'NouryBouraqadi 2/17/2015 17:38'!carres: desCarres	carres := desCarres.	self mettreAJourCouleurCarres ! !!TsPieceComplexe methodsFor: 'accessing' stamp: 'NouryBouraqadi 2/17/2015 17:39'!couleur: uneCouleur	super couleur: uneCouleur.	self mettreAJourCouleurCarres! !!TsPieceComplexe methodsFor: 'accessing' stamp: 'NouryBouraqadi 2/17/2015 21:42'!carres	^carres ifNil: [ #() ]! !!TsPieceComplexe methodsFor: 'initialize-release' stamp: 'NouryBouraqadi 2/17/2015 17:40'!mettreAJourCouleurCarres	self carres do: [ :unCarre| unCarre couleur: self couleur ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TsPieceComplexe class	instanceVariableNames: ''!!TsPieceComplexe class methodsFor: 'instance creation' stamp: 'NouryBouraqadi 2/17/2015 17:36'!nouveauCarreEn: unPoint	^TsCarre new		position: unPoint;		yourself! !TsPieceComplexe subclass: #TsBarre	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Tetris'!!TsBarre methodsFor: 'deplacement' stamp: 'NouryBouraqadi 2/17/2015 18:01'!rotation	self notYetImplemented ! !!TsBarre methodsFor: 'deplacement' stamp: 'NouryBouraqadi 2/17/2015 22:29'!peutAvancerVersLaGauche	^self carres first peutAvancerVersLaGauche! !!TsBarre methodsFor: 'deplacement' stamp: 'NouryBouraqadi 2/17/2015 22:29'!peutAvancerVersLaDroite	^self carres last peutAvancerVersLaDroite! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TsBarre class	instanceVariableNames: ''!!TsBarre class methodsFor: 'instance creation' stamp: 'NouryBouraqadi 2/17/2015 17:58'!deLargeur: nbreCarres	| desCarres |	desCarres := OrderedCollection new.	1 to: nbreCarres do: [:x| desCarres add: (self nouveauCarreEn: x@1) ].	^self new		carres: desCarres;		yourself 	! !TsPiece subclass: #TsCarre	instanceVariableNames: 'position terrain'	classVariableNames: ''	poolDictionaries: ''	category: 'Tetris'!!TsCarre methodsFor: 'accessing' stamp: 'NouryBouraqadi 2/17/2015 21:47'!terrain: unTerrain	terrain := unTerrain.	self terrain placer: self! !!TsCarre methodsFor: 'accessing' stamp: 'NouryBouraqadi 2/17/2015 17:28'!position	^ position! !!TsCarre methodsFor: 'accessing' stamp: 'NouryBouraqadi 2/17/2015 17:29'!carres	^{self}! !!TsCarre methodsFor: 'accessing' stamp: 'NouryBouraqadi 2/17/2015 18:01'!terrain	^ terrain! !!TsCarre methodsFor: 'accessing' stamp: 'NouryBouraqadi 2/17/2015 22:32'!position: unPoint	position := unPoint.! !!TsCarre methodsFor: 'deplacement' stamp: 'NouryBouraqadi 2/17/2015 18:00'!rotation	^self "Rien à faire"! !!TsCarre methodsFor: 'deplacement' stamp: 'NouryBouraqadi 2/17/2015 22:35'!placer	self terrain placer: self! !!TsCarre methodsFor: 'deplacement' stamp: 'NouryBouraqadi 2/17/2015 22:28'!peutAvancerVersLaGauche	^self terrain estLibreEn: self position - (1@0)! !!TsCarre methodsFor: 'deplacement' stamp: 'NouryBouraqadi 2/17/2015 22:28'!peutAvancerVersLaDroite	^self terrain estLibreEn: self position + (1@0)! !!TsCarre methodsFor: 'deplacement' stamp: 'NouryBouraqadi 2/17/2015 21:52'!peutAvancerVersLeBas	^self terrain estLibreEn: self position + (0@1)! !!TsCarre methodsFor: 'deplacement' stamp: 'NouryBouraqadi 2/17/2015 22:34'!enlever	self terrain enlever: self! !Object subclass: #TsTerrain	instanceVariableNames: 'cases afficheur'	classVariableNames: ''	poolDictionaries: ''	category: 'Tetris'!!TsTerrain methodsFor: 'initialize-release' stamp: 'NouryBouraqadi 2/17/2015 17:49'!hauteur: uneHauteur largeur: uneLargeur 	cases := Matrix rows:  uneHauteur columns: uneLargeur ! !!TsTerrain methodsFor: 'accessing' stamp: 'NouryBouraqadi 2/17/2015 21:44'!afficheur	^ afficheur! !!TsTerrain methodsFor: 'accessing' stamp: 'NouryBouraqadi 2/17/2015 17:48'!hauteur	^cases rowCount ! !!TsTerrain methodsFor: 'accessing' stamp: 'NouryBouraqadi 2/17/2015 17:48'!largeur	^cases columnCount ! !!TsTerrain methodsFor: 'accessing' stamp: 'NouryBouraqadi 2/17/2015 21:44'!afficheur: anObject	afficheur := anObject! !!TsTerrain methodsFor: 'remplissage' stamp: 'NouryBouraqadi 2/17/2015 21:45'!enlever: unCarre	| position |	position := unCarre position.	cases at: position y at: position x put: nil.	self afficheur effacerCarre: unCarre ! !!TsTerrain methodsFor: 'remplissage' stamp: 'NouryBouraqadi 2/17/2015 18:21'!libererToutesLesCases	self hauteur: self hauteur largeur: self largeur! !!TsTerrain methodsFor: 'remplissage' stamp: 'NouryBouraqadi 2/17/2015 21:54'!estLibreEn: unPoint	((1 to: self largeur) includes: unPoint x) ifFalse: [ ^false ].	((1 to: self hauteur) includes: unPoint y) ifFalse: [ ^false ].		^(cases at: unPoint y at: unPoint x) isNil! !!TsTerrain methodsFor: 'remplissage' stamp: 'NouryBouraqadi 2/17/2015 21:50'!peutAccepterUneNouvellePiece	^(1 to: self largeur) allSatisfy: [ :x| 		self estLibreEn: x@1]! !!TsTerrain methodsFor: 'remplissage' stamp: 'NouryBouraqadi 2/17/2015 21:45'!placer: unCarre	| position |	position := unCarre position.	cases at: position y at: position x put: unCarre.	self afficheur dessinerCarre: unCarre! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TsTerrain class	instanceVariableNames: ''!!TsTerrain class methodsFor: 'instance creation' stamp: 'NouryBouraqadi 2/17/2015 18:27'!deHauteur: uneHauteur deLargeur: uneLargeur	^self new		hauteur: uneHauteur largeur: uneLargeur;		yourself! !
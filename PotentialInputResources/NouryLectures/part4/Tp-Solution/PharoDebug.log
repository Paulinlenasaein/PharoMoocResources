THERE_BE_DRAGONS_HERE
MessageNotUnderstood: TsAfficheurTerrain class>>pour:
17 February 2015 9:35:31.622337 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

TsAfficheurTerrain class(Object)>>doesNotUnderstand: #pour:
	Receiver: TsAfficheurTerrain
	Arguments and temporary variables: 
		aMessage: 	pour: a TsTerrain
		exception: 	MessageNotUnderstood: TsAfficheurTerrain class>>pour:
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	MaDrawingArea
		methodDict: 	a MethodDictionary(#coteCarreEnPixel->TsAfficheurTerrain>>#coteCarr...etc...
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#TsAfficheurTerrain
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Tetris
		traitComposition: 	{}
		localSelectors: 	nil


TsTetris>>initialize
	Receiver: a TsTetris
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a MaContainerMorph(250609664)
		terrain: 	a TsTerrain
		pieceCourante: 	nil
		affichage: 	nil


TsTetris class(Behavior)>>new
	Receiver: TsTetris
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	MaComposite
		methodDict: 	a MethodDictionary(#hauteurTerrainParDefaut->TsTetris>>#hauteurTerr...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	#(#terrain #pieceCourante #affichage)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#TsTetris
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Tetris
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'tetris := TsTetris new.'
		itsSelection: 	a Text for 'tetris := TsTetris new.'
		itsSelectionString: 	'tetris := TsTetris new.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ tetris := TsTetris new
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(794034176)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(794034176)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[ textMorph editor evaluateSelection ] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(1007681536)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(522.0@358.0) corner: (962.0@525.0)
		owner: 	a SystemWindow(899678208)
		submorphs: 	an Array(a TransformMorph(946077696))
		fullBounds: 	(522@358) corner: (962@525)
		color: 	Color white
		extension: 	a MorphExtension (772800512) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1047527424)
		scroller: 	a TransformMorph(946077696)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(963641344)
		textMorph: 	a TextMorphForEditView(794034176)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(24 to: 23)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


[ result := editBlock value ] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(1007681536)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph editor evaluateSelection ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(522.0@358.0) corner: (962.0@525.0)
		owner: 	a SystemWindow(899678208)
		submorphs: 	an Array(a TransformMorph(946077696))
		fullBounds: 	(522@358) corner: (962@525)
		color: 	Color white
		extension: 	a MorphExtension (772800512) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1047527424)
		scroller: 	a TransformMorph(946077696)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(963641344)
		textMorph: 	a TextMorphForEditView(794034176)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(24 to: 23)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(794034176)
	Arguments and temporary variables: 
		editBlock: 	[ result := editBlock value ]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@18)
		owner: 	a TransformMorph(946077696)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@18)
		color: 	Color black
		extension: 	a MorphExtension (854851584) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'tetris := TsTetris new.'
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(1007681536)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(1007681536)
	Arguments and temporary variables: 
		result: 	nil
		editBlock: 	[ textMorph editor evaluateSelection ]
	Receiver's instance variables: 
		bounds: 	(522.0@358.0) corner: (962.0@525.0)
		owner: 	a SystemWindow(899678208)
		submorphs: 	an Array(a TransformMorph(946077696))
		fullBounds: 	(522@358) corner: (962@525)
		color: 	Color white
		extension: 	a MorphExtension (772800512) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1047527424)
		scroller: 	a TransformMorph(946077696)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(963641344)
		textMorph: 	a TextMorphForEditView(794034176)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(24 to: 23)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(1007681536)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(522.0@358.0) corner: (962.0@525.0)
		owner: 	a SystemWindow(899678208)
		submorphs: 	an Array(a TransformMorph(946077696))
		fullBounds: 	(522@358) corner: (962@525)
		color: 	Color white
		extension: 	a MorphExtension (772800512) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1047527424)
		scroller: 	a TransformMorph(946077696)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(963641344)
		textMorph: 	a TextMorphForEditView(794034176)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(24 to: 23)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


[ :morph | morph doIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: SmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		morph: 	a PluggableTextMorph(1007681536)
	Receiver's instance variables: 
		superclass: 	TextEditor
		methodDict: 	a MethodDictionary(#argAdvance:->SmalltalkEditor>>#argAdvance: #bro...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SmalltalkEditor
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Text-Edition'
		traitComposition: 	{}
		localSelectors: 	nil
		cmdActions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop...etc...
		shiftCmdActions: 	#(#noop: #argAdvance: #noop: #compareToClipboard: #debugIt: #m...etc...


BlockClosure>>cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(1007681536)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	157
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(1007681536)
		secondArg: 	a PluggableTextMorph(1007681536)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	157
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(1007681536)
		secondArg: 	a PluggableTextMorph(1007681536)
		thirdArg: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	157
		numArgs: 	1


KMCategoryBinding>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#doIt on Cmd + D do [ :morph | morph doIt ]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(1007681536)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(1007681536)


[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Cmd + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		l: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[ :l | l completeMatch: self buffer: aBuffer ]
		index: 	1
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Cmd + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #doIt on Cmd + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
		entry: 	#doIt on Cmd + D do [ :morph | morph doIt ]

	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


Set>>do:
	Receiver: a Set(#inspectIt on Cmd + I do [ :morph | morph inspectIt ]
 #sendersOfIt on Cmd + N do [ ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andD...etc...
		index: 	9
		each: 	#doIt on Cmd + D do [ :morph | morph doIt ]

	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(#inspectIt on Cmd + I do [ :morph | morph inspectIt ]
 #senders...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aListener: 	a KMDispatcher
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(1007681536)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(1007681536)


[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextMorphTab) aKMCategoryTarget(#SmalltalkEdi...etc...
		morph: 	a PluggableTextMorph(1007681536)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#TextMorphTab) aKMCategoryTa...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyM...etc...
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#TextMorphTab) aKMCate...etc...
		firstIndex: 	1
		lastIndex: 	7


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextMorphTab) aKMCategoryTarget(#SmalltalkEdi...etc...
		morph: 	a PluggableTextMorph(1007681536)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a PluggableTextMorph(1007681536)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		targetToDispatch: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>do:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aBlock: 	[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstan...etc...
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
		chain: 	a KMDispatchChain
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a TextMorphForEditView(794034176)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(794034176)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@18)
		owner: 	a TransformMorph(946077696)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@18)
		color: 	Color black
		extension: 	a MorphExtension (854851584) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'tetris := TsTetris new.'
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(1007681536)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(794034176)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@18)
		owner: 	a TransformMorph(946077696)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@18)
		color: 	Color black
		extension: 	a MorphExtension (854851584) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'tetris := TsTetris new.'
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(1007681536)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-d>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(794034176)
	Receiver's instance variables: 
		timeStamp: 	1341052
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	(143.0@ -8.0)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	100
		charCode: 	100
		scanCode: 	2


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(794034176)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@18)
		owner: 	a TransformMorph(946077696)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@18)
		color: 	Color black
		extension: 	a MorphExtension (854851584) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'tetris := TsTetris new.'
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(1007681536)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(794034176)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@18)
		owner: 	a TransformMorph(946077696)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@18)
		color: 	Color black
		extension: 	a MorphExtension (854851584) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'tetris := TsTetris new.'
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(1007681536)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(794034176)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(669@351) corner: (685@367)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(669@351) corner: (685@367)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(794034176)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(669@351) mouseOver nil nil]
		targetOffset: 	(152.0@21.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1340092 669 351 0 0 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8



--- The full stack ---
TsAfficheurTerrain class(Object)>>doesNotUnderstand: #pour:
TsTetris>>initialize
TsTetris class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[ textMorph editor evaluateSelection ] in PluggableTextMorph>>doIt
[ result := editBlock value ] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
[ :morph | morph doIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "enlever:" is nil
17 February 2015 9:39:43.359439 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

UndefinedObject(Object)>>doesNotUnderstand: #enlever:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	enlever: a TsCarre
		exception: 	MessageNotUnderstood: receiver of "enlever:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

TsCarre>>position:
	Receiver: a TsCarre
	Arguments and temporary variables: 
		unPoint: 	(1@1)
	Receiver's instance variables: 
		couleur: 	Color red
		position: 	nil
		terrain: 	nil


TsBarre class(TsPieceComplexe class)>>nouveauCarreEn:
	Receiver: TsBarre
	Arguments and temporary variables: 
		unPoint: 	(1@1)
	Receiver's instance variables: 
		superclass: 	TsPieceComplexe
		methodDict: 	a MethodDictionary(#rotation->TsBarre>>#rotation )
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#TsBarre
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Tetris
		traitComposition: 	{}
		localSelectors: 	nil


TsBarre class>>deLargeur:
	Receiver: TsBarre
	Arguments and temporary variables: 
		nbreCarres: 	4
		desCarres: 	an OrderedCollection()
		x: 	1
	Receiver's instance variables: 
		superclass: 	TsPieceComplexe
		methodDict: 	a MethodDictionary(#rotation->TsBarre>>#rotation )
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#TsBarre
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Tetris
		traitComposition: 	{}
		localSelectors: 	nil


TsTetris>>prendreUneNouvellePiece
	Receiver: a TsTetris
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a MaContainerMorph(69206016)
		terrain: 	a TsTerrain
		pieceCourante: 	nil
		affichage: 	a TsAfficheurTerrain


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'tetris prendreUneNouvellePiece.'
		itsSelection: 	a Text for 'tetris prendreUneNouvellePiece.'
		itsSelectionString: 	'tetris prendreUneNouvellePiece.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ tetris prendreUneNouvellePiece
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(794034176)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(794034176)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[ textMorph editor evaluateSelection ] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(1007681536)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(319.0@543.0) corner: (759.0@710.0)
		owner: 	a SystemWindow(899678208)
		submorphs: 	an Array(a TransformMorph(946077696))
		fullBounds: 	(319@543) corner: (759@710)
		color: 	Color white
		extension: 	a MorphExtension (772800512) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1047527424)
		scroller: 	a TransformMorph(946077696)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(963641344)
		textMorph: 	a TextMorphForEditView(794034176)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(85 to: 84)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


[ result := editBlock value ] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(1007681536)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph editor evaluateSelection ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(319.0@543.0) corner: (759.0@710.0)
		owner: 	a SystemWindow(899678208)
		submorphs: 	an Array(a TransformMorph(946077696))
		fullBounds: 	(319@543) corner: (759@710)
		color: 	Color white
		extension: 	a MorphExtension (772800512) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1047527424)
		scroller: 	a TransformMorph(946077696)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(963641344)
		textMorph: 	a TextMorphForEditView(794034176)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(85 to: 84)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(794034176)
	Arguments and temporary variables: 
		editBlock: 	[ result := editBlock value ]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@66)
		owner: 	a TransformMorph(946077696)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@66)
		color: 	Color black
		extension: 	a MorphExtension (854851584) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'tetris := TsTetris new.
tetris start.
tetris viderTerrain.
te...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(1007681536)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(1007681536)
	Arguments and temporary variables: 
		result: 	nil
		editBlock: 	[ textMorph editor evaluateSelection ]
	Receiver's instance variables: 
		bounds: 	(319.0@543.0) corner: (759.0@710.0)
		owner: 	a SystemWindow(899678208)
		submorphs: 	an Array(a TransformMorph(946077696))
		fullBounds: 	(319@543) corner: (759@710)
		color: 	Color white
		extension: 	a MorphExtension (772800512) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1047527424)
		scroller: 	a TransformMorph(946077696)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(963641344)
		textMorph: 	a TextMorphForEditView(794034176)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(85 to: 84)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(1007681536)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(319.0@543.0) corner: (759.0@710.0)
		owner: 	a SystemWindow(899678208)
		submorphs: 	an Array(a TransformMorph(946077696))
		fullBounds: 	(319@543) corner: (759@710)
		color: 	Color white
		extension: 	a MorphExtension (772800512) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1047527424)
		scroller: 	a TransformMorph(946077696)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(963641344)
		textMorph: 	a TextMorphForEditView(794034176)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(85 to: 84)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


[ :morph | morph doIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: SmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		morph: 	a PluggableTextMorph(1007681536)
	Receiver's instance variables: 
		superclass: 	TextEditor
		methodDict: 	a MethodDictionary(#argAdvance:->SmalltalkEditor>>#argAdvance: #bro...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SmalltalkEditor
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Text-Edition'
		traitComposition: 	{}
		localSelectors: 	nil
		cmdActions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop...etc...
		shiftCmdActions: 	#(#noop: #argAdvance: #noop: #compareToClipboard: #debugIt: #m...etc...


BlockClosure>>cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(1007681536)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	157
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(1007681536)
		secondArg: 	a PluggableTextMorph(1007681536)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	157
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(1007681536)
		secondArg: 	a PluggableTextMorph(1007681536)
		thirdArg: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	157
		numArgs: 	1


KMCategoryBinding>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#doIt on Cmd + D do [ :morph | morph doIt ]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(1007681536)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(1007681536)


[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Cmd + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		l: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[ :l | l completeMatch: self buffer: aBuffer ]
		index: 	1
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Cmd + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #doIt on Cmd + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
		entry: 	#doIt on Cmd + D do [ :morph | morph doIt ]

	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


Set>>do:
	Receiver: a Set(#inspectIt on Cmd + I do [ :morph | morph inspectIt ]
 #sendersOfIt on Cmd + N do [ ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andD...etc...
		index: 	9
		each: 	#doIt on Cmd + D do [ :morph | morph doIt ]

	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(#inspectIt on Cmd + I do [ :morph | morph inspectIt ]
 #senders...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aListener: 	a KMDispatcher
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(1007681536)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(1007681536)


[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextMorphTab) aKMCategoryTarget(#SmalltalkEdi...etc...
		morph: 	a PluggableTextMorph(1007681536)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#TextMorphTab) aKMCategoryTa...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyM...etc...
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#TextMorphTab) aKMCate...etc...
		firstIndex: 	1
		lastIndex: 	7


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextMorphTab) aKMCategoryTarget(#SmalltalkEdi...etc...
		morph: 	a PluggableTextMorph(1007681536)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a PluggableTextMorph(1007681536)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		targetToDispatch: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>do:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aBlock: 	[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstan...etc...
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
		chain: 	a KMDispatchChain
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a TextMorphForEditView(794034176)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(794034176)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@66)
		owner: 	a TransformMorph(946077696)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@66)
		color: 	Color black
		extension: 	a MorphExtension (854851584) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'tetris := TsTetris new.
tetris start.
tetris viderTerrain.
te...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(1007681536)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(794034176)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@66)
		owner: 	a TransformMorph(946077696)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@66)
		color: 	Color black
		extension: 	a MorphExtension (854851584) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'tetris := TsTetris new.
tetris start.
tetris viderTerrain.
te...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(1007681536)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-d>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(794034176)
	Receiver's instance variables: 
		timeStamp: 	1592807
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	(166.0@35.0)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	100
		charCode: 	100
		scanCode: 	2


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(794034176)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@66)
		owner: 	a TransformMorph(946077696)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@66)
		color: 	Color black
		extension: 	a MorphExtension (854851584) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'tetris := TsTetris new.
tetris start.
tetris viderTerrain.
te...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(1007681536)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #enlever:
TsCarre>>position:
TsBarre class(TsPieceComplexe class)>>nouveauCarreEn:
TsBarre class>>deLargeur:
TsTetris>>prendreUneNouvellePiece
UndefinedObject>>DoIt
OpalCompiler>>evaluate
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[ textMorph editor evaluateSelection ] in PluggableTextMorph>>doIt
[ result := editBlock value ] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
[ :morph | morph doIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "do:" is nil
17 February 2015 9:41:48.426742 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

UndefinedObject(Object)>>doesNotUnderstand: #do:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	do: [ :unCarre | unCarre couleur: self couleur ]
		exception: 	MessageNotUnderstood: receiver of "do:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

TsBarre(TsPieceComplexe)>>mettreAJourCouleurCarres
	Receiver: a TsBarre
	Arguments and temporary variables: 

	Receiver's instance variables: 
		couleur: 	Color pink
		carres: 	nil


TsBarre(TsPieceComplexe)>>couleur:
	Receiver: a TsBarre
	Arguments and temporary variables: 
		uneCouleur: 	Color pink
	Receiver's instance variables: 
		couleur: 	Color pink
		carres: 	nil


TsBarre(TsPiece)>>initialize
	Receiver: a TsBarre
	Arguments and temporary variables: 

	Receiver's instance variables: 
		couleur: 	Color pink
		carres: 	nil


TsBarre class(Behavior)>>new
	Receiver: TsBarre
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TsPieceComplexe
		methodDict: 	a MethodDictionary(#rotation->TsBarre>>#rotation )
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#TsBarre
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Tetris
		traitComposition: 	{}
		localSelectors: 	nil


TsBarre class>>deLargeur:
	Receiver: TsBarre
	Arguments and temporary variables: 
		nbreCarres: 	4
		desCarres: 	an OrderedCollection(a TsCarre a TsCarre a TsCarre a TsCarre)
	Receiver's instance variables: 
		superclass: 	TsPieceComplexe
		methodDict: 	a MethodDictionary(#rotation->TsBarre>>#rotation )
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#TsBarre
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Tetris
		traitComposition: 	{}
		localSelectors: 	nil


TsTetris>>prendreUneNouvellePiece
	Receiver: a TsTetris
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a MaContainerMorph(69206016)
		terrain: 	a TsTerrain
		pieceCourante: 	nil
		affichage: 	a TsAfficheurTerrain


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'tetris prendreUneNouvellePiece.'
		itsSelection: 	a Text for 'tetris prendreUneNouvellePiece.'
		itsSelectionString: 	'tetris prendreUneNouvellePiece.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ tetris prendreUneNouvellePiece
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(794034176)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(794034176)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[ textMorph editor evaluateSelection ] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(1007681536)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(319.0@543.0) corner: (759.0@710.0)
		owner: 	a SystemWindow(899678208)
		submorphs: 	an Array(a TransformMorph(946077696))
		fullBounds: 	(319@543) corner: (759@710)
		color: 	Color white
		extension: 	a MorphExtension (772800512) [locked]  [other:  (kmDispatcher -> a K...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1047527424)
		scroller: 	a TransformMorph(946077696)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(963641344)
		textMorph: 	a TextMorphForEditView(794034176)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(60 to: 90)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


[ result := editBlock value ] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(1007681536)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph editor evaluateSelection ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(319.0@543.0) corner: (759.0@710.0)
		owner: 	a SystemWindow(899678208)
		submorphs: 	an Array(a TransformMorph(946077696))
		fullBounds: 	(319@543) corner: (759@710)
		color: 	Color white
		extension: 	a MorphExtension (772800512) [locked]  [other:  (kmDispatcher -> a K...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1047527424)
		scroller: 	a TransformMorph(946077696)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(963641344)
		textMorph: 	a TextMorphForEditView(794034176)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(60 to: 90)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(794034176)
	Arguments and temporary variables: 
		editBlock: 	[ result := editBlock value ]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@66)
		owner: 	a TransformMorph(946077696)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@66)
		color: 	Color black
		extension: 	a MorphExtension (854851584) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'tetris := TsTetris new.
tetris start.
tetris viderTerrain.
te...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(1007681536)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(1007681536)
	Arguments and temporary variables: 
		result: 	nil
		editBlock: 	[ textMorph editor evaluateSelection ]
	Receiver's instance variables: 
		bounds: 	(319.0@543.0) corner: (759.0@710.0)
		owner: 	a SystemWindow(899678208)
		submorphs: 	an Array(a TransformMorph(946077696))
		fullBounds: 	(319@543) corner: (759@710)
		color: 	Color white
		extension: 	a MorphExtension (772800512) [locked]  [other:  (kmDispatcher -> a K...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1047527424)
		scroller: 	a TransformMorph(946077696)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(963641344)
		textMorph: 	a TextMorphForEditView(794034176)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(60 to: 90)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(1007681536)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(319.0@543.0) corner: (759.0@710.0)
		owner: 	a SystemWindow(899678208)
		submorphs: 	an Array(a TransformMorph(946077696))
		fullBounds: 	(319@543) corner: (759@710)
		color: 	Color white
		extension: 	a MorphExtension (772800512) [locked]  [other:  (kmDispatcher -> a K...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1047527424)
		scroller: 	a TransformMorph(946077696)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(963641344)
		textMorph: 	a TextMorphForEditView(794034176)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(60 to: 90)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


[ :morph | morph doIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: SmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		morph: 	a PluggableTextMorph(1007681536)
	Receiver's instance variables: 
		superclass: 	TextEditor
		methodDict: 	a MethodDictionary(#argAdvance:->SmalltalkEditor>>#argAdvance: #bro...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SmalltalkEditor
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Text-Edition'
		traitComposition: 	{}
		localSelectors: 	nil
		cmdActions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop...etc...
		shiftCmdActions: 	#(#noop: #argAdvance: #noop: #compareToClipboard: #debugIt: #m...etc...


BlockClosure>>cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(1007681536)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	157
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(1007681536)
		secondArg: 	a PluggableTextMorph(1007681536)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	157
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(1007681536)
		secondArg: 	a PluggableTextMorph(1007681536)
		thirdArg: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	157
		numArgs: 	1


KMCategoryBinding>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#doIt on Cmd + D do [ :morph | morph doIt ]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(1007681536)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(1007681536)


[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Cmd + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		l: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[ :l | l completeMatch: self buffer: aBuffer ]
		index: 	1
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Cmd + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #doIt on Cmd + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
		entry: 	#doIt on Cmd + D do [ :morph | morph doIt ]

	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


Set>>do:
	Receiver: a Set(#inspectIt on Cmd + I do [ :morph | morph inspectIt ]
 #sendersOfIt on Cmd + N do [ ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andD...etc...
		index: 	9
		each: 	#doIt on Cmd + D do [ :morph | morph doIt ]

	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(#inspectIt on Cmd + I do [ :morph | morph inspectIt ]
 #senders...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aListener: 	a KMDispatcher
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(1007681536)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(1007681536)


[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextMorphTab) aKMCategoryTarget(#SmalltalkEdi...etc...
		morph: 	a PluggableTextMorph(1007681536)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#TextMorphTab) aKMCategoryTa...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyM...etc...
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#TextMorphTab) aKMCate...etc...
		firstIndex: 	1
		lastIndex: 	7


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextMorphTab) aKMCategoryTarget(#SmalltalkEdi...etc...
		morph: 	a PluggableTextMorph(1007681536)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a PluggableTextMorph(1007681536)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		targetToDispatch: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>do:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aBlock: 	[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstan...etc...
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
		chain: 	a KMDispatchChain
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a TextMorphForEditView(794034176)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(794034176)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@66)
		owner: 	a TransformMorph(946077696)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@66)
		color: 	Color black
		extension: 	a MorphExtension (854851584) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'tetris := TsTetris new.
tetris start.
tetris viderTerrain.
te...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(1007681536)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(794034176)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@66)
		owner: 	a TransformMorph(946077696)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@66)
		color: 	Color black
		extension: 	a MorphExtension (854851584) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'tetris := TsTetris new.
tetris start.
tetris viderTerrain.
te...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(1007681536)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #do:
TsBarre(TsPieceComplexe)>>mettreAJourCouleurCarres
TsBarre(TsPieceComplexe)>>couleur:
TsBarre(TsPiece)>>initialize
TsBarre class(Behavior)>>new
TsBarre class>>deLargeur:
TsTetris>>prendreUneNouvellePiece
UndefinedObject>>DoIt
OpalCompiler>>evaluate
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[ textMorph editor evaluateSelection ] in PluggableTextMorph>>doIt
[ result := editBlock value ] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
[ :morph | morph doIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: 1st subscript out of range
17 February 2015 9:48:30.565603 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

Matrix(Object)>>error:
	Receiver: a Matrix(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil n...etc...
	Arguments and temporary variables: 
		aString: 	'1st subscript out of range'
	Receiver's instance variables: 
		nrows: 	10
		ncols: 	8
		contents: 	an Array(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ...etc...


Matrix>>indexForRow:andColumn:
	Receiver: a Matrix(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil n...etc...
	Arguments and temporary variables: 
		row: 	11
		column: 	1
	Receiver's instance variables: 
		nrows: 	10
		ncols: 	8
		contents: 	an Array(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ...etc...


Matrix>>at:at:put:
	Receiver: a Matrix(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil n...etc...
	Arguments and temporary variables: 
		row: 	11
		column: 	1
		value: 	a TsCarre
	Receiver's instance variables: 
		nrows: 	10
		ncols: 	8
		contents: 	an Array(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ...etc...


TsTerrain>>placer:
	Receiver: a TsTerrain
	Arguments and temporary variables: 
		unCarre: 	a TsCarre
		position: 	(1@11)
	Receiver's instance variables: 
		cases: 	a Matrix(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...
		afficheur: 	a TsAfficheurTerrain


TsCarre>>position:
	Receiver: a TsCarre
	Arguments and temporary variables: 
		unPoint: 	(1@11)
	Receiver's instance variables: 
		couleur: 	Color blue
		position: 	(1@11)
		terrain: 	a TsTerrain


[ :each | each position: each position + (0 @ 1) ] in TsBarre(TsPiece)>>avancerVersLeBas
	Receiver: a TsBarre
	Arguments and temporary variables: 
		each: 	a TsCarre
	Receiver's instance variables: 
		couleur: 	Color blue
		carres: 	an OrderedCollection(a TsCarre a TsCarre a TsCarre a TsCarre)


OrderedCollection>>do:
	Receiver: an OrderedCollection(a TsCarre a TsCarre a TsCarre a TsCarre)
	Arguments and temporary variables: 
		aBlock: 	[ :each | each position: each position + (0 @ 1) ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a TsCarre a TsCarre a TsCarre a TsCarre nil nil nil nil nil nil...etc...
		firstIndex: 	1
		lastIndex: 	4


TsBarre(TsPiece)>>avancerVersLeBas
	Receiver: a TsBarre
	Arguments and temporary variables: 

	Receiver's instance variables: 
		couleur: 	Color blue
		carres: 	an OrderedCollection(a TsCarre a TsCarre a TsCarre a TsCarre)


TsBarre>>DoIt
	Receiver: a TsBarre
	Arguments and temporary variables: 

	Receiver's instance variables: 
		couleur: 	Color blue
		carres: 	an OrderedCollection(a TsCarre a TsCarre a TsCarre a TsCarre)


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'self avancerVersLeBas'
		itsSelection: 	a Text for 'self avancerVersLeBas'
		itsSelectionString: 	'self avancerVersLeBas'
	Receiver's instance variables: 
		ast: 	DoIt
	^ self avancerVersLeBas
		source: 	a ReadStream
		context: 	nil
		receiver: 	a TsBarre
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result ]
		result: 	nil
		rcvr: 	a TsBarre
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(619708416)
		selectionShowing: 	true
		model: 	a MorphicTextAdapter
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(619708416)
		selectionShowing: 	true
		model: 	a MorphicTextAdapter
		editingState: 	a SmalltalkEditingState


[ textMorph editor evaluateSelection ] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(928251904)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(140.0@634.0) corner: (530.0@701.0)
		owner: 	a PanelMorph(33030144)
		submorphs: 	an Array(a TransformMorph(474742784))
		fullBounds: 	(140@634) corner: (530@701)
		color: 	Color white
		extension: 	a MorphExtension (845414400) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color transparent
		model: 	a MorphicTextAdapter
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(956039168)
		scroller: 	a TransformMorph(474742784)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(745537536)
		textMorph: 	a TextMorphForEditView(619708416)
		getTextSelector: 	#getText
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#readSelection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 21)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	false
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	#setSelection:


[ result := editBlock value ] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(928251904)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph editor evaluateSelection ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(140.0@634.0) corner: (530.0@701.0)
		owner: 	a PanelMorph(33030144)
		submorphs: 	an Array(a TransformMorph(474742784))
		fullBounds: 	(140@634) corner: (530@701)
		color: 	Color white
		extension: 	a MorphExtension (845414400) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color transparent
		model: 	a MorphicTextAdapter
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(956039168)
		scroller: 	a TransformMorph(474742784)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(745537536)
		textMorph: 	a TextMorphForEditView(619708416)
		getTextSelector: 	#getText
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#readSelection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 21)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	false
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	#setSelection:


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(619708416)
	Arguments and temporary variables: 
		editBlock: 	[ result := editBlock value ]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (384@18)
		owner: 	a TransformMorph(474742784)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (384@18)
		color: 	Color black
		extension: 	a MorphExtension (674496512) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'self avancerVersLeBas '
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(928251904)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(928251904)
	Arguments and temporary variables: 
		result: 	nil
		editBlock: 	[ textMorph editor evaluateSelection ]
	Receiver's instance variables: 
		bounds: 	(140.0@634.0) corner: (530.0@701.0)
		owner: 	a PanelMorph(33030144)
		submorphs: 	an Array(a TransformMorph(474742784))
		fullBounds: 	(140@634) corner: (530@701)
		color: 	Color white
		extension: 	a MorphExtension (845414400) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color transparent
		model: 	a MorphicTextAdapter
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(956039168)
		scroller: 	a TransformMorph(474742784)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(745537536)
		textMorph: 	a TextMorphForEditView(619708416)
		getTextSelector: 	#getText
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#readSelection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 21)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	false
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	#setSelection:


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(928251904)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(140.0@634.0) corner: (530.0@701.0)
		owner: 	a PanelMorph(33030144)
		submorphs: 	an Array(a TransformMorph(474742784))
		fullBounds: 	(140@634) corner: (530@701)
		color: 	Color white
		extension: 	a MorphExtension (845414400) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color transparent
		model: 	a MorphicTextAdapter
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(956039168)
		scroller: 	a TransformMorph(474742784)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(745537536)
		textMorph: 	a TextMorphForEditView(619708416)
		getTextSelector: 	#getText
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#readSelection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 21)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	false
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	#setSelection:


[ :morph | morph doIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: SmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		morph: 	a PluggableTextMorph(928251904)
	Receiver's instance variables: 
		superclass: 	TextEditor
		methodDict: 	a MethodDictionary(#argAdvance:->SmalltalkEditor>>#argAdvance: #bro...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SmalltalkEditor
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Text-Edition'
		traitComposition: 	{}
		localSelectors: 	nil
		cmdActions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop...etc...
		shiftCmdActions: 	#(#noop: #argAdvance: #noop: #compareToClipboard: #debugIt: #m...etc...


BlockClosure>>cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(928251904)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	157
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(928251904)
		secondArg: 	a PluggableTextMorph(928251904)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	157
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(928251904)
		secondArg: 	a PluggableTextMorph(928251904)
		thirdArg: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	157
		numArgs: 	1


KMCategoryBinding>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#doIt on Cmd + D do [ :morph | morph doIt ]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(928251904)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(928251904)


[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Cmd + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		l: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[ :l | l completeMatch: self buffer: aBuffer ]
		index: 	1
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Cmd + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #doIt on Cmd + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
		entry: 	#doIt on Cmd + D do [ :morph | morph doIt ]

	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


Set>>do:
	Receiver: a Set(#inspectIt on Cmd + I do [ :morph | morph inspectIt ]
 #sendersOfIt on Cmd + N do [ ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andD...etc...
		index: 	9
		each: 	#doIt on Cmd + D do [ :morph | morph doIt ]

	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(#inspectIt on Cmd + I do [ :morph | morph inspectIt ]
 #senders...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aListener: 	a KMDispatcher
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(928251904)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(928251904)


[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#SmalltalkEditor) aKMCategoryTarget(#TextMorph...etc...
		morph: 	a PluggableTextMorph(928251904)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#SmalltalkEditor) aKMCategor...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyM...etc...
		index: 	2
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#SmalltalkEditor) aKMC...etc...
		firstIndex: 	1
		lastIndex: 	7


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#SmalltalkEditor) aKMCategoryTarget(#TextMorph...etc...
		morph: 	a PluggableTextMorph(928251904)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a PluggableTextMorph(928251904)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		targetToDispatch: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>do:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aBlock: 	[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstan...etc...
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
		chain: 	a KMDispatchChain
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a TextMorphForEditView(619708416)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(619708416)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (384@18)
		owner: 	a TransformMorph(474742784)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (384@18)
		color: 	Color black
		extension: 	a MorphExtension (674496512) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'self avancerVersLeBas '
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(928251904)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil



--- The full stack ---
Matrix(Object)>>error:
Matrix>>indexForRow:andColumn:
Matrix>>at:at:put:
TsTerrain>>placer:
TsCarre>>position:
[ :each | each position: each position + (0 @ 1) ] in TsBarre(TsPiece)>>avancerVersLeBas
OrderedCollection>>do:
TsBarre(TsPiece)>>avancerVersLeBas
TsBarre>>DoIt
OpalCompiler>>evaluate
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[ textMorph editor evaluateSelection ] in PluggableTextMorph>>doIt
[ result := editBlock value ] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
[ :morph | morph doIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: TsTerrain>>whileTrue:
17 February 2015 9:49:12.766075 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

TsTerrain(Object)>>doesNotUnderstand: #whileTrue:
	Receiver: a TsTerrain
	Arguments and temporary variables: 
		aMessage: 	whileTrue: [ 
self prendreUneNouvellePiece.
pieceCourante peutAvancer...etc...
		exception: 	MessageNotUnderstood: TsTerrain>>whileTrue:
		resumeValue: 	nil
	Receiver's instance variables: 
		cases: 	a Matrix(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...
		afficheur: 	a TsAfficheurTerrain


[ 
terrain peutAccepterUneNouvellePiece
	whileTrue: [ 
		self prendreUneNouvellePiece.
		pieceCourante peutAvancerVersLeBas
			whileTrue: [ 
				1 second wait.
				pieceCourante avancerVersLeBas ] ] ] in TsTetris>>jouer
	Receiver: a TsTetris
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a MaContainerMorph(670040064)
		terrain: 	a TsTerrain
		pieceCourante: 	nil
		affichage: 	a TsAfficheurTerrain


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
terrain peutAccepterUneNouvellePiece
	whileTrue: [ 
		self prendreUneNouvellePiece.
		p...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	TsTetris>>jouer
		startpc: 	57
		numArgs: 	0



--- The full stack ---
TsTerrain(Object)>>doesNotUnderstand: #whileTrue:
[ 
terrain peutAccepterUneNouvellePiece
	whileTrue: [ 
		self prendreUneNouvellePiece.
		pieceCourante peutAvancerVersLeBas
			whileTrue: [ 
				1 second wait.
				pieceCourante avancerVersLeBas ] ] ] in TsTetris>>jouer
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
NonBooleanReceiver: proceed for truth.
17 February 2015 9:50:06.638785 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

TsTerrain(Object)>>mustBeBooleanIn:
	Receiver: a TsTerrain
	Arguments and temporary variables: 
		context: 	[ terrain peutAccepterUneNouvellePiece ] in TsTetris>>jouer
		proceedValue: 	nil
	Receiver's instance variables: 
		cases: 	a Matrix(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...
		afficheur: 	a TsAfficheurTerrain


TsTerrain(Object)>>mustBeBoolean
	Receiver: a TsTerrain
	Arguments and temporary variables: 

	Receiver's instance variables: 
		cases: 	a Matrix(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...
		afficheur: 	a TsAfficheurTerrain


[ terrain peutAccepterUneNouvellePiece ] in TsTetris>>jouer
	Receiver: a TsTetris
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a MaContainerMorph(1059848192)
		terrain: 	a TsTerrain
		pieceCourante: 	nil
		affichage: 	a TsAfficheurTerrain


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ terrain peutAccepterUneNouvellePiece ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	TsTetris>>jouer
		startpc: 	57
		numArgs: 	0



--- The full stack ---
TsTerrain(Object)>>mustBeBooleanIn:
TsTerrain(Object)>>mustBeBoolean
[ terrain peutAccepterUneNouvellePiece ] in TsTetris>>jouer
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: TsBarre>>terrain
17 February 2015 9:50:26.087621 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

TsBarre(Object)>>doesNotUnderstand: #terrain
	Receiver: a TsBarre
	Arguments and temporary variables: 
		aMessage: 	terrain
		exception: 	MessageNotUnderstood: TsBarre>>terrain
		resumeValue: 	nil
	Receiver's instance variables: 
		couleur: 	Color purple
		carres: 	an OrderedCollection(a TsCarre a TsCarre a TsCarre a TsCarre)


[ :unCarre | self terrain estLibreEn: unCarre position ] in TsBarre(TsPiece)>>peutAvancerVersLeBas
	Receiver: a TsBarre
	Arguments and temporary variables: 
		unCarre: 	a TsCarre
	Receiver's instance variables: 
		couleur: 	Color purple
		carres: 	an OrderedCollection(a TsCarre a TsCarre a TsCarre a TsCarre)


[ :each | 
(aBlock value: each)
	ifFalse: [ ^ false ] ] in OrderedCollection(Collection)>>allSatisfy:
	Receiver: an OrderedCollection(a TsCarre a TsCarre a TsCarre a TsCarre)
	Arguments and temporary variables: 
		aBlock: 	[ :unCarre | self terrain estLibreEn: unCarre position ]
		each: 	a TsCarre
	Receiver's instance variables: 
		array: 	an Array(a TsCarre a TsCarre a TsCarre a TsCarre nil nil nil nil nil nil...etc...
		firstIndex: 	1
		lastIndex: 	4


OrderedCollection>>do:
	Receiver: an OrderedCollection(a TsCarre a TsCarre a TsCarre a TsCarre)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifFalse: [ ^ false ] ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a TsCarre a TsCarre a TsCarre a TsCarre nil nil nil nil nil nil...etc...
		firstIndex: 	1
		lastIndex: 	4


OrderedCollection(Collection)>>allSatisfy:
	Receiver: an OrderedCollection(a TsCarre a TsCarre a TsCarre a TsCarre)
	Arguments and temporary variables: 
		aBlock: 	[ :unCarre | self terrain estLibreEn: unCarre position ]
	Receiver's instance variables: 
		array: 	an Array(a TsCarre a TsCarre a TsCarre a TsCarre nil nil nil nil nil nil...etc...
		firstIndex: 	1
		lastIndex: 	4


TsBarre(TsPiece)>>peutAvancerVersLeBas
	Receiver: a TsBarre
	Arguments and temporary variables: 

	Receiver's instance variables: 
		couleur: 	Color purple
		carres: 	an OrderedCollection(a TsCarre a TsCarre a TsCarre a TsCarre)


[ terrain peutAccepterUneNouvellePiece ] in TsTetris>>jouer
	Receiver: a TsTetris
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a MaContainerMorph(1059848192)
		terrain: 	a TsTerrain
		pieceCourante: 	a TsBarre
		affichage: 	a TsAfficheurTerrain


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ terrain peutAccepterUneNouvellePiece ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	TsTetris>>jouer
		startpc: 	57
		numArgs: 	0



--- The full stack ---
TsBarre(Object)>>doesNotUnderstand: #terrain
[ :unCarre | self terrain estLibreEn: unCarre position ] in TsBarre(TsPiece)>>peutAvancerVersLeBas
[ :each | 
(aBlock value: each)
	ifFalse: [ ^ false ] ] in OrderedCollection(Collection)>>allSatisfy:
OrderedCollection>>do:
OrderedCollection(Collection)>>allSatisfy:
TsBarre(TsPiece)>>peutAvancerVersLeBas
[ terrain peutAccepterUneNouvellePiece ] in TsTetris>>jouer
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
NonBooleanReceiver: proceed for truth.
17 February 2015 9:52:28.531054 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

TsCarre(Object)>>mustBeBooleanIn:
	Receiver: a TsCarre
	Arguments and temporary variables: 
		context: 	[ :each | 
(aBlock value: each)
	ifFalse: [ ^ false ] ] in OrderedColl...etc...
		proceedValue: 	nil
	Receiver's instance variables: 
		couleur: 	Color blue
		position: 	(1@1)
		terrain: 	a TsTerrain


TsCarre(Object)>>mustBeBoolean
	Receiver: a TsCarre
	Arguments and temporary variables: 

	Receiver's instance variables: 
		couleur: 	Color blue
		position: 	(1@1)
		terrain: 	a TsTerrain


[ :each | 
(aBlock value: each)
	ifFalse: [ ^ false ] ] in OrderedCollection(Collection)>>allSatisfy:
	Receiver: an OrderedCollection(a TsCarre a TsCarre a TsCarre a TsCarre)
	Arguments and temporary variables: 
		aBlock: 	[ :unCarre | unCarre peutAvancerVersLeBas ]
		each: 	a TsCarre
	Receiver's instance variables: 
		array: 	an Array(a TsCarre a TsCarre a TsCarre a TsCarre nil nil nil nil nil nil...etc...
		firstIndex: 	1
		lastIndex: 	4


OrderedCollection>>do:
	Receiver: an OrderedCollection(a TsCarre a TsCarre a TsCarre a TsCarre)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifFalse: [ ^ false ] ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a TsCarre a TsCarre a TsCarre a TsCarre nil nil nil nil nil nil...etc...
		firstIndex: 	1
		lastIndex: 	4


OrderedCollection(Collection)>>allSatisfy:
	Receiver: an OrderedCollection(a TsCarre a TsCarre a TsCarre a TsCarre)
	Arguments and temporary variables: 
		aBlock: 	[ :unCarre | unCarre peutAvancerVersLeBas ]
	Receiver's instance variables: 
		array: 	an Array(a TsCarre a TsCarre a TsCarre a TsCarre nil nil nil nil nil nil...etc...
		firstIndex: 	1
		lastIndex: 	4


TsBarre(TsPiece)>>peutAvancerVersLeBas
	Receiver: a TsBarre
	Arguments and temporary variables: 

	Receiver's instance variables: 
		couleur: 	Color blue
		carres: 	an OrderedCollection(a TsCarre a TsCarre a TsCarre a TsCarre)


[ terrain peutAccepterUneNouvellePiece ] in TsTetris>>jouer
	Receiver: a TsTetris
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a MaContainerMorph(1059848192)
		terrain: 	a TsTerrain
		pieceCourante: 	a TsBarre
		affichage: 	a TsAfficheurTerrain


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ terrain peutAccepterUneNouvellePiece ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	TsTetris>>jouer
		startpc: 	57
		numArgs: 	0



--- The full stack ---
TsCarre(Object)>>mustBeBooleanIn:
TsCarre(Object)>>mustBeBoolean
[ :each | 
(aBlock value: each)
	ifFalse: [ ^ false ] ] in OrderedCollection(Collection)>>allSatisfy:
OrderedCollection>>do:
OrderedCollection(Collection)>>allSatisfy:
TsBarre(TsPiece)>>peutAvancerVersLeBas
[ terrain peutAccepterUneNouvellePiece ] in TsTetris>>jouer
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: 1st subscript out of range
17 February 2015 9:53:00.050235 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

Matrix(Object)>>error:
	Receiver: a Matrix(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil n...etc...
	Arguments and temporary variables: 
		aString: 	'1st subscript out of range'
	Receiver's instance variables: 
		nrows: 	10
		ncols: 	8
		contents: 	an Array(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ...etc...


Matrix>>indexForRow:andColumn:
	Receiver: a Matrix(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil n...etc...
	Arguments and temporary variables: 
		row: 	11
		column: 	1
	Receiver's instance variables: 
		nrows: 	10
		ncols: 	8
		contents: 	an Array(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ...etc...


Matrix>>at:at:
	Receiver: a Matrix(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil n...etc...
	Arguments and temporary variables: 
		row: 	11
		column: 	1
	Receiver's instance variables: 
		nrows: 	10
		ncols: 	8
		contents: 	an Array(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ...etc...


TsTerrain>>estLibreEn:
	Receiver: a TsTerrain
	Arguments and temporary variables: 
		unPoint: 	(1@11)
	Receiver's instance variables: 
		cases: 	a Matrix(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...
		afficheur: 	a TsAfficheurTerrain


TsCarre>>peutAvancerVersLeBas
	Receiver: a TsCarre
	Arguments and temporary variables: 

	Receiver's instance variables: 
		couleur: 	Color red
		position: 	(1@10)
		terrain: 	a TsTerrain


[ :unCarre | unCarre peutAvancerVersLeBas ] in TsBarre(TsPiece)>>peutAvancerVersLeBas
	Receiver: a TsBarre
	Arguments and temporary variables: 
		unCarre: 	a TsCarre
	Receiver's instance variables: 
		couleur: 	Color red
		carres: 	an OrderedCollection(a TsCarre)


[ :each | 
(aBlock value: each)
	ifFalse: [ ^ false ] ] in OrderedCollection(Collection)>>allSatisfy:
	Receiver: an OrderedCollection(a TsCarre)
	Arguments and temporary variables: 
		aBlock: 	[ :unCarre | unCarre peutAvancerVersLeBas ]
		each: 	a TsCarre
	Receiver's instance variables: 
		array: 	an Array(a TsCarre nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	1


OrderedCollection>>do:
	Receiver: an OrderedCollection(a TsCarre)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifFalse: [ ^ false ] ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a TsCarre nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	1


OrderedCollection(Collection)>>allSatisfy:
	Receiver: an OrderedCollection(a TsCarre)
	Arguments and temporary variables: 
		aBlock: 	[ :unCarre | unCarre peutAvancerVersLeBas ]
	Receiver's instance variables: 
		array: 	an Array(a TsCarre nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	1


TsBarre(TsPiece)>>peutAvancerVersLeBas
	Receiver: a TsBarre
	Arguments and temporary variables: 

	Receiver's instance variables: 
		couleur: 	Color red
		carres: 	an OrderedCollection(a TsCarre)


[ terrain peutAccepterUneNouvellePiece ] in TsTetris>>jouer
	Receiver: a TsTetris
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a MaContainerMorph(1059848192)
		terrain: 	a TsTerrain
		pieceCourante: 	a TsBarre
		affichage: 	a TsAfficheurTerrain


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ terrain peutAccepterUneNouvellePiece ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	TsTetris>>jouer
		startpc: 	57
		numArgs: 	0



--- The full stack ---
Matrix(Object)>>error:
Matrix>>indexForRow:andColumn:
Matrix>>at:at:
TsTerrain>>estLibreEn:
TsCarre>>peutAvancerVersLeBas
[ :unCarre | unCarre peutAvancerVersLeBas ] in TsBarre(TsPiece)>>peutAvancerVersLeBas
[ :each | 
(aBlock value: each)
	ifFalse: [ ^ false ] ] in OrderedCollection(Collection)>>allSatisfy:
OrderedCollection>>do:
OrderedCollection(Collection)>>allSatisfy:
TsBarre(TsPiece)>>peutAvancerVersLeBas
[ terrain peutAccepterUneNouvellePiece ] in TsTetris>>jouer
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Matrix>>boundingBox
17 February 2015 9:53:42.555037 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

Matrix(Object)>>doesNotUnderstand: #boundingBox
	Receiver: a Matrix(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil n...etc...
	Arguments and temporary variables: 
		aMessage: 	boundingBox
		exception: 	MessageNotUnderstood: Matrix>>boundingBox
		resumeValue: 	nil
	Receiver's instance variables: 
		nrows: 	10
		ncols: 	8
		contents: 	an Array(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ...etc...


TsTerrain>>DoItIn:
	Receiver: a TsTerrain
	Arguments and temporary variables: 
		ThisContext: 	TsTerrain>>estLibreEn:
	Receiver's instance variables: 
		cases: 	a Matrix(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...
		afficheur: 	a TsAfficheurTerrain


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'cases boundingBox'
		itsSelection: 	a Text for 'cases boundingBox'
		itsSelectionString: 	'cases boundingBox'
	Receiver's instance variables: 
		ast: 	DoItIn: ThisContext
	^ cases boundingBox
		source: 	a ReadStream
		context: 	TsTerrain>>estLibreEn:
		receiver: 	a TsTerrain
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
printString := [ result printString ]
	on: Error
	do: [ '<...etc...
		result: 	nil
		rcvr: 	a TsTerrain
		ctxt: 	TsTerrain>>estLibreEn:
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(987758592)
		selectionShowing: 	true
		model: 	a MorphicTextAdapter
		editingState: 	a SmalltalkEditingState


[ 
(oldEditor := textMorph editor)
	evaluateSelectionAndDo: [ :result | 
		printString := [ result printString ]
			on: Error
			do: [ '<error in printString: try ''Inspect it'' to debug>' ].
		selectionInterval := oldEditor selectionInterval.
		textMorph installEditorToReplace: oldEditor.
		textMorph handleEdit: [ oldEditor afterSelectionInsertAndSelect: printString ].
		selectionInterval := oldEditor selectionInterval.
		textMorph editor selectFrom: selectionInterval first to: selectionInterval last.
		self scrollSelectionIntoView ] ] in PluggableTextMorph>>printIt
	Receiver: a PluggableTextMorph(387186688)
	Arguments and temporary variables: 
		oldEditor: 	a SmalltalkEditor
		printString: 	nil
	Receiver's instance variables: 
		bounds: 	(339.0@347.0) corner: (1289.0@657.0)
		owner: 	a PanelMorph(995098624)
		submorphs: 	an Array(a TransformMorph(748158976))
		fullBounds: 	(339@347) corner: (1289@657)
		color: 	Color white
		extension: 	a MorphExtension (135528448) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color transparent
		model: 	a MorphicTextAdapter
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(414973952)
		scroller: 	a TransformMorph(748158976)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(150208512)
		textMorph: 	a TextMorphForEditView(987758592)
		getTextSelector: 	#getText
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#readSelection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(22 to: 38)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	false
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	#setSelection:


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(987758592)
	Arguments and temporary variables: 
		editBlock: 	[ 
(oldEditor := textMorph editor)
	evaluateSelectionAndDo: [ :resul...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (944@50)
		owner: 	a TransformMorph(748158976)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (944@50)
		color: 	Color black
		extension: 	a MorphExtension (1042546688) [other:  (kmDispatcher -> a KMDispatch...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'estLibreEn: unPoint
	cases boundingBox
	^(cases at: unPoint y...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(387186688)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>printIt
	Receiver: a PluggableTextMorph(387186688)
	Arguments and temporary variables: 
		oldEditor: 	a SmalltalkEditor
		printString: 	nil
	Receiver's instance variables: 
		bounds: 	(339.0@347.0) corner: (1289.0@657.0)
		owner: 	a PanelMorph(995098624)
		submorphs: 	an Array(a TransformMorph(748158976))
		fullBounds: 	(339@347) corner: (1289@657)
		color: 	Color white
		extension: 	a MorphExtension (135528448) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color transparent
		model: 	a MorphicTextAdapter
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(414973952)
		scroller: 	a TransformMorph(748158976)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(150208512)
		textMorph: 	a TextMorphForEditView(987758592)
		getTextSelector: 	#getText
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#readSelection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(22 to: 38)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	false
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	#setSelection:


[ :morph | morph printIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: SmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		morph: 	a PluggableTextMorph(387186688)
	Receiver's instance variables: 
		superclass: 	TextEditor
		methodDict: 	a MethodDictionary(#argAdvance:->SmalltalkEditor>>#argAdvance: #bro...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SmalltalkEditor
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Text-Edition'
		traitComposition: 	{}
		localSelectors: 	nil
		cmdActions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop...etc...
		shiftCmdActions: 	#(#noop: #argAdvance: #noop: #compareToClipboard: #debugIt: #m...etc...


BlockClosure>>cull:
	Receiver: [ :morph | morph printIt ]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(387186688)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	277
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :morph | morph printIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(387186688)
		secondArg: 	a PluggableTextMorph(387186688)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	277
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [ :morph | morph printIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(387186688)
		secondArg: 	a PluggableTextMorph(387186688)
		thirdArg: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	277
		numArgs: 	1


KMCategoryBinding>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#printIt on Cmd + P do [ :morph | morph printIt ]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(387186688)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(387186688)


[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #printIt on Cmd + P do [ :morph | morph printIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		l: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		action: 	[ :morph | morph printIt ]
		name: 	#printIt
		shortcut: 	Cmd + P
		defaultShortcut: 	Cmd + P
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[ :l | l completeMatch: self buffer: aBuffer ]
		index: 	1
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #printIt on Cmd + P do [ :morph | morph printIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[ :morph | morph printIt ]
		name: 	#printIt
		shortcut: 	Cmd + P
		defaultShortcut: 	Cmd + P
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #printIt on Cmd + P do [ :morph | morph printIt ]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		action: 	[ :morph | morph printIt ]
		name: 	#printIt
		shortcut: 	Cmd + P
		defaultShortcut: 	Cmd + P
		description: 	''


[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
		entry: 	#printIt on Cmd + P do [ :morph | morph printIt ]

	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


Set>>do:
	Receiver: a Set(#inspectIt on Cmd + I do [ :morph | morph inspectIt ]
 #sendersOfIt on Cmd + N do [ ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andD...etc...
		index: 	5
		each: 	#printIt on Cmd + P do [ :morph | morph printIt ]

	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(#inspectIt on Cmd + I do [ :morph | morph inspectIt ]
 #senders...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		aListener: 	a KMDispatcher
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(387186688)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(387186688)


[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#SmalltalkEdito...etc...
		morph: 	a PluggableTextMorph(387186688)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCategoryTarg...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyM...etc...
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCatego...etc...
		firstIndex: 	1
		lastIndex: 	7


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#SmalltalkEdito...etc...
		morph: 	a PluggableTextMorph(387186688)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a PluggableTextMorph(387186688)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
		targetToDispatch: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>do:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aBlock: 	[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstan...etc...
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-p>']
		chain: 	a KMDispatchChain
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a TextMorphForEditView(987758592)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(987758592)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (944@50)
		owner: 	a TransformMorph(748158976)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (944@50)
		color: 	Color black
		extension: 	a MorphExtension (1042546688) [other:  (kmDispatcher -> a KMDispatch...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'estLibreEn: unPoint
	cases boundingBox
	^(cases at: unPoint y...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(387186688)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(987758592)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (944@50)
		owner: 	a TransformMorph(748158976)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (944@50)
		color: 	Color black
		extension: 	a MorphExtension (1042546688) [other:  (kmDispatcher -> a KMDispatch...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'estLibreEn: unPoint
	cases boundingBox
	^(cases at: unPoint y...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(387186688)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-p>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(987758592)
	Receiver's instance variables: 
		timeStamp: 	2431982
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	(183.0@27.0)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	112
		scanCode: 	35


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(987758592)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (944@50)
		owner: 	a TransformMorph(748158976)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (944@50)
		color: 	Color black
		extension: 	a MorphExtension (1042546688) [other:  (kmDispatcher -> a KMDispatch...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'estLibreEn: unPoint
	cases boundingBox
	^(cases at: unPoint y...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(387186688)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(987758592)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (944@50)
		owner: 	a TransformMorph(748158976)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (944@50)
		color: 	Color black
		extension: 	a MorphExtension (1042546688) [other:  (kmDispatcher -> a KMDispatch...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'estLibreEn: unPoint
	cases boundingBox
	^(cases at: unPoint y...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(387186688)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(987758592)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(517@365.0) corner: (533@381.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(517@365.0) corner: (533@381.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(987758592)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(525@374) mouseOver nil nil]
		targetOffset: 	(20.0@27.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2431237 525 374 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@814)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(709099520) a SystemW...etc...
		fullBounds: 	(0@0) corner: (1440@814)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(987758592)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(517@365.0) corner: (533@381.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(517@365.0) corner: (533@381.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(987758592)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(525@374) mouseOver nil nil]
		targetOffset: 	(20.0@27.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2431237 525 374 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(987758592)
		aBlock: 	[ self keyboardFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(517@365.0) corner: (533@381.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(517@365.0) corner: (533@381.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(987758592)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(525@374) mouseOver nil nil]
		targetOffset: 	(20.0@27.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2431237 525 374 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	(517@365.0) corner: (533@381.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(517@365.0) corner: (533@381.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(987758592)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(525@374) mouseOver nil nil]
		targetOffset: 	(20.0@27.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2431237 525 374 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8



--- The full stack ---
Matrix(Object)>>doesNotUnderstand: #boundingBox
TsTerrain>>DoItIn:
OpalCompiler>>evaluate
SmalltalkEditor>>evaluateSelectionAndDo:
[ 
(oldEditor := textMorph editor)
	evaluateSelectionAndDo: [ :result | 
		printString := [ result printString ]
			on: Error
			do: [ '<error in printString: try ''Inspect it'' to debug>' ].
		selectionInterval := oldEditor selectionInterval.
		textMorph installEditorToReplace: oldEditor.
		textMorph handleEdit: [ oldEditor afterSelectionInsertAndSelect: printString ].
		selectionInterval := oldEditor selectionInterval.
		textMorph editor selectFrom: selectionInterval first to: selectionInterval last.
		self scrollSelectionIntoView ] ] in PluggableTextMorph>>printIt
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>printIt
[ :morph | morph printIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: TsAfficheurTerrain>>jeu:
17 February 2015 10:15:24.574224 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

TsAfficheurTerrain(Object)>>doesNotUnderstand: #jeu:
	Receiver: a TsAfficheurTerrain
	Arguments and temporary variables: 
		aMessage: 	jeu: a TsTetris
		exception: 	MessageNotUnderstood: TsAfficheurTerrain>>jeu:
		resumeValue: 	nil
	Receiver's instance variables: 
		scribbleMorph: 	a MaScribbleMorph(985923584)
		changedPort: 	a ChaPort


TsTetris>>initialize
	Receiver: a TsTetris
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a MaContainerMorph(120586240)
		terrain: 	a TsTerrain
		pieceCourante: 	nil
		affichage: 	a TsAfficheurTerrain


TsTetris class(Behavior)>>new
	Receiver: TsTetris
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	MaComposite
		methodDict: 	a MethodDictionary(#hauteurTerrainParDefaut->TsTetris>>#hauteurTerr...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	#(#terrain #pieceCourante #affichage)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#TsTetris
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Tetris
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'tetris := TsTetris new.'
		itsSelection: 	a Text for 'tetris := TsTetris new.'
		itsSelectionString: 	'tetris := TsTetris new.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ tetris := TsTetris new
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(794034176)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(794034176)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[ textMorph editor evaluateSelection ] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(1007681536)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(319.0@543.0) corner: (759.0@710.0)
		owner: 	a SystemWindow(899678208)
		submorphs: 	an Array(a TransformMorph(946077696))
		fullBounds: 	(319@543) corner: (759@710)
		color: 	Color white
		extension: 	a MorphExtension (772800512) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1047527424)
		scroller: 	a TransformMorph(946077696)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(963641344)
		textMorph: 	a TextMorphForEditView(794034176)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(24 to: 23)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


[ result := editBlock value ] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(1007681536)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph editor evaluateSelection ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(319.0@543.0) corner: (759.0@710.0)
		owner: 	a SystemWindow(899678208)
		submorphs: 	an Array(a TransformMorph(946077696))
		fullBounds: 	(319@543) corner: (759@710)
		color: 	Color white
		extension: 	a MorphExtension (772800512) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1047527424)
		scroller: 	a TransformMorph(946077696)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(963641344)
		textMorph: 	a TextMorphForEditView(794034176)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(24 to: 23)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(794034176)
	Arguments and temporary variables: 
		editBlock: 	[ result := editBlock value ]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@98)
		owner: 	a TransformMorph(946077696)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@98)
		color: 	Color black
		extension: 	a MorphExtension (854851584) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'tetris := TsTetris new.
tetris start.
tetris nouvellePartie.
...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(1007681536)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(1007681536)
	Arguments and temporary variables: 
		result: 	nil
		editBlock: 	[ textMorph editor evaluateSelection ]
	Receiver's instance variables: 
		bounds: 	(319.0@543.0) corner: (759.0@710.0)
		owner: 	a SystemWindow(899678208)
		submorphs: 	an Array(a TransformMorph(946077696))
		fullBounds: 	(319@543) corner: (759@710)
		color: 	Color white
		extension: 	a MorphExtension (772800512) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1047527424)
		scroller: 	a TransformMorph(946077696)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(963641344)
		textMorph: 	a TextMorphForEditView(794034176)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(24 to: 23)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(1007681536)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(319.0@543.0) corner: (759.0@710.0)
		owner: 	a SystemWindow(899678208)
		submorphs: 	an Array(a TransformMorph(946077696))
		fullBounds: 	(319@543) corner: (759@710)
		color: 	Color white
		extension: 	a MorphExtension (772800512) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1047527424)
		scroller: 	a TransformMorph(946077696)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(963641344)
		textMorph: 	a TextMorphForEditView(794034176)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(24 to: 23)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


[ :morph | morph doIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: SmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		morph: 	a PluggableTextMorph(1007681536)
	Receiver's instance variables: 
		superclass: 	TextEditor
		methodDict: 	a MethodDictionary(#argAdvance:->SmalltalkEditor>>#argAdvance: #bro...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SmalltalkEditor
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Text-Edition'
		traitComposition: 	{}
		localSelectors: 	nil
		cmdActions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop...etc...
		shiftCmdActions: 	#(#noop: #argAdvance: #noop: #compareToClipboard: #debugIt: #m...etc...


BlockClosure>>cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(1007681536)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	157
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(1007681536)
		secondArg: 	a PluggableTextMorph(1007681536)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	157
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(1007681536)
		secondArg: 	a PluggableTextMorph(1007681536)
		thirdArg: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	157
		numArgs: 	1


KMCategoryBinding>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#doIt on Cmd + D do [ :morph | morph doIt ]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(1007681536)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(1007681536)


[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Cmd + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		l: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[ :l | l completeMatch: self buffer: aBuffer ]
		index: 	1
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Cmd + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #doIt on Cmd + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
		entry: 	#doIt on Cmd + D do [ :morph | morph doIt ]

	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


Set>>do:
	Receiver: a Set(#inspectIt on Cmd + I do [ :morph | morph inspectIt ]
 #sendersOfIt on Cmd + N do [ ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andD...etc...
		index: 	9
		each: 	#doIt on Cmd + D do [ :morph | morph doIt ]

	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(#inspectIt on Cmd + I do [ :morph | morph inspectIt ]
 #senders...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aListener: 	a KMDispatcher
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(1007681536)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(1007681536)


[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextMorphTab) aKMCategoryTarget(#SmalltalkEdi...etc...
		morph: 	a PluggableTextMorph(1007681536)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#TextMorphTab) aKMCategoryTa...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyM...etc...
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#TextMorphTab) aKMCate...etc...
		firstIndex: 	1
		lastIndex: 	7


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextMorphTab) aKMCategoryTarget(#SmalltalkEdi...etc...
		morph: 	a PluggableTextMorph(1007681536)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a PluggableTextMorph(1007681536)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		targetToDispatch: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>do:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aBlock: 	[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstan...etc...
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
		chain: 	a KMDispatchChain
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a TextMorphForEditView(794034176)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(794034176)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@98)
		owner: 	a TransformMorph(946077696)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@98)
		color: 	Color black
		extension: 	a MorphExtension (854851584) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'tetris := TsTetris new.
tetris start.
tetris nouvellePartie.
...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(1007681536)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(794034176)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@98)
		owner: 	a TransformMorph(946077696)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@98)
		color: 	Color black
		extension: 	a MorphExtension (854851584) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'tetris := TsTetris new.
tetris start.
tetris nouvellePartie.
...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(1007681536)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-d>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(794034176)
	Receiver's instance variables: 
		timeStamp: 	3734020
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	(150.0@7.0)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	100
		charCode: 	100
		scanCode: 	2


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(794034176)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@98)
		owner: 	a TransformMorph(946077696)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@98)
		color: 	Color black
		extension: 	a MorphExtension (854851584) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'tetris := TsTetris new.
tetris start.
tetris nouvellePartie.
...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(1007681536)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(794034176)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@98)
		owner: 	a TransformMorph(946077696)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@98)
		color: 	Color black
		extension: 	a MorphExtension (854851584) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'tetris := TsTetris new.
tetris start.
tetris nouvellePartie.
...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(1007681536)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(794034176)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(465@542.0) corner: (481@558.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(465@542.0) corner: (481@558.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(794034176)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(473@551) mouseOver nil nil]
		targetOffset: 	(150.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3732999 473 551 0 0 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8



--- The full stack ---
TsAfficheurTerrain(Object)>>doesNotUnderstand: #jeu:
TsTetris>>initialize
TsTetris class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[ textMorph editor evaluateSelection ] in PluggableTextMorph>>doIt
[ result := editBlock value ] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
[ :morph | morph doIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: TsBarre>>avancerVerLaGauche
17 February 2015 10:15:48.534612 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

TsBarre(Object)>>doesNotUnderstand: #avancerVerLaGauche
	Receiver: a TsBarre
	Arguments and temporary variables: 
		aMessage: 	avancerVerLaGauche
		exception: 	MessageNotUnderstood: TsBarre>>avancerVerLaGauche
		resumeValue: 	nil
	Receiver's instance variables: 
		couleur: 	Color yellow
		carres: 	an OrderedCollection(a TsCarre)


[ self pieceCourante avancerVerLaGauche ] in TsTetris>>initialize
	Receiver: a TsTetris
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a MaContainerMorph(982253568)
		terrain: 	a TsTerrain
		pieceCourante: 	a TsBarre
		affichage: 	a TsAfficheurTerrain


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(995@443) mouseDown red 3757928 nil]
		sourceMorph: 	a MaContainerMorph(982253568)
		arity: 	0
	Receiver's instance variables: 
		event: 	#mouseDown
		selector: 	#value
		recipient: 	[ self pieceCourante avancerVerLaGauche ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(995@443) mouseDown red 3757928 nil]
		eventType: 	#mouseDown
		sourceMorph: 	a MaContainerMorph(982253568)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseDown->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	5
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil nil a MorphEventSubscription)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(995@443) mouseDown red 3757928 nil]
		eventType: 	#mouseDown
		sourceMorph: 	a MaContainerMorph(982253568)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseDown->a Set(a MorphEventSubscription) )


MorphicEventHandler>>mouseDown:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(995@443) mouseDown red 3757928 nil]
		sourceMorph: 	a MaContainerMorph(982253568)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseDown->a Set(a MorphEventSubscription) )


MaContainerMorph(Morph)>>mouseDown:
	Receiver: a MaContainerMorph(982253568)
	Arguments and temporary variables: 
		evt: 	[(995@443) mouseDown red 3757928 nil]
	Receiver's instance variables: 
		bounds: 	(818.0@169.0) corner: (1218.0@669.0)
		owner: 	a MaWrapperMorph(623640576)
		submorphs: 	an Array(a MaScribbleMorph(713555968))
		fullBounds: 	(818.0@169.0) corner: (1218.0@669.0)
		color: 	Color transparent
		extension: 	a MorphExtension (1007157248) [eventHandler = a MorphicEventHandler]...etc...


MaContainerMorph(Morph)>>handleMouseDown:
	Receiver: a MaContainerMorph(982253568)
	Arguments and temporary variables: 
		anEvent: 	[(995@443) mouseDown red 3757928 nil]
	Receiver's instance variables: 
		bounds: 	(818.0@169.0) corner: (1218.0@669.0)
		owner: 	a MaWrapperMorph(623640576)
		submorphs: 	an Array(a MaScribbleMorph(713555968))
		fullBounds: 	(818.0@169.0) corner: (1218.0@669.0)
		color: 	Color transparent
		extension: 	a MorphExtension (1007157248) [eventHandler = a MorphicEventHandler]...etc...


MouseButtonEvent>>sentTo:
	Receiver: [(995@443) mouseDown red 3757928 nil]
	Arguments and temporary variables: 
		anObject: 	a MaContainerMorph(982253568)
	Receiver's instance variables: 
		timeStamp: 	3757928
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	4
		position: 	(995@443)
		handler: 	a MaContainerMorph(982253568)
		wasHandled: 	true
		whichButton: 	4


MaContainerMorph(Morph)>>handleEvent:
	Receiver: a MaContainerMorph(982253568)
	Arguments and temporary variables: 
		anEvent: 	[(995@443) mouseDown red 3757928 nil]
	Receiver's instance variables: 
		bounds: 	(818.0@169.0) corner: (1218.0@669.0)
		owner: 	a MaWrapperMorph(623640576)
		submorphs: 	an Array(a MaScribbleMorph(713555968))
		fullBounds: 	(818.0@169.0) corner: (1218.0@669.0)
		color: 	Color transparent
		extension: 	a MorphExtension (1007157248) [eventHandler = a MorphicEventHandler]...etc...


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(995@443) mouseDown red 3757928 nil]
		aMorph: 	a MaContainerMorph(982253568)
		globalPt: 	(995@443)
		localEvt: 	[(995@443) mouseDown red 3757928 nil]
		index: 	2
		child: 	a MaScribbleMorph(713555968)
		morphs: 	an Array(a MaScribbleMorph(713555968))
		handler: 	a MaContainerMorph(982253568)
		inside: 	false
		lastHandler: 	a SystemWindow(636747776)
	Receiver's instance variables: 
		lastType: 	#mouseDown
		lastDispatch: 	#dispatchMouseDown:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(995@443) mouseDown red 3757928 nil]
		aMorph: 	a MaContainerMorph(982253568)
	Receiver's instance variables: 
		lastType: 	#mouseDown
		lastDispatch: 	#dispatchMouseDown:with:


MaContainerMorph(Morph)>>processEvent:using:
	Receiver: a MaContainerMorph(982253568)
	Arguments and temporary variables: 
		anEvent: 	[(995@443) mouseDown red 3757928 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(818.0@169.0) corner: (1218.0@669.0)
		owner: 	a MaWrapperMorph(623640576)
		submorphs: 	an Array(a MaScribbleMorph(713555968))
		fullBounds: 	(818.0@169.0) corner: (1218.0@669.0)
		color: 	Color transparent
		extension: 	a MorphExtension (1007157248) [eventHandler = a MorphicEventHandler]...etc...


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(995@443) mouseDown red 3757928 nil]
		aMorph: 	a MaWrapperMorph(623640576)
		globalPt: 	(995@443)
		localEvt: 	[(995@443) mouseDown red 3757928 nil]
		index: 	1
		child: 	a MaContainerMorph(982253568)
		morphs: 	an Array(a MaContainerMorph(982253568))
		handler: 	nil
		inside: 	nil
		lastHandler: 	a SystemWindow(636747776)
	Receiver's instance variables: 
		lastType: 	#mouseDown
		lastDispatch: 	#dispatchMouseDown:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(995@443) mouseDown red 3757928 nil]
		aMorph: 	a MaWrapperMorph(623640576)
	Receiver's instance variables: 
		lastType: 	#mouseDown
		lastDispatch: 	#dispatchMouseDown:with:


MaWrapperMorph(Morph)>>processEvent:using:
	Receiver: a MaWrapperMorph(623640576)
	Arguments and temporary variables: 
		anEvent: 	[(995@443) mouseDown red 3757928 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(818.0@169.0) corner: (1218.0@669.0)
		owner: 	a SystemWindow(636747776)
		submorphs: 	an Array(a MaContainerMorph(982253568))
		fullBounds: 	(818.0@169.0) corner: (1218.0@669.0)
		color: 	Color white
		extension: 	a MorphExtension (182714368)
		app: 	a MaMorphicWindowApp


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(995@443) mouseDown red 3757928 nil]
		aMorph: 	a SystemWindow(636747776)
		globalPt: 	(995@443)
		localEvt: 	[(995@443) mouseDown red 3757928 nil]
		index: 	2
		child: 	a MaWrapperMorph(623640576)
		morphs: 	an Array(an AlignmentMorph(718536704) a MaWrapperMorph(623640576))
		handler: 	nil
		inside: 	nil
		lastHandler: 	a SystemWindow(636747776)
	Receiver's instance variables: 
		lastType: 	#mouseDown
		lastDispatch: 	#dispatchMouseDown:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(995@443) mouseDown red 3757928 nil]
		aMorph: 	a SystemWindow(636747776)
	Receiver's instance variables: 
		lastType: 	#mouseDown
		lastDispatch: 	#dispatchMouseDown:with:


SystemWindow(Morph)>>processEvent:using:
	Receiver: a SystemWindow(636747776)
	Arguments and temporary variables: 
		anEvent: 	[(995@443) mouseDown red 3757928 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(813.0@141.0) corner: (1223.0@674.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	an Array(an AlignmentMorph(718536704) a MaWrapperMorph(623640576))
		fullBounds: 	(813@141) corner: (1223@674)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (799801344) [other:  (paneColor -> (Color r: 0.8230...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray
		model: 	nil
		open: 	false
		accessor: 	nil
		labelString: 	'Tetris Mines Douai'
		stripes: 	an Array(a Morph(679739392) a Morph(691535872))
		label: 	a LabelMorph(911212544)'Tetris Mines Douai'
		closeBox: 	a MultistateButtonMorph(932446208)
		collapseBox: 	a MultistateButtonMorph(472645632)
		activeOnlyOnTop: 	true
		paneMorphs: 	an Array(a MaWrapperMorph(623640576))
		collapsedFrame: 	nil
		fullFrame: 	(813.0@141.0) corner: (1223.0@674.0)
		isCollapsed: 	false
		menuBox: 	a MultistateButtonMorph(166985728)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(718536704)
		expandBox: 	nil
		embeddable: 	nil
		announcer: 	an Announcer
		menuBuilder: 	nil
		isResizeable: 	true


SystemWindow(Morph)>>processEvent:
	Receiver: a SystemWindow(636747776)
	Arguments and temporary variables: 
		anEvent: 	[(995@443) mouseDown red 3757928 nil]
	Receiver's instance variables: 
		bounds: 	(813.0@141.0) corner: (1223.0@674.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	an Array(an AlignmentMorph(718536704) a MaWrapperMorph(623640576))
		fullBounds: 	(813@141) corner: (1223@674)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (799801344) [other:  (paneColor -> (Color r: 0.8230...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray
		model: 	nil
		open: 	false
		accessor: 	nil
		labelString: 	'Tetris Mines Douai'
		stripes: 	an Array(a Morph(679739392) a Morph(691535872))
		label: 	a LabelMorph(911212544)'Tetris Mines Douai'
		closeBox: 	a MultistateButtonMorph(932446208)
		collapseBox: 	a MultistateButtonMorph(472645632)
		activeOnlyOnTop: 	true
		paneMorphs: 	an Array(a MaWrapperMorph(623640576))
		collapsedFrame: 	nil
		fullFrame: 	(813.0@141.0) corner: (1223.0@674.0)
		isCollapsed: 	false
		menuBox: 	a MultistateButtonMorph(166985728)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(718536704)
		expandBox: 	nil
		embeddable: 	nil
		announcer: 	an Announcer
		menuBuilder: 	nil
		isResizeable: 	true


[ 
evt wasHandled: false.
self processEvent: evt ] in SystemWindow>>mouseDown:
	Receiver: a SystemWindow(636747776)
	Arguments and temporary variables: 
		evt: 	[(995@443) mouseDown red 3757928 nil]
	Receiver's instance variables: 
		bounds: 	(813.0@141.0) corner: (1223.0@674.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	an Array(an AlignmentMorph(718536704) a MaWrapperMorph(623640576))
		fullBounds: 	(813@141) corner: (1223@674)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (799801344) [other:  (paneColor -> (Color r: 0.8230...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray
		model: 	nil
		open: 	false
		accessor: 	nil
		labelString: 	'Tetris Mines Douai'
		stripes: 	an Array(a Morph(679739392) a Morph(691535872))
		label: 	a LabelMorph(911212544)'Tetris Mines Douai'
		closeBox: 	a MultistateButtonMorph(932446208)
		collapseBox: 	a MultistateButtonMorph(472645632)
		activeOnlyOnTop: 	true
		paneMorphs: 	an Array(a MaWrapperMorph(623640576))
		collapsedFrame: 	nil
		fullFrame: 	(813.0@141.0) corner: (1223.0@674.0)
		isCollapsed: 	false
		menuBox: 	a MultistateButtonMorph(166985728)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(718536704)
		expandBox: 	nil
		embeddable: 	nil
		announcer: 	an Announcer
		menuBuilder: 	nil
		isResizeable: 	true


BlockClosure>>ensure:
	Receiver: [ 
evt wasHandled: false.
self processEvent: evt ]
	Arguments and temporary variables: 
		aBlock: 	[ self setProperty: #processingMouseDown toValue: false ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	SystemWindow>>mouseDown:
		startpc: 	192
		numArgs: 	0


SystemWindow>>mouseDown:
	Receiver: a SystemWindow(636747776)
	Arguments and temporary variables: 
		evt: 	[(995@443) mouseDown red 3757928 nil]
	Receiver's instance variables: 
		bounds: 	(813.0@141.0) corner: (1223.0@674.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	an Array(an AlignmentMorph(718536704) a MaWrapperMorph(623640576))
		fullBounds: 	(813@141) corner: (1223@674)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (799801344) [other:  (paneColor -> (Color r: 0.8230...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray
		model: 	nil
		open: 	false
		accessor: 	nil
		labelString: 	'Tetris Mines Douai'
		stripes: 	an Array(a Morph(679739392) a Morph(691535872))
		label: 	a LabelMorph(911212544)'Tetris Mines Douai'
		closeBox: 	a MultistateButtonMorph(932446208)
		collapseBox: 	a MultistateButtonMorph(472645632)
		activeOnlyOnTop: 	true
		paneMorphs: 	an Array(a MaWrapperMorph(623640576))
		collapsedFrame: 	nil
		fullFrame: 	(813.0@141.0) corner: (1223.0@674.0)
		isCollapsed: 	false
		menuBox: 	a MultistateButtonMorph(166985728)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(718536704)
		expandBox: 	nil
		embeddable: 	nil
		announcer: 	an Announcer
		menuBuilder: 	nil
		isResizeable: 	true


SystemWindow(Morph)>>handleMouseDown:
	Receiver: a SystemWindow(636747776)
	Arguments and temporary variables: 
		anEvent: 	[(995@443) mouseDown red 3757928 nil]
	Receiver's instance variables: 
		bounds: 	(813.0@141.0) corner: (1223.0@674.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	an Array(an AlignmentMorph(718536704) a MaWrapperMorph(623640576))
		fullBounds: 	(813@141) corner: (1223@674)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (799801344) [other:  (paneColor -> (Color r: 0.8230...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray
		model: 	nil
		open: 	false
		accessor: 	nil
		labelString: 	'Tetris Mines Douai'
		stripes: 	an Array(a Morph(679739392) a Morph(691535872))
		label: 	a LabelMorph(911212544)'Tetris Mines Douai'
		closeBox: 	a MultistateButtonMorph(932446208)
		collapseBox: 	a MultistateButtonMorph(472645632)
		activeOnlyOnTop: 	true
		paneMorphs: 	an Array(a MaWrapperMorph(623640576))
		collapsedFrame: 	nil
		fullFrame: 	(813.0@141.0) corner: (1223.0@674.0)
		isCollapsed: 	false
		menuBox: 	a MultistateButtonMorph(166985728)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(718536704)
		expandBox: 	nil
		embeddable: 	nil
		announcer: 	an Announcer
		menuBuilder: 	nil
		isResizeable: 	true


MouseButtonEvent>>sentTo:
	Receiver: [(995@443) mouseDown red 3757928 nil]
	Arguments and temporary variables: 
		anObject: 	a SystemWindow(636747776)
	Receiver's instance variables: 
		timeStamp: 	3757928
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	4
		position: 	(995@443)
		handler: 	a SystemWindow(636747776)
		wasHandled: 	false
		whichButton: 	4


SystemWindow(Morph)>>handleEvent:
	Receiver: a SystemWindow(636747776)
	Arguments and temporary variables: 
		anEvent: 	[(995@443) mouseDown red 3757928 nil]
	Receiver's instance variables: 
		bounds: 	(813.0@141.0) corner: (1223.0@674.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	an Array(an AlignmentMorph(718536704) a MaWrapperMorph(623640576))
		fullBounds: 	(813@141) corner: (1223@674)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (799801344) [other:  (paneColor -> (Color r: 0.8230...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray
		model: 	nil
		open: 	false
		accessor: 	nil
		labelString: 	'Tetris Mines Douai'
		stripes: 	an Array(a Morph(679739392) a Morph(691535872))
		label: 	a LabelMorph(911212544)'Tetris Mines Douai'
		closeBox: 	a MultistateButtonMorph(932446208)
		collapseBox: 	a MultistateButtonMorph(472645632)
		activeOnlyOnTop: 	true
		paneMorphs: 	an Array(a MaWrapperMorph(623640576))
		collapsedFrame: 	nil
		fullFrame: 	(813.0@141.0) corner: (1223.0@674.0)
		isCollapsed: 	false
		menuBox: 	a MultistateButtonMorph(166985728)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(718536704)
		expandBox: 	nil
		embeddable: 	nil
		announcer: 	an Announcer
		menuBuilder: 	nil
		isResizeable: 	true


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(995@443) mouseDown red 3757928 nil]
		aMorph: 	a SystemWindow(636747776)
		globalPt: 	(995@443)
		localEvt: 	[(995@443) mouseDown red 3757928 nil]
		index: 	3
		child: 	a MaWrapperMorph(623640576)
		morphs: 	an Array(an AlignmentMorph(718536704) a MaWrapperMorph(623640576))
		handler: 	a SystemWindow(636747776)
		inside: 	nil
		lastHandler: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		lastType: 	#mouseDown
		lastDispatch: 	#dispatchMouseDown:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(995@443) mouseDown red 3757928 nil]
		aMorph: 	a SystemWindow(636747776)
	Receiver's instance variables: 
		lastType: 	#mouseDown
		lastDispatch: 	#dispatchMouseDown:with:


SystemWindow(Morph)>>processEvent:using:
	Receiver: a SystemWindow(636747776)
	Arguments and temporary variables: 
		anEvent: 	[(995@443) mouseDown red 3757928 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(813.0@141.0) corner: (1223.0@674.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	an Array(an AlignmentMorph(718536704) a MaWrapperMorph(623640576))
		fullBounds: 	(813@141) corner: (1223@674)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (799801344) [other:  (paneColor -> (Color r: 0.8230...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray
		model: 	nil
		open: 	false
		accessor: 	nil
		labelString: 	'Tetris Mines Douai'
		stripes: 	an Array(a Morph(679739392) a Morph(691535872))
		label: 	a LabelMorph(911212544)'Tetris Mines Douai'
		closeBox: 	a MultistateButtonMorph(932446208)
		collapseBox: 	a MultistateButtonMorph(472645632)
		activeOnlyOnTop: 	true
		paneMorphs: 	an Array(a MaWrapperMorph(623640576))
		collapsedFrame: 	nil
		fullFrame: 	(813.0@141.0) corner: (1223.0@674.0)
		isCollapsed: 	false
		menuBox: 	a MultistateButtonMorph(166985728)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(718536704)
		expandBox: 	nil
		embeddable: 	nil
		announcer: 	an Announcer
		menuBuilder: 	nil
		isResizeable: 	true


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(995@443) mouseDown red 3757928 nil]
		aMorph: 	a WorldMorph(511705088) [world]
		globalPt: 	(995@443)
		localEvt: 	[(995@443) mouseDown red 3757928 nil]
		index: 	3
		child: 	a SystemWindow(636747776)
		morphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(636747776) a SystemWi...etc...
		handler: 	a WorldMorph(511705088) [world]
		inside: 	nil
		lastHandler: 	nil
	Receiver's instance variables: 
		lastType: 	#mouseDown
		lastDispatch: 	#dispatchMouseDown:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(995@443) mouseDown red 3757928 nil]
		aMorph: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		lastType: 	#mouseDown
		lastDispatch: 	#dispatchMouseDown:with:


WorldMorph(Morph)>>processEvent:using:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		anEvent: 	[(995@443) mouseDown red 3757928 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@814)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(636747776) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph(Morph)>>processEvent:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		anEvent: 	[(995@443) mouseDown red 3757928 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@814)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(636747776) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(995@443) mouseDown red 3757928 nil]
		focusHolder: 	nil
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(995@443.0) corner: (1011@459.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a MaContainerMorph(982253568)
		keyboardFocus: 	a SystemWindow(636747776)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickDown]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(995@443) mouseOver red nil nil]
		targetOffset: 	(177.0@274.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3757928 995 443 4 0 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(995@443) mouseDown red 3757928 nil]
	Receiver's instance variables: 
		bounds: 	(995@443.0) corner: (1011@459.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a MaContainerMorph(982253568)
		keyboardFocus: 	a SystemWindow(636747776)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickDown]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(995@443) mouseOver red nil nil]
		targetOffset: 	(177.0@274.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3757928 995 443 4 0 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(995@443) mouseDown red 3757928 nil]
		evt: 	[(995@443) mouseDown red 3757928 nil]
	Receiver's instance variables: 
		bounds: 	(995@443.0) corner: (1011@459.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a MaContainerMorph(982253568)
		keyboardFocus: 	a SystemWindow(636747776)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickDown]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(995@443) mouseOver red nil nil]
		targetOffset: 	(177.0@274.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3757928 995 443 4 0 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[(995@443) mouseDown red 3757928 nil]
		evtBuf: 	#(1 3757928 995 443 4 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(995@443.0) corner: (1011@459.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a MaContainerMorph(982253568)
		keyboardFocus: 	a SystemWindow(636747776)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickDown]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(995@443) mouseOver red nil nil]
		targetOffset: 	(177.0@274.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3757928 995 443 4 0 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1440@814)
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(146276352))(a SearchMorp...etc...
		lastStepTime: 	3758010
		lastStepMessage: 	nil
		lastCycleTime: 	3758010
		alarms: 	a Heap()
		lastAlarmTime: 	3758010
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 



--- The full stack ---
TsBarre(Object)>>doesNotUnderstand: #avancerVerLaGauche
[ self pieceCourante avancerVerLaGauche ] in TsTetris>>initialize
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>mouseDown:fromMorph:
MaContainerMorph(Morph)>>mouseDown:
MaContainerMorph(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
MaContainerMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
MaContainerMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
MaWrapperMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
SystemWindow(Morph)>>processEvent:
[ 
evt wasHandled: false.
self processEvent: evt ] in SystemWindow>>mouseDown:
BlockClosure>>ensure:
SystemWindow>>mouseDown:
SystemWindow(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
SystemWindow(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: 2nd subscript out of range
17 February 2015 10:22:51.893173 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

Matrix(Object)>>error:
	Receiver: a Matrix(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil n...etc...
	Arguments and temporary variables: 
		aString: 	'2nd subscript out of range'
	Receiver's instance variables: 
		nrows: 	10
		ncols: 	8
		contents: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


Matrix>>indexForRow:andColumn:
	Receiver: a Matrix(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil n...etc...
	Arguments and temporary variables: 
		row: 	4
		column: 	0
	Receiver's instance variables: 
		nrows: 	10
		ncols: 	8
		contents: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


Matrix>>at:at:put:
	Receiver: a Matrix(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil n...etc...
	Arguments and temporary variables: 
		row: 	4
		column: 	0
		value: 	a TsCarre
	Receiver's instance variables: 
		nrows: 	10
		ncols: 	8
		contents: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


TsTerrain>>placer:
	Receiver: a TsTerrain
	Arguments and temporary variables: 
		unCarre: 	a TsCarre
		position: 	(0@4)
	Receiver's instance variables: 
		cases: 	a Matrix(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...
		afficheur: 	a TsAfficheurTerrain


TsCarre>>position:
	Receiver: a TsCarre
	Arguments and temporary variables: 
		unPoint: 	(0@4)
	Receiver's instance variables: 
		couleur: 	Color pink
		position: 	(0@4)
		terrain: 	a TsTerrain


[ :each | each position: each position - (1 @ 0) ] in TsBarre(TsPiece)>>avancerVersLaGauche
	Receiver: a TsBarre
	Arguments and temporary variables: 
		each: 	a TsCarre
	Receiver's instance variables: 
		couleur: 	Color pink
		carres: 	an OrderedCollection(a TsCarre)


OrderedCollection>>do:
	Receiver: an OrderedCollection(a TsCarre)
	Arguments and temporary variables: 
		aBlock: 	[ :each | each position: each position - (1 @ 0) ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a TsCarre nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	1


TsBarre(TsPiece)>>avancerVersLaGauche
	Receiver: a TsBarre
	Arguments and temporary variables: 

	Receiver's instance variables: 
		couleur: 	Color pink
		carres: 	an OrderedCollection(a TsCarre)


[ self pieceCourante avancerVersLaGauche ] in TsTetris>>initialize
	Receiver: a TsTetris
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a MaContainerMorph(761790464)
		terrain: 	a TsTerrain
		pieceCourante: 	a TsBarre
		affichage: 	a TsAfficheurTerrain
		process: 	a Process in [ delaySemaphore wait ] in Delay>>wait


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(878@226) mouseDown red 4181343 nil]
		sourceMorph: 	a MaContainerMorph(761790464)
		arity: 	0
	Receiver's instance variables: 
		event: 	#mouseDown
		selector: 	#value
		recipient: 	[ self pieceCourante avancerVersLaGauche ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(878@226) mouseDown red 4181343 nil]
		eventType: 	#mouseDown
		sourceMorph: 	a MaContainerMorph(761790464)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseDown->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	2
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil a MorphEventSubscription nil nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(878@226) mouseDown red 4181343 nil]
		eventType: 	#mouseDown
		sourceMorph: 	a MaContainerMorph(761790464)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseDown->a Set(a MorphEventSubscription) )


MorphicEventHandler>>mouseDown:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(878@226) mouseDown red 4181343 nil]
		sourceMorph: 	a MaContainerMorph(761790464)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseDown->a Set(a MorphEventSubscription) )


MaContainerMorph(Morph)>>mouseDown:
	Receiver: a MaContainerMorph(761790464)
	Arguments and temporary variables: 
		evt: 	[(878@226) mouseDown red 4181343 nil]
	Receiver's instance variables: 
		bounds: 	(613.0@164.0) corner: (1013.0@664.0)
		owner: 	a MaWrapperMorph(203423744)
		submorphs: 	an Array(a MaScribbleMorph(555483136))
		fullBounds: 	(613.0@164.0) corner: (1013.0@664.0)
		color: 	Color transparent
		extension: 	a MorphExtension (780664832) [eventHandler = a MorphicEventHandler] ...etc...


MaContainerMorph(Morph)>>handleMouseDown:
	Receiver: a MaContainerMorph(761790464)
	Arguments and temporary variables: 
		anEvent: 	[(878@226) mouseDown red 4181343 nil]
	Receiver's instance variables: 
		bounds: 	(613.0@164.0) corner: (1013.0@664.0)
		owner: 	a MaWrapperMorph(203423744)
		submorphs: 	an Array(a MaScribbleMorph(555483136))
		fullBounds: 	(613.0@164.0) corner: (1013.0@664.0)
		color: 	Color transparent
		extension: 	a MorphExtension (780664832) [eventHandler = a MorphicEventHandler] ...etc...


MouseButtonEvent>>sentTo:
	Receiver: [(878@226) mouseDown red 4181343 nil]
	Arguments and temporary variables: 
		anObject: 	a MaContainerMorph(761790464)
	Receiver's instance variables: 
		timeStamp: 	4181343
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	4
		position: 	(878@226)
		handler: 	a MaContainerMorph(761790464)
		wasHandled: 	true
		whichButton: 	4


MaContainerMorph(Morph)>>handleEvent:
	Receiver: a MaContainerMorph(761790464)
	Arguments and temporary variables: 
		anEvent: 	[(878@226) mouseDown red 4181343 nil]
	Receiver's instance variables: 
		bounds: 	(613.0@164.0) corner: (1013.0@664.0)
		owner: 	a MaWrapperMorph(203423744)
		submorphs: 	an Array(a MaScribbleMorph(555483136))
		fullBounds: 	(613.0@164.0) corner: (1013.0@664.0)
		color: 	Color transparent
		extension: 	a MorphExtension (780664832) [eventHandler = a MorphicEventHandler] ...etc...


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(878@226) mouseDown red 4181343 nil]
		aMorph: 	a MaContainerMorph(761790464)
		globalPt: 	(878@226)
		localEvt: 	[(878@226) mouseDown red 4181343 nil]
		index: 	2
		child: 	a MaScribbleMorph(555483136)
		morphs: 	an Array(a MaScribbleMorph(555483136))
		handler: 	a MaContainerMorph(761790464)
		inside: 	false
		lastHandler: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		lastType: 	#mouseDown
		lastDispatch: 	#dispatchMouseDown:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(878@226) mouseDown red 4181343 nil]
		aMorph: 	a MaContainerMorph(761790464)
	Receiver's instance variables: 
		lastType: 	#mouseDown
		lastDispatch: 	#dispatchMouseDown:with:


MaContainerMorph(Morph)>>processEvent:using:
	Receiver: a MaContainerMorph(761790464)
	Arguments and temporary variables: 
		anEvent: 	[(878@226) mouseDown red 4181343 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(613.0@164.0) corner: (1013.0@664.0)
		owner: 	a MaWrapperMorph(203423744)
		submorphs: 	an Array(a MaScribbleMorph(555483136))
		fullBounds: 	(613.0@164.0) corner: (1013.0@664.0)
		color: 	Color transparent
		extension: 	a MorphExtension (780664832) [eventHandler = a MorphicEventHandler] ...etc...


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(878@226) mouseDown red 4181343 nil]
		aMorph: 	a MaWrapperMorph(203423744)
		globalPt: 	(878@226)
		localEvt: 	[(878@226) mouseDown red 4181343 nil]
		index: 	1
		child: 	a MaContainerMorph(761790464)
		morphs: 	an Array(a MaContainerMorph(761790464))
		handler: 	nil
		inside: 	nil
		lastHandler: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		lastType: 	#mouseDown
		lastDispatch: 	#dispatchMouseDown:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(878@226) mouseDown red 4181343 nil]
		aMorph: 	a MaWrapperMorph(203423744)
	Receiver's instance variables: 
		lastType: 	#mouseDown
		lastDispatch: 	#dispatchMouseDown:with:


MaWrapperMorph(Morph)>>processEvent:using:
	Receiver: a MaWrapperMorph(203423744)
	Arguments and temporary variables: 
		anEvent: 	[(878@226) mouseDown red 4181343 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(613.0@164.0) corner: (1013.0@664.0)
		owner: 	a SystemWindow(222560256)
		submorphs: 	an Array(a MaContainerMorph(761790464))
		fullBounds: 	(613.0@164.0) corner: (1013.0@664.0)
		color: 	Color white
		extension: 	a MorphExtension (812646400)
		app: 	a MaMorphicWindowApp


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(878@226) mouseDown red 4181343 nil]
		aMorph: 	a SystemWindow(222560256)
		globalPt: 	(878@226)
		localEvt: 	[(878@226) mouseDown red 4181343 nil]
		index: 	2
		child: 	a MaWrapperMorph(203423744)
		morphs: 	an Array(an AlignmentMorph(352583680) a MaWrapperMorph(203423744))
		handler: 	nil
		inside: 	nil
		lastHandler: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		lastType: 	#mouseDown
		lastDispatch: 	#dispatchMouseDown:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(878@226) mouseDown red 4181343 nil]
		aMorph: 	a SystemWindow(222560256)
	Receiver's instance variables: 
		lastType: 	#mouseDown
		lastDispatch: 	#dispatchMouseDown:with:


SystemWindow(Morph)>>processEvent:using:
	Receiver: a SystemWindow(222560256)
	Arguments and temporary variables: 
		anEvent: 	[(878@226) mouseDown red 4181343 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(608.0@136.0) corner: (1018.0@669.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	an Array(an AlignmentMorph(352583680) a MaWrapperMorph(203423744))
		fullBounds: 	(608.0@136.0) corner: (1018.0@669.0)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (355467264) [other:  (paneColor -> (Color r: 0.8230...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray
		model: 	nil
		open: 	false
		accessor: 	nil
		labelString: 	'Tetris Mines Douai'
		stripes: 	an Array(a Morph(277610496) a Morph(301465600))
		label: 	a LabelMorph(484966400)'Tetris Mines Douai'
		closeBox: 	a MultistateButtonMorph(626786304)
		collapseBox: 	a MultistateButtonMorph(136839168)
		activeOnlyOnTop: 	true
		paneMorphs: 	an Array(a MaWrapperMorph(203423744))
		collapsedFrame: 	nil
		fullFrame: 	(608.0@136.0) corner: (1018.0@669.0)
		isCollapsed: 	false
		menuBox: 	a MultistateButtonMorph(947126272)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(352583680)
		expandBox: 	nil
		embeddable: 	nil
		announcer: 	an Announcer
		menuBuilder: 	nil
		isResizeable: 	true


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(878@226) mouseDown red 4181343 nil]
		aMorph: 	a WorldMorph(511705088) [world]
		globalPt: 	(878@226)
		localEvt: 	[(878@226) mouseDown red 4181343 nil]
		index: 	2
		child: 	a SystemWindow(222560256)
		morphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(222560256) a SystemWi...etc...
		handler: 	a WorldMorph(511705088) [world]
		inside: 	nil
		lastHandler: 	nil
	Receiver's instance variables: 
		lastType: 	#mouseDown
		lastDispatch: 	#dispatchMouseDown:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(878@226) mouseDown red 4181343 nil]
		aMorph: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		lastType: 	#mouseDown
		lastDispatch: 	#dispatchMouseDown:with:


WorldMorph(Morph)>>processEvent:using:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		anEvent: 	[(878@226) mouseDown red 4181343 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@814)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(222560256) a Syste...etc...
		fullBounds: 	(0@0) corner: (1440@814)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph(Morph)>>processEvent:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		anEvent: 	[(878@226) mouseDown red 4181343 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@814)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(222560256) a Syste...etc...
		fullBounds: 	(0@0) corner: (1440@814)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(878@226) mouseDown red 4181343 nil]
		focusHolder: 	nil
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(878@226.0) corner: (894@242.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(878@226.0) corner: (894@242.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a MaContainerMorph(761790464)
		keyboardFocus: 	a SystemWindow(222560256)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(878@226) mouseOver red nil nil]
		targetOffset: 	(265.0@62.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4181343 878 226 4 0 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(878@226) mouseDown red 4181343 nil]
	Receiver's instance variables: 
		bounds: 	(878@226.0) corner: (894@242.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(878@226.0) corner: (894@242.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a MaContainerMorph(761790464)
		keyboardFocus: 	a SystemWindow(222560256)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(878@226) mouseOver red nil nil]
		targetOffset: 	(265.0@62.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4181343 878 226 4 0 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(878@226) mouseDown red 4181343 nil]
		evt: 	[(878@226) mouseDown red 4181343 nil]
	Receiver's instance variables: 
		bounds: 	(878@226.0) corner: (894@242.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(878@226.0) corner: (894@242.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a MaContainerMorph(761790464)
		keyboardFocus: 	a SystemWindow(222560256)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(878@226) mouseOver red nil nil]
		targetOffset: 	(265.0@62.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4181343 878 226 4 0 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[(878@226) mouseDown red 4181343 nil]
		evtBuf: 	#(1 4181343 878 226 4 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(878@226.0) corner: (894@242.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(878@226.0) corner: (894@242.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a MaContainerMorph(761790464)
		keyboardFocus: 	a SystemWindow(222560256)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(878@226) mouseOver red nil nil]
		targetOffset: 	(265.0@62.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4181343 878 226 4 0 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1440@814)
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(861405184))(a DropList...etc...
		lastStepTime: 	4181377
		lastStepMessage: 	nil
		lastCycleTime: 	4181377
		alarms: 	a Heap()
		lastAlarmTime: 	4181377
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1440@814)
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(861405184))(a DropList...etc...
		lastStepTime: 	4181377
		lastStepMessage: 	nil
		lastCycleTime: 	4181377
		alarms: 	a Heap()
		lastAlarmTime: 	4181377
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1440@814)
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(861405184))(a DropList...etc...
		lastStepTime: 	4181377
		lastStepMessage: 	nil
		lastCycleTime: 	4181377
		alarms: 	a Heap()
		lastAlarmTime: 	4181377
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 



--- The full stack ---
Matrix(Object)>>error:
Matrix>>indexForRow:andColumn:
Matrix>>at:at:put:
TsTerrain>>placer:
TsCarre>>position:
[ :each | each position: each position - (1 @ 0) ] in TsBarre(TsPiece)>>avancerVersLaGauche
OrderedCollection>>do:
TsBarre(TsPiece)>>avancerVersLaGauche
[ self pieceCourante avancerVersLaGauche ] in TsTetris>>initialize
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>mouseDown:fromMorph:
MaContainerMorph(Morph)>>mouseDown:
MaContainerMorph(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
MaContainerMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
MaContainerMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
MaWrapperMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: 2nd subscript out of range
17 February 2015 10:22:52.545237 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

Matrix(Object)>>error:
	Receiver: a Matrix(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil n...etc...
	Arguments and temporary variables: 
		aString: 	'2nd subscript out of range'
	Receiver's instance variables: 
		nrows: 	10
		ncols: 	8
		contents: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


Matrix>>indexForRow:andColumn:
	Receiver: a Matrix(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil n...etc...
	Arguments and temporary variables: 
		row: 	4
		column: 	0
	Receiver's instance variables: 
		nrows: 	10
		ncols: 	8
		contents: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


Matrix>>at:at:put:
	Receiver: a Matrix(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil n...etc...
	Arguments and temporary variables: 
		row: 	4
		column: 	0
		value: 	nil
	Receiver's instance variables: 
		nrows: 	10
		ncols: 	8
		contents: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


TsTerrain>>enlever:
	Receiver: a TsTerrain
	Arguments and temporary variables: 
		unCarre: 	a TsCarre
		position: 	(0@4)
	Receiver's instance variables: 
		cases: 	a Matrix(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...
		afficheur: 	a TsAfficheurTerrain


TsCarre>>position:
	Receiver: a TsCarre
	Arguments and temporary variables: 
		unPoint: 	(0@5)
	Receiver's instance variables: 
		couleur: 	Color pink
		position: 	(0@4)
		terrain: 	a TsTerrain


[ :each | each position: each position + (0 @ 1) ] in TsBarre(TsPiece)>>avancerVersLeBas
	Receiver: a TsBarre
	Arguments and temporary variables: 
		each: 	a TsCarre
	Receiver's instance variables: 
		couleur: 	Color pink
		carres: 	an OrderedCollection(a TsCarre)


OrderedCollection>>do:
	Receiver: an OrderedCollection(a TsCarre)
	Arguments and temporary variables: 
		aBlock: 	[ :each | each position: each position + (0 @ 1) ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a TsCarre nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	1


TsBarre(TsPiece)>>avancerVersLeBas
	Receiver: a TsBarre
	Arguments and temporary variables: 

	Receiver's instance variables: 
		couleur: 	Color pink
		carres: 	an OrderedCollection(a TsCarre)


[ terrain peutAccepterUneNouvellePiece ] in TsTetris>>jouer
	Receiver: a TsTetris
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a MaContainerMorph(761790464)
		terrain: 	a TsTerrain
		pieceCourante: 	a TsBarre
		affichage: 	a TsAfficheurTerrain
		process: 	a Process in nil


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ terrain peutAccepterUneNouvellePiece ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	TsTetris>>jouer
		startpc: 	61
		numArgs: 	0



--- The full stack ---
Matrix(Object)>>error:
Matrix>>indexForRow:andColumn:
Matrix>>at:at:put:
TsTerrain>>enlever:
TsCarre>>position:
[ :each | each position: each position + (0 @ 1) ] in TsBarre(TsPiece)>>avancerVersLeBas
OrderedCollection>>do:
TsBarre(TsPiece)>>avancerVersLeBas
[ terrain peutAccepterUneNouvellePiece ] in TsTetris>>jouer
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: 2nd subscript out of range
17 February 2015 10:24:47.930218 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

Matrix(Object)>>error:
	Receiver: a Matrix(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil n...etc...
	Arguments and temporary variables: 
		aString: 	'2nd subscript out of range'
	Receiver's instance variables: 
		nrows: 	10
		ncols: 	8
		contents: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


Matrix>>indexForRow:andColumn:
	Receiver: a Matrix(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil n...etc...
	Arguments and temporary variables: 
		row: 	1
		column: 	0
	Receiver's instance variables: 
		nrows: 	10
		ncols: 	8
		contents: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


Matrix>>at:at:put:
	Receiver: a Matrix(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil n...etc...
	Arguments and temporary variables: 
		row: 	1
		column: 	0
		value: 	a TsCarre
	Receiver's instance variables: 
		nrows: 	10
		ncols: 	8
		contents: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


TsTerrain>>placer:
	Receiver: a TsTerrain
	Arguments and temporary variables: 
		unCarre: 	a TsCarre
		position: 	(0@1)
	Receiver's instance variables: 
		cases: 	a Matrix(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...
		afficheur: 	a TsAfficheurTerrain


TsCarre>>position:
	Receiver: a TsCarre
	Arguments and temporary variables: 
		unPoint: 	(0@1)
	Receiver's instance variables: 
		couleur: 	Color pink
		position: 	(0@1)
		terrain: 	a TsTerrain


[ :each | each position: each position - (1 @ 0) ] in TsBarre(TsPiece)>>avancerVersLaGauche
	Receiver: a TsBarre
	Arguments and temporary variables: 
		each: 	a TsCarre
	Receiver's instance variables: 
		couleur: 	Color pink
		carres: 	an OrderedCollection(a TsCarre)


OrderedCollection>>do:
	Receiver: an OrderedCollection(a TsCarre)
	Arguments and temporary variables: 
		aBlock: 	[ :each | each position: each position - (1 @ 0) ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a TsCarre nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	1


TsBarre(TsPiece)>>avancerVersLaGauche
	Receiver: a TsBarre
	Arguments and temporary variables: 

	Receiver's instance variables: 
		couleur: 	Color pink
		carres: 	an OrderedCollection(a TsCarre)


[ self pieceCourante avancerVersLaGauche ] in TsTetris>>initialize
	Receiver: a TsTetris
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a MaContainerMorph(21233664)
		terrain: 	a TsTerrain
		pieceCourante: 	a TsBarre
		affichage: 	a TsAfficheurTerrain
		process: 	nil


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(1068@493) mouseDown red 4297361 nil]
		sourceMorph: 	a MaContainerMorph(21233664)
		arity: 	0
	Receiver's instance variables: 
		event: 	#mouseDown
		selector: 	#value
		recipient: 	[ self pieceCourante avancerVersLaGauche ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(1068@493) mouseDown red 4297361 nil]
		eventType: 	#mouseDown
		sourceMorph: 	a MaContainerMorph(21233664)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseDown->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	1
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(a MorphEventSubscription nil nil nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(1068@493) mouseDown red 4297361 nil]
		eventType: 	#mouseDown
		sourceMorph: 	a MaContainerMorph(21233664)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseDown->a Set(a MorphEventSubscription) )


MorphicEventHandler>>mouseDown:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(1068@493) mouseDown red 4297361 nil]
		sourceMorph: 	a MaContainerMorph(21233664)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseDown->a Set(a MorphEventSubscription) )


MaContainerMorph(Morph)>>mouseDown:
	Receiver: a MaContainerMorph(21233664)
	Arguments and temporary variables: 
		evt: 	[(1068@493) mouseDown red 4297361 nil]
	Receiver's instance variables: 
		bounds: 	(863.0@172.0) corner: (1263.0@672.0)
		owner: 	a MaWrapperMorph(512491520)
		submorphs: 	an Array(a MaScribbleMorph(894697472))
		fullBounds: 	(863.0@172.0) corner: (1263.0@672.0)
		color: 	Color transparent
		extension: 	a MorphExtension (46137344) [eventHandler = a MorphicEventHandler] 


MaContainerMorph(Morph)>>handleMouseDown:
	Receiver: a MaContainerMorph(21233664)
	Arguments and temporary variables: 
		anEvent: 	[(1068@493) mouseDown red 4297361 nil]
	Receiver's instance variables: 
		bounds: 	(863.0@172.0) corner: (1263.0@672.0)
		owner: 	a MaWrapperMorph(512491520)
		submorphs: 	an Array(a MaScribbleMorph(894697472))
		fullBounds: 	(863.0@172.0) corner: (1263.0@672.0)
		color: 	Color transparent
		extension: 	a MorphExtension (46137344) [eventHandler = a MorphicEventHandler] 


MouseButtonEvent>>sentTo:
	Receiver: [(1068@493) mouseDown red 4297361 nil]
	Arguments and temporary variables: 
		anObject: 	a MaContainerMorph(21233664)
	Receiver's instance variables: 
		timeStamp: 	4297361
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	4
		position: 	(1068@493)
		handler: 	a MaContainerMorph(21233664)
		wasHandled: 	true
		whichButton: 	4


MaContainerMorph(Morph)>>handleEvent:
	Receiver: a MaContainerMorph(21233664)
	Arguments and temporary variables: 
		anEvent: 	[(1068@493) mouseDown red 4297361 nil]
	Receiver's instance variables: 
		bounds: 	(863.0@172.0) corner: (1263.0@672.0)
		owner: 	a MaWrapperMorph(512491520)
		submorphs: 	an Array(a MaScribbleMorph(894697472))
		fullBounds: 	(863.0@172.0) corner: (1263.0@672.0)
		color: 	Color transparent
		extension: 	a MorphExtension (46137344) [eventHandler = a MorphicEventHandler] 


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1068@493) mouseDown red 4297361 nil]
		aMorph: 	a MaContainerMorph(21233664)
		globalPt: 	(1068@493)
		localEvt: 	[(1068@493) mouseDown red 4297361 nil]
		index: 	2
		child: 	a MaScribbleMorph(894697472)
		morphs: 	an Array(a MaScribbleMorph(894697472))
		handler: 	a MaContainerMorph(21233664)
		inside: 	false
		lastHandler: 	a SystemWindow(525598720)
	Receiver's instance variables: 
		lastType: 	#mouseDown
		lastDispatch: 	#dispatchMouseDown:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1068@493) mouseDown red 4297361 nil]
		aMorph: 	a MaContainerMorph(21233664)
	Receiver's instance variables: 
		lastType: 	#mouseDown
		lastDispatch: 	#dispatchMouseDown:with:


MaContainerMorph(Morph)>>processEvent:using:
	Receiver: a MaContainerMorph(21233664)
	Arguments and temporary variables: 
		anEvent: 	[(1068@493) mouseDown red 4297361 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(863.0@172.0) corner: (1263.0@672.0)
		owner: 	a MaWrapperMorph(512491520)
		submorphs: 	an Array(a MaScribbleMorph(894697472))
		fullBounds: 	(863.0@172.0) corner: (1263.0@672.0)
		color: 	Color transparent
		extension: 	a MorphExtension (46137344) [eventHandler = a MorphicEventHandler] 


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1068@493) mouseDown red 4297361 nil]
		aMorph: 	a MaWrapperMorph(512491520)
		globalPt: 	(1068@493)
		localEvt: 	[(1068@493) mouseDown red 4297361 nil]
		index: 	1
		child: 	a MaContainerMorph(21233664)
		morphs: 	an Array(a MaContainerMorph(21233664))
		handler: 	nil
		inside: 	nil
		lastHandler: 	a SystemWindow(525598720)
	Receiver's instance variables: 
		lastType: 	#mouseDown
		lastDispatch: 	#dispatchMouseDown:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1068@493) mouseDown red 4297361 nil]
		aMorph: 	a MaWrapperMorph(512491520)
	Receiver's instance variables: 
		lastType: 	#mouseDown
		lastDispatch: 	#dispatchMouseDown:with:


MaWrapperMorph(Morph)>>processEvent:using:
	Receiver: a MaWrapperMorph(512491520)
	Arguments and temporary variables: 
		anEvent: 	[(1068@493) mouseDown red 4297361 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(863.0@172.0) corner: (1263.0@672.0)
		owner: 	a SystemWindow(525598720)
		submorphs: 	an Array(a MaContainerMorph(21233664))
		fullBounds: 	(863.0@172.0) corner: (1263.0@672.0)
		color: 	Color white
		extension: 	a MorphExtension (347340800)
		app: 	a MaMorphicWindowApp


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1068@493) mouseDown red 4297361 nil]
		aMorph: 	a SystemWindow(525598720)
		globalPt: 	(1068@493)
		localEvt: 	[(1068@493) mouseDown red 4297361 nil]
		index: 	2
		child: 	a MaWrapperMorph(512491520)
		morphs: 	an Array(an AlignmentMorph(351010816) a MaWrapperMorph(512491520))
		handler: 	nil
		inside: 	nil
		lastHandler: 	a SystemWindow(525598720)
	Receiver's instance variables: 
		lastType: 	#mouseDown
		lastDispatch: 	#dispatchMouseDown:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1068@493) mouseDown red 4297361 nil]
		aMorph: 	a SystemWindow(525598720)
	Receiver's instance variables: 
		lastType: 	#mouseDown
		lastDispatch: 	#dispatchMouseDown:with:


SystemWindow(Morph)>>processEvent:using:
	Receiver: a SystemWindow(525598720)
	Arguments and temporary variables: 
		anEvent: 	[(1068@493) mouseDown red 4297361 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(858.0@144.0) corner: (1268.0@677.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	an Array(an AlignmentMorph(351010816) a MaWrapperMorph(512491520))
		fullBounds: 	(858@144) corner: (1268@677)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (709623808) [other:  (paneColor -> (Color r: 0.8230...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray
		model: 	nil
		open: 	false
		accessor: 	nil
		labelString: 	'Tetris Mines Douai'
		stripes: 	an Array(a Morph(282066944) a Morph(305922048))
		label: 	a LabelMorph(833093632)'Tetris Mines Douai'
		closeBox: 	a MultistateButtonMorph(619184128)
		collapseBox: 	a MultistateButtonMorph(1058275328)
		activeOnlyOnTop: 	true
		paneMorphs: 	an Array(a MaWrapperMorph(512491520))
		collapsedFrame: 	nil
		fullFrame: 	(858.0@144.0) corner: (1268.0@677.0)
		isCollapsed: 	false
		menuBox: 	a MultistateButtonMorph(885260288)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(351010816)
		expandBox: 	nil
		embeddable: 	nil
		announcer: 	an Announcer
		menuBuilder: 	nil
		isResizeable: 	true


SystemWindow(Morph)>>processEvent:
	Receiver: a SystemWindow(525598720)
	Arguments and temporary variables: 
		anEvent: 	[(1068@493) mouseDown red 4297361 nil]
	Receiver's instance variables: 
		bounds: 	(858.0@144.0) corner: (1268.0@677.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	an Array(an AlignmentMorph(351010816) a MaWrapperMorph(512491520))
		fullBounds: 	(858@144) corner: (1268@677)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (709623808) [other:  (paneColor -> (Color r: 0.8230...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray
		model: 	nil
		open: 	false
		accessor: 	nil
		labelString: 	'Tetris Mines Douai'
		stripes: 	an Array(a Morph(282066944) a Morph(305922048))
		label: 	a LabelMorph(833093632)'Tetris Mines Douai'
		closeBox: 	a MultistateButtonMorph(619184128)
		collapseBox: 	a MultistateButtonMorph(1058275328)
		activeOnlyOnTop: 	true
		paneMorphs: 	an Array(a MaWrapperMorph(512491520))
		collapsedFrame: 	nil
		fullFrame: 	(858.0@144.0) corner: (1268.0@677.0)
		isCollapsed: 	false
		menuBox: 	a MultistateButtonMorph(885260288)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(351010816)
		expandBox: 	nil
		embeddable: 	nil
		announcer: 	an Announcer
		menuBuilder: 	nil
		isResizeable: 	true


[ 
evt wasHandled: false.
self processEvent: evt ] in SystemWindow>>mouseDown:
	Receiver: a SystemWindow(525598720)
	Arguments and temporary variables: 
		evt: 	[(1068@493) mouseDown red 4297361 nil]
	Receiver's instance variables: 
		bounds: 	(858.0@144.0) corner: (1268.0@677.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	an Array(an AlignmentMorph(351010816) a MaWrapperMorph(512491520))
		fullBounds: 	(858@144) corner: (1268@677)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (709623808) [other:  (paneColor -> (Color r: 0.8230...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray
		model: 	nil
		open: 	false
		accessor: 	nil
		labelString: 	'Tetris Mines Douai'
		stripes: 	an Array(a Morph(282066944) a Morph(305922048))
		label: 	a LabelMorph(833093632)'Tetris Mines Douai'
		closeBox: 	a MultistateButtonMorph(619184128)
		collapseBox: 	a MultistateButtonMorph(1058275328)
		activeOnlyOnTop: 	true
		paneMorphs: 	an Array(a MaWrapperMorph(512491520))
		collapsedFrame: 	nil
		fullFrame: 	(858.0@144.0) corner: (1268.0@677.0)
		isCollapsed: 	false
		menuBox: 	a MultistateButtonMorph(885260288)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(351010816)
		expandBox: 	nil
		embeddable: 	nil
		announcer: 	an Announcer
		menuBuilder: 	nil
		isResizeable: 	true


BlockClosure>>ensure:
	Receiver: [ 
evt wasHandled: false.
self processEvent: evt ]
	Arguments and temporary variables: 
		aBlock: 	[ self setProperty: #processingMouseDown toValue: false ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	SystemWindow>>mouseDown:
		startpc: 	192
		numArgs: 	0


SystemWindow>>mouseDown:
	Receiver: a SystemWindow(525598720)
	Arguments and temporary variables: 
		evt: 	[(1068@493) mouseDown red 4297361 nil]
	Receiver's instance variables: 
		bounds: 	(858.0@144.0) corner: (1268.0@677.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	an Array(an AlignmentMorph(351010816) a MaWrapperMorph(512491520))
		fullBounds: 	(858@144) corner: (1268@677)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (709623808) [other:  (paneColor -> (Color r: 0.8230...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray
		model: 	nil
		open: 	false
		accessor: 	nil
		labelString: 	'Tetris Mines Douai'
		stripes: 	an Array(a Morph(282066944) a Morph(305922048))
		label: 	a LabelMorph(833093632)'Tetris Mines Douai'
		closeBox: 	a MultistateButtonMorph(619184128)
		collapseBox: 	a MultistateButtonMorph(1058275328)
		activeOnlyOnTop: 	true
		paneMorphs: 	an Array(a MaWrapperMorph(512491520))
		collapsedFrame: 	nil
		fullFrame: 	(858.0@144.0) corner: (1268.0@677.0)
		isCollapsed: 	false
		menuBox: 	a MultistateButtonMorph(885260288)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(351010816)
		expandBox: 	nil
		embeddable: 	nil
		announcer: 	an Announcer
		menuBuilder: 	nil
		isResizeable: 	true


SystemWindow(Morph)>>handleMouseDown:
	Receiver: a SystemWindow(525598720)
	Arguments and temporary variables: 
		anEvent: 	[(1068@493) mouseDown red 4297361 nil]
	Receiver's instance variables: 
		bounds: 	(858.0@144.0) corner: (1268.0@677.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	an Array(an AlignmentMorph(351010816) a MaWrapperMorph(512491520))
		fullBounds: 	(858@144) corner: (1268@677)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (709623808) [other:  (paneColor -> (Color r: 0.8230...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray
		model: 	nil
		open: 	false
		accessor: 	nil
		labelString: 	'Tetris Mines Douai'
		stripes: 	an Array(a Morph(282066944) a Morph(305922048))
		label: 	a LabelMorph(833093632)'Tetris Mines Douai'
		closeBox: 	a MultistateButtonMorph(619184128)
		collapseBox: 	a MultistateButtonMorph(1058275328)
		activeOnlyOnTop: 	true
		paneMorphs: 	an Array(a MaWrapperMorph(512491520))
		collapsedFrame: 	nil
		fullFrame: 	(858.0@144.0) corner: (1268.0@677.0)
		isCollapsed: 	false
		menuBox: 	a MultistateButtonMorph(885260288)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(351010816)
		expandBox: 	nil
		embeddable: 	nil
		announcer: 	an Announcer
		menuBuilder: 	nil
		isResizeable: 	true


MouseButtonEvent>>sentTo:
	Receiver: [(1068@493) mouseDown red 4297361 nil]
	Arguments and temporary variables: 
		anObject: 	a SystemWindow(525598720)
	Receiver's instance variables: 
		timeStamp: 	4297361
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	4
		position: 	(1068@493)
		handler: 	a SystemWindow(525598720)
		wasHandled: 	false
		whichButton: 	4


SystemWindow(Morph)>>handleEvent:
	Receiver: a SystemWindow(525598720)
	Arguments and temporary variables: 
		anEvent: 	[(1068@493) mouseDown red 4297361 nil]
	Receiver's instance variables: 
		bounds: 	(858.0@144.0) corner: (1268.0@677.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	an Array(an AlignmentMorph(351010816) a MaWrapperMorph(512491520))
		fullBounds: 	(858@144) corner: (1268@677)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (709623808) [other:  (paneColor -> (Color r: 0.8230...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray
		model: 	nil
		open: 	false
		accessor: 	nil
		labelString: 	'Tetris Mines Douai'
		stripes: 	an Array(a Morph(282066944) a Morph(305922048))
		label: 	a LabelMorph(833093632)'Tetris Mines Douai'
		closeBox: 	a MultistateButtonMorph(619184128)
		collapseBox: 	a MultistateButtonMorph(1058275328)
		activeOnlyOnTop: 	true
		paneMorphs: 	an Array(a MaWrapperMorph(512491520))
		collapsedFrame: 	nil
		fullFrame: 	(858.0@144.0) corner: (1268.0@677.0)
		isCollapsed: 	false
		menuBox: 	a MultistateButtonMorph(885260288)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(351010816)
		expandBox: 	nil
		embeddable: 	nil
		announcer: 	an Announcer
		menuBuilder: 	nil
		isResizeable: 	true


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1068@493) mouseDown red 4297361 nil]
		aMorph: 	a SystemWindow(525598720)
		globalPt: 	(1068@493)
		localEvt: 	[(1068@493) mouseDown red 4297361 nil]
		index: 	3
		child: 	a MaWrapperMorph(512491520)
		morphs: 	an Array(an AlignmentMorph(351010816) a MaWrapperMorph(512491520))
		handler: 	a SystemWindow(525598720)
		inside: 	nil
		lastHandler: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		lastType: 	#mouseDown
		lastDispatch: 	#dispatchMouseDown:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1068@493) mouseDown red 4297361 nil]
		aMorph: 	a SystemWindow(525598720)
	Receiver's instance variables: 
		lastType: 	#mouseDown
		lastDispatch: 	#dispatchMouseDown:with:


SystemWindow(Morph)>>processEvent:using:
	Receiver: a SystemWindow(525598720)
	Arguments and temporary variables: 
		anEvent: 	[(1068@493) mouseDown red 4297361 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(858.0@144.0) corner: (1268.0@677.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	an Array(an AlignmentMorph(351010816) a MaWrapperMorph(512491520))
		fullBounds: 	(858@144) corner: (1268@677)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (709623808) [other:  (paneColor -> (Color r: 0.8230...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray
		model: 	nil
		open: 	false
		accessor: 	nil
		labelString: 	'Tetris Mines Douai'
		stripes: 	an Array(a Morph(282066944) a Morph(305922048))
		label: 	a LabelMorph(833093632)'Tetris Mines Douai'
		closeBox: 	a MultistateButtonMorph(619184128)
		collapseBox: 	a MultistateButtonMorph(1058275328)
		activeOnlyOnTop: 	true
		paneMorphs: 	an Array(a MaWrapperMorph(512491520))
		collapsedFrame: 	nil
		fullFrame: 	(858.0@144.0) corner: (1268.0@677.0)
		isCollapsed: 	false
		menuBox: 	a MultistateButtonMorph(885260288)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(351010816)
		expandBox: 	nil
		embeddable: 	nil
		announcer: 	an Announcer
		menuBuilder: 	nil
		isResizeable: 	true


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1068@493) mouseDown red 4297361 nil]
		aMorph: 	a WorldMorph(511705088) [world]
		globalPt: 	(1068@493)
		localEvt: 	[(1068@493) mouseDown red 4297361 nil]
		index: 	3
		child: 	a SystemWindow(525598720)
		morphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(525598720) a SystemWi...etc...
		handler: 	a WorldMorph(511705088) [world]
		inside: 	nil
		lastHandler: 	nil
	Receiver's instance variables: 
		lastType: 	#mouseDown
		lastDispatch: 	#dispatchMouseDown:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1068@493) mouseDown red 4297361 nil]
		aMorph: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		lastType: 	#mouseDown
		lastDispatch: 	#dispatchMouseDown:with:



--- The full stack ---
Matrix(Object)>>error:
Matrix>>indexForRow:andColumn:
Matrix>>at:at:put:
TsTerrain>>placer:
TsCarre>>position:
[ :each | each position: each position - (1 @ 0) ] in TsBarre(TsPiece)>>avancerVersLaGauche
OrderedCollection>>do:
TsBarre(TsPiece)>>avancerVersLaGauche
[ self pieceCourante avancerVersLaGauche ] in TsTetris>>initialize
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>mouseDown:fromMorph:
MaContainerMorph(Morph)>>mouseDown:
MaContainerMorph(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
MaContainerMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
MaContainerMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
MaWrapperMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
SystemWindow(Morph)>>processEvent:
[ 
evt wasHandled: false.
self processEvent: evt ] in SystemWindow>>mouseDown:
BlockClosure>>ensure:
SystemWindow>>mouseDown:
SystemWindow(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
SystemWindow(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: 2nd subscript out of range
17 February 2015 10:29:36.569849 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

Matrix(Object)>>error:
	Receiver: a Matrix(nil a TsCarre nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...
	Arguments and temporary variables: 
		aString: 	'2nd subscript out of range'
	Receiver's instance variables: 
		nrows: 	10
		ncols: 	8
		contents: 	an Array(nil a TsCarre nil nil nil nil nil nil nil nil nil nil nil ni...etc...


Matrix>>indexForRow:andColumn:
	Receiver: a Matrix(nil a TsCarre nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...
	Arguments and temporary variables: 
		row: 	1
		column: 	0
	Receiver's instance variables: 
		nrows: 	10
		ncols: 	8
		contents: 	an Array(nil a TsCarre nil nil nil nil nil nil nil nil nil nil nil ni...etc...


Matrix>>at:at:put:
	Receiver: a Matrix(nil a TsCarre nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...
	Arguments and temporary variables: 
		row: 	1
		column: 	0
		value: 	a TsCarre
	Receiver's instance variables: 
		nrows: 	10
		ncols: 	8
		contents: 	an Array(nil a TsCarre nil nil nil nil nil nil nil nil nil nil nil ni...etc...


TsTerrain>>placer:
	Receiver: a TsTerrain
	Arguments and temporary variables: 
		unCarre: 	a TsCarre
		position: 	(0@1)
	Receiver's instance variables: 
		cases: 	a Matrix(nil a TsCarre nil nil nil nil nil nil nil nil nil nil nil nil n...etc...
		afficheur: 	a TsAfficheurTerrain


TsCarre>>position:
	Receiver: a TsCarre
	Arguments and temporary variables: 
		unPoint: 	(0@1)
	Receiver's instance variables: 
		couleur: 	Color green
		position: 	(0@1)
		terrain: 	a TsTerrain


[ :each | each position: each position - (1 @ 0) ] in TsBarre(TsPiece)>>avancerVersLaGauche
	Receiver: a TsBarre
	Arguments and temporary variables: 
		each: 	a TsCarre
	Receiver's instance variables: 
		couleur: 	Color green
		carres: 	an OrderedCollection(a TsCarre a TsCarre)


OrderedCollection>>do:
	Receiver: an OrderedCollection(a TsCarre a TsCarre)
	Arguments and temporary variables: 
		aBlock: 	[ :each | each position: each position - (1 @ 0) ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a TsCarre a TsCarre nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


TsBarre(TsPiece)>>avancerVersLaGauche
	Receiver: a TsBarre
	Arguments and temporary variables: 

	Receiver's instance variables: 
		couleur: 	Color green
		carres: 	an OrderedCollection(a TsCarre a TsCarre)


[ self pieceCourante avancerVersLaGauche ] in TsTetris>>initialize
	Receiver: a TsTetris
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a MaContainerMorph(21233664)
		terrain: 	a TsTerrain
		pieceCourante: 	a TsBarre
		affichage: 	a TsAfficheurTerrain
		process: 	nil


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(983@258) mouseDown red 4586029 nil]
		sourceMorph: 	a MaContainerMorph(21233664)
		arity: 	0
	Receiver's instance variables: 
		event: 	#mouseDown
		selector: 	#value
		recipient: 	[ self pieceCourante avancerVersLaGauche ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(983@258) mouseDown red 4586029 nil]
		eventType: 	#mouseDown
		sourceMorph: 	a MaContainerMorph(21233664)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseDown->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	1
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(a MorphEventSubscription nil nil nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(983@258) mouseDown red 4586029 nil]
		eventType: 	#mouseDown
		sourceMorph: 	a MaContainerMorph(21233664)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseDown->a Set(a MorphEventSubscription) )


MorphicEventHandler>>mouseDown:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(983@258) mouseDown red 4586029 nil]
		sourceMorph: 	a MaContainerMorph(21233664)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseDown->a Set(a MorphEventSubscription) )


MaContainerMorph(Morph)>>mouseDown:
	Receiver: a MaContainerMorph(21233664)
	Arguments and temporary variables: 
		evt: 	[(983@258) mouseDown red 4586029 nil]
	Receiver's instance variables: 
		bounds: 	(863.0@172.0) corner: (1263.0@672.0)
		owner: 	a MaWrapperMorph(512491520)
		submorphs: 	an Array(a MaScribbleMorph(894697472))
		fullBounds: 	(863.0@172.0) corner: (1263.0@672.0)
		color: 	Color transparent
		extension: 	a MorphExtension (46137344) [eventHandler = a MorphicEventHandler] 


MaContainerMorph(Morph)>>handleMouseDown:
	Receiver: a MaContainerMorph(21233664)
	Arguments and temporary variables: 
		anEvent: 	[(983@258) mouseDown red 4586029 nil]
	Receiver's instance variables: 
		bounds: 	(863.0@172.0) corner: (1263.0@672.0)
		owner: 	a MaWrapperMorph(512491520)
		submorphs: 	an Array(a MaScribbleMorph(894697472))
		fullBounds: 	(863.0@172.0) corner: (1263.0@672.0)
		color: 	Color transparent
		extension: 	a MorphExtension (46137344) [eventHandler = a MorphicEventHandler] 


MouseButtonEvent>>sentTo:
	Receiver: [(983@258) mouseDown red 4586029 nil]
	Arguments and temporary variables: 
		anObject: 	a MaContainerMorph(21233664)
	Receiver's instance variables: 
		timeStamp: 	4586029
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	4
		position: 	(983@258)
		handler: 	a MaContainerMorph(21233664)
		wasHandled: 	true
		whichButton: 	4


MaContainerMorph(Morph)>>handleEvent:
	Receiver: a MaContainerMorph(21233664)
	Arguments and temporary variables: 
		anEvent: 	[(983@258) mouseDown red 4586029 nil]
	Receiver's instance variables: 
		bounds: 	(863.0@172.0) corner: (1263.0@672.0)
		owner: 	a MaWrapperMorph(512491520)
		submorphs: 	an Array(a MaScribbleMorph(894697472))
		fullBounds: 	(863.0@172.0) corner: (1263.0@672.0)
		color: 	Color transparent
		extension: 	a MorphExtension (46137344) [eventHandler = a MorphicEventHandler] 


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(983@258) mouseDown red 4586029 nil]
		aMorph: 	a MaContainerMorph(21233664)
		globalPt: 	(983@258)
		localEvt: 	[(983@258) mouseDown red 4586029 nil]
		index: 	2
		child: 	a MaScribbleMorph(894697472)
		morphs: 	an Array(a MaScribbleMorph(894697472))
		handler: 	a MaContainerMorph(21233664)
		inside: 	false
		lastHandler: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		lastType: 	#mouseDown
		lastDispatch: 	#dispatchMouseDown:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(983@258) mouseDown red 4586029 nil]
		aMorph: 	a MaContainerMorph(21233664)
	Receiver's instance variables: 
		lastType: 	#mouseDown
		lastDispatch: 	#dispatchMouseDown:with:


MaContainerMorph(Morph)>>processEvent:using:
	Receiver: a MaContainerMorph(21233664)
	Arguments and temporary variables: 
		anEvent: 	[(983@258) mouseDown red 4586029 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(863.0@172.0) corner: (1263.0@672.0)
		owner: 	a MaWrapperMorph(512491520)
		submorphs: 	an Array(a MaScribbleMorph(894697472))
		fullBounds: 	(863.0@172.0) corner: (1263.0@672.0)
		color: 	Color transparent
		extension: 	a MorphExtension (46137344) [eventHandler = a MorphicEventHandler] 


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(983@258) mouseDown red 4586029 nil]
		aMorph: 	a MaWrapperMorph(512491520)
		globalPt: 	(983@258)
		localEvt: 	[(983@258) mouseDown red 4586029 nil]
		index: 	1
		child: 	a MaContainerMorph(21233664)
		morphs: 	an Array(a MaContainerMorph(21233664))
		handler: 	nil
		inside: 	nil
		lastHandler: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		lastType: 	#mouseDown
		lastDispatch: 	#dispatchMouseDown:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(983@258) mouseDown red 4586029 nil]
		aMorph: 	a MaWrapperMorph(512491520)
	Receiver's instance variables: 
		lastType: 	#mouseDown
		lastDispatch: 	#dispatchMouseDown:with:


MaWrapperMorph(Morph)>>processEvent:using:
	Receiver: a MaWrapperMorph(512491520)
	Arguments and temporary variables: 
		anEvent: 	[(983@258) mouseDown red 4586029 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(863.0@172.0) corner: (1263.0@672.0)
		owner: 	a SystemWindow(525598720)
		submorphs: 	an Array(a MaContainerMorph(21233664))
		fullBounds: 	(863.0@172.0) corner: (1263.0@672.0)
		color: 	Color white
		extension: 	a MorphExtension (347340800)
		app: 	a MaMorphicWindowApp


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(983@258) mouseDown red 4586029 nil]
		aMorph: 	a SystemWindow(525598720)
		globalPt: 	(983@258)
		localEvt: 	[(983@258) mouseDown red 4586029 nil]
		index: 	2
		child: 	a MaWrapperMorph(512491520)
		morphs: 	an Array(an AlignmentMorph(351010816) a MaWrapperMorph(512491520))
		handler: 	nil
		inside: 	nil
		lastHandler: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		lastType: 	#mouseDown
		lastDispatch: 	#dispatchMouseDown:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(983@258) mouseDown red 4586029 nil]
		aMorph: 	a SystemWindow(525598720)
	Receiver's instance variables: 
		lastType: 	#mouseDown
		lastDispatch: 	#dispatchMouseDown:with:


SystemWindow(Morph)>>processEvent:using:
	Receiver: a SystemWindow(525598720)
	Arguments and temporary variables: 
		anEvent: 	[(983@258) mouseDown red 4586029 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(858.0@144.0) corner: (1268.0@677.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	an Array(an AlignmentMorph(351010816) a MaWrapperMorph(512491520))
		fullBounds: 	(858@144) corner: (1268@677)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (709623808) [other:  (paneColor -> (Color r: 0.8230...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray
		model: 	nil
		open: 	false
		accessor: 	nil
		labelString: 	'Tetris Mines Douai'
		stripes: 	an Array(a Morph(282066944) a Morph(305922048))
		label: 	a LabelMorph(833093632)'Tetris Mines Douai'
		closeBox: 	a MultistateButtonMorph(619184128)
		collapseBox: 	a MultistateButtonMorph(1058275328)
		activeOnlyOnTop: 	true
		paneMorphs: 	an Array(a MaWrapperMorph(512491520))
		collapsedFrame: 	nil
		fullFrame: 	(858.0@144.0) corner: (1268.0@677.0)
		isCollapsed: 	false
		menuBox: 	a MultistateButtonMorph(885260288)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(351010816)
		expandBox: 	nil
		embeddable: 	nil
		announcer: 	an Announcer
		menuBuilder: 	nil
		isResizeable: 	true


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(983@258) mouseDown red 4586029 nil]
		aMorph: 	a WorldMorph(511705088) [world]
		globalPt: 	(983@258)
		localEvt: 	[(983@258) mouseDown red 4586029 nil]
		index: 	2
		child: 	a SystemWindow(525598720)
		morphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(525598720) a SystemWi...etc...
		handler: 	a WorldMorph(511705088) [world]
		inside: 	nil
		lastHandler: 	nil
	Receiver's instance variables: 
		lastType: 	#mouseDown
		lastDispatch: 	#dispatchMouseDown:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(983@258) mouseDown red 4586029 nil]
		aMorph: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		lastType: 	#mouseDown
		lastDispatch: 	#dispatchMouseDown:with:


WorldMorph(Morph)>>processEvent:using:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		anEvent: 	[(983@258) mouseDown red 4586029 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@814)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(525598720) a Syste...etc...
		fullBounds: 	(0@0) corner: (1440@814)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph(Morph)>>processEvent:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		anEvent: 	[(983@258) mouseDown red 4586029 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@814)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(525598720) a Syste...etc...
		fullBounds: 	(0@0) corner: (1440@814)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(983@258) mouseDown red 4586029 nil]
		focusHolder: 	nil
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(983@258.0) corner: (999@274.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(983@258.0) corner: (999@274.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a MaContainerMorph(21233664)
		keyboardFocus: 	a SystemWindow(525598720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(983@258) mouseOver red nil nil]
		targetOffset: 	(120.0@86.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4586029 983 258 4 0 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(983@258) mouseDown red 4586029 nil]
	Receiver's instance variables: 
		bounds: 	(983@258.0) corner: (999@274.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(983@258.0) corner: (999@274.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a MaContainerMorph(21233664)
		keyboardFocus: 	a SystemWindow(525598720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(983@258) mouseOver red nil nil]
		targetOffset: 	(120.0@86.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4586029 983 258 4 0 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(983@258) mouseDown red 4586029 nil]
		evt: 	[(983@258) mouseDown red 4586029 nil]
	Receiver's instance variables: 
		bounds: 	(983@258.0) corner: (999@274.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(983@258.0) corner: (999@274.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a MaContainerMorph(21233664)
		keyboardFocus: 	a SystemWindow(525598720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(983@258) mouseOver red nil nil]
		targetOffset: 	(120.0@86.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4586029 983 258 4 0 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[(983@258) mouseDown red 4586029 nil]
		evtBuf: 	#(1 4586029 983 258 4 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(983@258.0) corner: (999@274.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(983@258.0) corner: (999@274.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a MaContainerMorph(21233664)
		keyboardFocus: 	a SystemWindow(525598720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(983@258) mouseOver red nil nil]
		targetOffset: 	(120.0@86.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4586029 983 258 4 0 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1440@814)
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(964427776))(a DropList...etc...
		lastStepTime: 	4586049
		lastStepMessage: 	nil
		lastCycleTime: 	4586049
		alarms: 	a Heap()
		lastAlarmTime: 	4586049
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1440@814)
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(964427776))(a DropList...etc...
		lastStepTime: 	4586049
		lastStepMessage: 	nil
		lastCycleTime: 	4586049
		alarms: 	a Heap()
		lastAlarmTime: 	4586049
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1440@814)
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(964427776))(a DropList...etc...
		lastStepTime: 	4586049
		lastStepMessage: 	nil
		lastCycleTime: 	4586049
		alarms: 	a Heap()
		lastAlarmTime: 	4586049
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 



--- The full stack ---
Matrix(Object)>>error:
Matrix>>indexForRow:andColumn:
Matrix>>at:at:put:
TsTerrain>>placer:
TsCarre>>position:
[ :each | each position: each position - (1 @ 0) ] in TsBarre(TsPiece)>>avancerVersLaGauche
OrderedCollection>>do:
TsBarre(TsPiece)>>avancerVersLaGauche
[ self pieceCourante avancerVersLaGauche ] in TsTetris>>initialize
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>mouseDown:fromMorph:
MaContainerMorph(Morph)>>mouseDown:
MaContainerMorph(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
MaContainerMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
MaContainerMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
MaWrapperMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: TsBarre>>terrain
17 February 2015 10:34:20.801043 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

TsBarre(Object)>>doesNotUnderstand: #terrain
	Receiver: a TsBarre
	Arguments and temporary variables: 
		aMessage: 	terrain
		exception: 	MessageNotUnderstood: TsBarre>>terrain
		resumeValue: 	nil
	Receiver's instance variables: 
		couleur: 	Color purple
		carres: 	an OrderedCollection(a TsCarre a TsCarre a TsCarre)


[ :each | self terrain enlever: each ] in TsBarre(TsPiece)>>avancerVersLaDroite
	Receiver: a TsBarre
	Arguments and temporary variables: 
		each: 	a TsCarre
	Receiver's instance variables: 
		couleur: 	Color purple
		carres: 	an OrderedCollection(a TsCarre a TsCarre a TsCarre)


OrderedCollection>>do:
	Receiver: an OrderedCollection(a TsCarre a TsCarre a TsCarre)
	Arguments and temporary variables: 
		aBlock: 	[ :each | self terrain enlever: each ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a TsCarre a TsCarre a TsCarre nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	3


TsBarre(TsPiece)>>avancerVersLaDroite
	Receiver: a TsBarre
	Arguments and temporary variables: 

	Receiver's instance variables: 
		couleur: 	Color purple
		carres: 	an OrderedCollection(a TsCarre a TsCarre a TsCarre)


[ self pieceCourante avancerVersLaDroite ] in TsTetris>>initialize
	Receiver: a TsTetris
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a MaContainerMorph(448790528)
		terrain: 	a TsTerrain
		pieceCourante: 	a TsBarre
		affichage: 	a TsAfficheurTerrain
		process: 	nil


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(1007@232) mouseDown red 4870245 nil]
		sourceMorph: 	a MaContainerMorph(448790528)
		arity: 	0
	Receiver's instance variables: 
		event: 	#mouseDown
		selector: 	#value
		recipient: 	[ self pieceCourante avancerVersLaDroite ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(1007@232) mouseDown red 4870245 nil]
		eventType: 	#mouseDown
		sourceMorph: 	a MaContainerMorph(448790528)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseDown->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	1
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(a MorphEventSubscription nil nil nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(1007@232) mouseDown red 4870245 nil]
		eventType: 	#mouseDown
		sourceMorph: 	a MaContainerMorph(448790528)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseDown->a Set(a MorphEventSubscription) )


MorphicEventHandler>>mouseDown:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(1007@232) mouseDown red 4870245 nil]
		sourceMorph: 	a MaContainerMorph(448790528)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseDown->a Set(a MorphEventSubscription) )


MaContainerMorph(Morph)>>mouseDown:
	Receiver: a MaContainerMorph(448790528)
	Arguments and temporary variables: 
		evt: 	[(1007@232) mouseDown red 4870245 nil]
	Receiver's instance variables: 
		bounds: 	(873.0@141.0) corner: (1273.0@641.0)
		owner: 	a MaWrapperMorph(683933696)
		submorphs: 	an Array(a MaScribbleMorph(272629760))
		fullBounds: 	(873.0@141.0) corner: (1273.0@641.0)
		color: 	Color transparent
		extension: 	a MorphExtension (473694208) [eventHandler = a MorphicEventHandler] ...etc...


MaContainerMorph(Morph)>>handleMouseDown:
	Receiver: a MaContainerMorph(448790528)
	Arguments and temporary variables: 
		anEvent: 	[(1007@232) mouseDown red 4870245 nil]
	Receiver's instance variables: 
		bounds: 	(873.0@141.0) corner: (1273.0@641.0)
		owner: 	a MaWrapperMorph(683933696)
		submorphs: 	an Array(a MaScribbleMorph(272629760))
		fullBounds: 	(873.0@141.0) corner: (1273.0@641.0)
		color: 	Color transparent
		extension: 	a MorphExtension (473694208) [eventHandler = a MorphicEventHandler] ...etc...


MouseButtonEvent>>sentTo:
	Receiver: [(1007@232) mouseDown red 4870245 nil]
	Arguments and temporary variables: 
		anObject: 	a MaContainerMorph(448790528)
	Receiver's instance variables: 
		timeStamp: 	4870245
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	4
		position: 	(1007@232)
		handler: 	a MaContainerMorph(448790528)
		wasHandled: 	true
		whichButton: 	4


MaContainerMorph(Morph)>>handleEvent:
	Receiver: a MaContainerMorph(448790528)
	Arguments and temporary variables: 
		anEvent: 	[(1007@232) mouseDown red 4870245 nil]
	Receiver's instance variables: 
		bounds: 	(873.0@141.0) corner: (1273.0@641.0)
		owner: 	a MaWrapperMorph(683933696)
		submorphs: 	an Array(a MaScribbleMorph(272629760))
		fullBounds: 	(873.0@141.0) corner: (1273.0@641.0)
		color: 	Color transparent
		extension: 	a MorphExtension (473694208) [eventHandler = a MorphicEventHandler] ...etc...


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1007@232) mouseDown red 4870245 nil]
		aMorph: 	a MaContainerMorph(448790528)
		globalPt: 	(1007@232)
		localEvt: 	[(1007@232) mouseDown red 4870245 nil]
		index: 	2
		child: 	a MaScribbleMorph(272629760)
		morphs: 	an Array(a MaScribbleMorph(272629760))
		handler: 	a MaContainerMorph(448790528)
		inside: 	false
		lastHandler: 	a SystemWindow(697040896)
	Receiver's instance variables: 
		lastType: 	#mouseDown
		lastDispatch: 	#dispatchMouseDown:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1007@232) mouseDown red 4870245 nil]
		aMorph: 	a MaContainerMorph(448790528)
	Receiver's instance variables: 
		lastType: 	#mouseDown
		lastDispatch: 	#dispatchMouseDown:with:


MaContainerMorph(Morph)>>processEvent:using:
	Receiver: a MaContainerMorph(448790528)
	Arguments and temporary variables: 
		anEvent: 	[(1007@232) mouseDown red 4870245 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(873.0@141.0) corner: (1273.0@641.0)
		owner: 	a MaWrapperMorph(683933696)
		submorphs: 	an Array(a MaScribbleMorph(272629760))
		fullBounds: 	(873.0@141.0) corner: (1273.0@641.0)
		color: 	Color transparent
		extension: 	a MorphExtension (473694208) [eventHandler = a MorphicEventHandler] ...etc...


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1007@232) mouseDown red 4870245 nil]
		aMorph: 	a MaWrapperMorph(683933696)
		globalPt: 	(1007@232)
		localEvt: 	[(1007@232) mouseDown red 4870245 nil]
		index: 	1
		child: 	a MaContainerMorph(448790528)
		morphs: 	an Array(a MaContainerMorph(448790528))
		handler: 	nil
		inside: 	nil
		lastHandler: 	a SystemWindow(697040896)
	Receiver's instance variables: 
		lastType: 	#mouseDown
		lastDispatch: 	#dispatchMouseDown:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1007@232) mouseDown red 4870245 nil]
		aMorph: 	a MaWrapperMorph(683933696)
	Receiver's instance variables: 
		lastType: 	#mouseDown
		lastDispatch: 	#dispatchMouseDown:with:


MaWrapperMorph(Morph)>>processEvent:using:
	Receiver: a MaWrapperMorph(683933696)
	Arguments and temporary variables: 
		anEvent: 	[(1007@232) mouseDown red 4870245 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(873.0@141.0) corner: (1273.0@641.0)
		owner: 	a SystemWindow(697040896)
		submorphs: 	an Array(a MaContainerMorph(448790528))
		fullBounds: 	(873.0@141.0) corner: (1273.0@641.0)
		color: 	Color white
		extension: 	a MorphExtension (266600448)
		app: 	a MaMorphicWindowApp


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1007@232) mouseDown red 4870245 nil]
		aMorph: 	a SystemWindow(697040896)
		globalPt: 	(1007@232)
		localEvt: 	[(1007@232) mouseDown red 4870245 nil]
		index: 	2
		child: 	a MaWrapperMorph(683933696)
		morphs: 	an Array(an AlignmentMorph(754712576) a MaWrapperMorph(683933696))
		handler: 	nil
		inside: 	nil
		lastHandler: 	a SystemWindow(697040896)
	Receiver's instance variables: 
		lastType: 	#mouseDown
		lastDispatch: 	#dispatchMouseDown:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1007@232) mouseDown red 4870245 nil]
		aMorph: 	a SystemWindow(697040896)
	Receiver's instance variables: 
		lastType: 	#mouseDown
		lastDispatch: 	#dispatchMouseDown:with:


SystemWindow(Morph)>>processEvent:using:
	Receiver: a SystemWindow(697040896)
	Arguments and temporary variables: 
		anEvent: 	[(1007@232) mouseDown red 4870245 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(868.0@113.0) corner: (1278.0@646.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	an Array(an AlignmentMorph(754712576) a MaWrapperMorph(683933696))
		fullBounds: 	(868@113) corner: (1278@646)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (866123776) [other:  (paneColor -> (Color r: 0.8230...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray
		model: 	nil
		open: 	false
		accessor: 	nil
		labelString: 	'Tetris Mines Douai'
		stripes: 	an Array(a Morph(715915264) a Morph(727711744))
		label: 	a LabelMorph(965476352)'Tetris Mines Douai'
		closeBox: 	a MultistateButtonMorph(968622080)
		collapseBox: 	a MultistateButtonMorph(508821504)
		activeOnlyOnTop: 	true
		paneMorphs: 	an Array(a MaWrapperMorph(683933696))
		collapsedFrame: 	nil
		fullFrame: 	(868.0@113.0) corner: (1278.0@646.0)
		isCollapsed: 	false
		menuBox: 	a MultistateButtonMorph(197132288)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(754712576)
		expandBox: 	nil
		embeddable: 	nil
		announcer: 	an Announcer
		menuBuilder: 	nil
		isResizeable: 	true


SystemWindow(Morph)>>processEvent:
	Receiver: a SystemWindow(697040896)
	Arguments and temporary variables: 
		anEvent: 	[(1007@232) mouseDown red 4870245 nil]
	Receiver's instance variables: 
		bounds: 	(868.0@113.0) corner: (1278.0@646.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	an Array(an AlignmentMorph(754712576) a MaWrapperMorph(683933696))
		fullBounds: 	(868@113) corner: (1278@646)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (866123776) [other:  (paneColor -> (Color r: 0.8230...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray
		model: 	nil
		open: 	false
		accessor: 	nil
		labelString: 	'Tetris Mines Douai'
		stripes: 	an Array(a Morph(715915264) a Morph(727711744))
		label: 	a LabelMorph(965476352)'Tetris Mines Douai'
		closeBox: 	a MultistateButtonMorph(968622080)
		collapseBox: 	a MultistateButtonMorph(508821504)
		activeOnlyOnTop: 	true
		paneMorphs: 	an Array(a MaWrapperMorph(683933696))
		collapsedFrame: 	nil
		fullFrame: 	(868.0@113.0) corner: (1278.0@646.0)
		isCollapsed: 	false
		menuBox: 	a MultistateButtonMorph(197132288)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(754712576)
		expandBox: 	nil
		embeddable: 	nil
		announcer: 	an Announcer
		menuBuilder: 	nil
		isResizeable: 	true


[ 
evt wasHandled: false.
self processEvent: evt ] in SystemWindow>>mouseDown:
	Receiver: a SystemWindow(697040896)
	Arguments and temporary variables: 
		evt: 	[(1007@232) mouseDown red 4870245 nil]
	Receiver's instance variables: 
		bounds: 	(868.0@113.0) corner: (1278.0@646.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	an Array(an AlignmentMorph(754712576) a MaWrapperMorph(683933696))
		fullBounds: 	(868@113) corner: (1278@646)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (866123776) [other:  (paneColor -> (Color r: 0.8230...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray
		model: 	nil
		open: 	false
		accessor: 	nil
		labelString: 	'Tetris Mines Douai'
		stripes: 	an Array(a Morph(715915264) a Morph(727711744))
		label: 	a LabelMorph(965476352)'Tetris Mines Douai'
		closeBox: 	a MultistateButtonMorph(968622080)
		collapseBox: 	a MultistateButtonMorph(508821504)
		activeOnlyOnTop: 	true
		paneMorphs: 	an Array(a MaWrapperMorph(683933696))
		collapsedFrame: 	nil
		fullFrame: 	(868.0@113.0) corner: (1278.0@646.0)
		isCollapsed: 	false
		menuBox: 	a MultistateButtonMorph(197132288)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(754712576)
		expandBox: 	nil
		embeddable: 	nil
		announcer: 	an Announcer
		menuBuilder: 	nil
		isResizeable: 	true


BlockClosure>>ensure:
	Receiver: [ 
evt wasHandled: false.
self processEvent: evt ]
	Arguments and temporary variables: 
		aBlock: 	[ self setProperty: #processingMouseDown toValue: false ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	SystemWindow>>mouseDown:
		startpc: 	192
		numArgs: 	0


SystemWindow>>mouseDown:
	Receiver: a SystemWindow(697040896)
	Arguments and temporary variables: 
		evt: 	[(1007@232) mouseDown red 4870245 nil]
	Receiver's instance variables: 
		bounds: 	(868.0@113.0) corner: (1278.0@646.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	an Array(an AlignmentMorph(754712576) a MaWrapperMorph(683933696))
		fullBounds: 	(868@113) corner: (1278@646)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (866123776) [other:  (paneColor -> (Color r: 0.8230...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray
		model: 	nil
		open: 	false
		accessor: 	nil
		labelString: 	'Tetris Mines Douai'
		stripes: 	an Array(a Morph(715915264) a Morph(727711744))
		label: 	a LabelMorph(965476352)'Tetris Mines Douai'
		closeBox: 	a MultistateButtonMorph(968622080)
		collapseBox: 	a MultistateButtonMorph(508821504)
		activeOnlyOnTop: 	true
		paneMorphs: 	an Array(a MaWrapperMorph(683933696))
		collapsedFrame: 	nil
		fullFrame: 	(868.0@113.0) corner: (1278.0@646.0)
		isCollapsed: 	false
		menuBox: 	a MultistateButtonMorph(197132288)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(754712576)
		expandBox: 	nil
		embeddable: 	nil
		announcer: 	an Announcer
		menuBuilder: 	nil
		isResizeable: 	true


SystemWindow(Morph)>>handleMouseDown:
	Receiver: a SystemWindow(697040896)
	Arguments and temporary variables: 
		anEvent: 	[(1007@232) mouseDown red 4870245 nil]
	Receiver's instance variables: 
		bounds: 	(868.0@113.0) corner: (1278.0@646.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	an Array(an AlignmentMorph(754712576) a MaWrapperMorph(683933696))
		fullBounds: 	(868@113) corner: (1278@646)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (866123776) [other:  (paneColor -> (Color r: 0.8230...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray
		model: 	nil
		open: 	false
		accessor: 	nil
		labelString: 	'Tetris Mines Douai'
		stripes: 	an Array(a Morph(715915264) a Morph(727711744))
		label: 	a LabelMorph(965476352)'Tetris Mines Douai'
		closeBox: 	a MultistateButtonMorph(968622080)
		collapseBox: 	a MultistateButtonMorph(508821504)
		activeOnlyOnTop: 	true
		paneMorphs: 	an Array(a MaWrapperMorph(683933696))
		collapsedFrame: 	nil
		fullFrame: 	(868.0@113.0) corner: (1278.0@646.0)
		isCollapsed: 	false
		menuBox: 	a MultistateButtonMorph(197132288)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(754712576)
		expandBox: 	nil
		embeddable: 	nil
		announcer: 	an Announcer
		menuBuilder: 	nil
		isResizeable: 	true


MouseButtonEvent>>sentTo:
	Receiver: [(1007@232) mouseDown red 4870245 nil]
	Arguments and temporary variables: 
		anObject: 	a SystemWindow(697040896)
	Receiver's instance variables: 
		timeStamp: 	4870245
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	4
		position: 	(1007@232)
		handler: 	a SystemWindow(697040896)
		wasHandled: 	false
		whichButton: 	4


SystemWindow(Morph)>>handleEvent:
	Receiver: a SystemWindow(697040896)
	Arguments and temporary variables: 
		anEvent: 	[(1007@232) mouseDown red 4870245 nil]
	Receiver's instance variables: 
		bounds: 	(868.0@113.0) corner: (1278.0@646.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	an Array(an AlignmentMorph(754712576) a MaWrapperMorph(683933696))
		fullBounds: 	(868@113) corner: (1278@646)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (866123776) [other:  (paneColor -> (Color r: 0.8230...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray
		model: 	nil
		open: 	false
		accessor: 	nil
		labelString: 	'Tetris Mines Douai'
		stripes: 	an Array(a Morph(715915264) a Morph(727711744))
		label: 	a LabelMorph(965476352)'Tetris Mines Douai'
		closeBox: 	a MultistateButtonMorph(968622080)
		collapseBox: 	a MultistateButtonMorph(508821504)
		activeOnlyOnTop: 	true
		paneMorphs: 	an Array(a MaWrapperMorph(683933696))
		collapsedFrame: 	nil
		fullFrame: 	(868.0@113.0) corner: (1278.0@646.0)
		isCollapsed: 	false
		menuBox: 	a MultistateButtonMorph(197132288)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(754712576)
		expandBox: 	nil
		embeddable: 	nil
		announcer: 	an Announcer
		menuBuilder: 	nil
		isResizeable: 	true


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1007@232) mouseDown red 4870245 nil]
		aMorph: 	a SystemWindow(697040896)
		globalPt: 	(1007@232)
		localEvt: 	[(1007@232) mouseDown red 4870245 nil]
		index: 	3
		child: 	a MaWrapperMorph(683933696)
		morphs: 	an Array(an AlignmentMorph(754712576) a MaWrapperMorph(683933696))
		handler: 	a SystemWindow(697040896)
		inside: 	nil
		lastHandler: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		lastType: 	#mouseDown
		lastDispatch: 	#dispatchMouseDown:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1007@232) mouseDown red 4870245 nil]
		aMorph: 	a SystemWindow(697040896)
	Receiver's instance variables: 
		lastType: 	#mouseDown
		lastDispatch: 	#dispatchMouseDown:with:


SystemWindow(Morph)>>processEvent:using:
	Receiver: a SystemWindow(697040896)
	Arguments and temporary variables: 
		anEvent: 	[(1007@232) mouseDown red 4870245 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(868.0@113.0) corner: (1278.0@646.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	an Array(an AlignmentMorph(754712576) a MaWrapperMorph(683933696))
		fullBounds: 	(868@113) corner: (1278@646)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (866123776) [other:  (paneColor -> (Color r: 0.8230...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray
		model: 	nil
		open: 	false
		accessor: 	nil
		labelString: 	'Tetris Mines Douai'
		stripes: 	an Array(a Morph(715915264) a Morph(727711744))
		label: 	a LabelMorph(965476352)'Tetris Mines Douai'
		closeBox: 	a MultistateButtonMorph(968622080)
		collapseBox: 	a MultistateButtonMorph(508821504)
		activeOnlyOnTop: 	true
		paneMorphs: 	an Array(a MaWrapperMorph(683933696))
		collapsedFrame: 	nil
		fullFrame: 	(868.0@113.0) corner: (1278.0@646.0)
		isCollapsed: 	false
		menuBox: 	a MultistateButtonMorph(197132288)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(754712576)
		expandBox: 	nil
		embeddable: 	nil
		announcer: 	an Announcer
		menuBuilder: 	nil
		isResizeable: 	true


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1007@232) mouseDown red 4870245 nil]
		aMorph: 	a WorldMorph(511705088) [world]
		globalPt: 	(1007@232)
		localEvt: 	[(1007@232) mouseDown red 4870245 nil]
		index: 	3
		child: 	a SystemWindow(697040896)
		morphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(697040896) a Nautilus...etc...
		handler: 	a WorldMorph(511705088) [world]
		inside: 	nil
		lastHandler: 	nil
	Receiver's instance variables: 
		lastType: 	#mouseDown
		lastDispatch: 	#dispatchMouseDown:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1007@232) mouseDown red 4870245 nil]
		aMorph: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		lastType: 	#mouseDown
		lastDispatch: 	#dispatchMouseDown:with:


WorldMorph(Morph)>>processEvent:using:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		anEvent: 	[(1007@232) mouseDown red 4870245 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@814)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(697040896) a Nauti...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph(Morph)>>processEvent:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		anEvent: 	[(1007@232) mouseDown red 4870245 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@814)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(697040896) a Nauti...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(1007@232) mouseDown red 4870245 nil]
		focusHolder: 	nil
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1007@232.0) corner: (1023@248.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a MaContainerMorph(448790528)
		keyboardFocus: 	a SystemWindow(697040896)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickDown]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1007@232) mouseDown red 4870245 nil]
		targetOffset: 	(134.0@91.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4870245 1007 232 4 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(1007@232) mouseDown red 4870245 nil]
	Receiver's instance variables: 
		bounds: 	(1007@232.0) corner: (1023@248.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a MaContainerMorph(448790528)
		keyboardFocus: 	a SystemWindow(697040896)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickDown]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1007@232) mouseDown red 4870245 nil]
		targetOffset: 	(134.0@91.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4870245 1007 232 4 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0



--- The full stack ---
TsBarre(Object)>>doesNotUnderstand: #terrain
[ :each | self terrain enlever: each ] in TsBarre(TsPiece)>>avancerVersLaDroite
OrderedCollection>>do:
TsBarre(TsPiece)>>avancerVersLaDroite
[ self pieceCourante avancerVersLaDroite ] in TsTetris>>initialize
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>mouseDown:fromMorph:
MaContainerMorph(Morph)>>mouseDown:
MaContainerMorph(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
MaContainerMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
MaContainerMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
MaWrapperMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
SystemWindow(Morph)>>processEvent:
[ 
evt wasHandled: false.
self processEvent: evt ] in SystemWindow>>mouseDown:
BlockClosure>>ensure:
SystemWindow>>mouseDown:
SystemWindow(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
SystemWindow(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
17 February 2015 10:55:55.903339 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

MyMorph>>keyStroke:
	Receiver: a MyMorph(158072832)
	Arguments and temporary variables: 
		evt: 	[keystroke 's']
	Receiver's instance variables: 
		bounds: 	(23@442.0) corner: (323@742.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(23@442.0) corner: (323@742.0)
		color: 	Color blue
		extension: 	a MorphExtension (945029120) [other:  (lastPosition -> (41@184.0)) (...etc...


MyMorph(Morph)>>handleKeystroke:
	Receiver: a MyMorph(158072832)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
	Receiver's instance variables: 
		bounds: 	(23@442.0) corner: (323@742.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(23@442.0) corner: (323@742.0)
		color: 	Color blue
		extension: 	a MorphExtension (945029120) [other:  (lastPosition -> (41@184.0)) (...etc...


KeyboardEvent>>sentTo:
	Receiver: [keystroke 's']
	Arguments and temporary variables: 
		anObject: 	a MyMorph(158072832)
	Receiver's instance variables: 
		timeStamp: 	6165347
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	0
		position: 	(291@584.0)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	115
		charCode: 	115
		scanCode: 	1


MyMorph(Morph)>>handleEvent:
	Receiver: a MyMorph(158072832)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
	Receiver's instance variables: 
		bounds: 	(23@442.0) corner: (323@742.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(23@442.0) corner: (323@742.0)
		color: 	Color blue
		extension: 	a MorphExtension (945029120) [other:  (lastPosition -> (41@184.0)) (...etc...


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
		aMorph: 	a MyMorph(158072832)
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#keystroke
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
		aMorph: 	a MyMorph(158072832)
	Receiver's instance variables: 
		lastType: 	#keystroke
		lastDispatch: 	#dispatchDefault:with:


MyMorph(Morph)>>processEvent:using:
	Receiver: a MyMorph(158072832)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(23@442.0) corner: (323@742.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(23@442.0) corner: (323@742.0)
		color: 	Color blue
		extension: 	a MorphExtension (945029120) [other:  (lastPosition -> (41@184.0)) (...etc...


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
		aMorph: 	a WorldMorph(511705088) [world]
		localEvt: 	[keystroke 's']
		index: 	2
		child: 	a MyMorph(158072832)
		morphs: 	an Array(a TaskbarMorph(984088576) a MyMorph(158072832) a NautilusWindo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#keystroke
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
		aMorph: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		lastType: 	#keystroke
		lastDispatch: 	#dispatchDefault:with:


WorldMorph(Morph)>>processEvent:using:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@814)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a MyMorph(158072832) a NautilusWi...etc...
		fullBounds: 	(0@0) corner: (1440@814)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph(Morph)>>processEvent:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@814)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a MyMorph(158072832) a NautilusWi...etc...
		fullBounds: 	(0@0) corner: (1440@814)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
		focusHolder: 	nil
		aBlock: 	[ self keyboardFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(291@584.0) corner: (307@600.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(291@584.0) corner: (307@600.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(291@584) mouseOver nil nil]
		targetOffset: 	(-208@ -211.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6165115 291 584 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
	Receiver's instance variables: 
		bounds: 	(291@584.0) corner: (307@600.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(291@584.0) corner: (307@600.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(291@584) mouseOver nil nil]
		targetOffset: 	(-208@ -211.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6165115 291 584 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
		evt: 	[keystroke 's']
	Receiver's instance variables: 
		bounds: 	(291@584.0) corner: (307@600.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(291@584.0) corner: (307@600.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(291@584) mouseOver nil nil]
		targetOffset: 	(-208@ -211.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6165115 291 584 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[keystroke 's']
		evtBuf: 	#(2 6165347 115 0 0 115 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	(291@584.0) corner: (307@600.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(291@584.0) corner: (307@600.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(291@584) mouseOver nil nil]
		targetOffset: 	(-208@ -211.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6165115 291 584 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1440@814)
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(146276352))(a SearchMorp...etc...
		lastStepTime: 	6165325
		lastStepMessage: 	nil
		lastCycleTime: 	6165347
		alarms: 	a Heap()
		lastAlarmTime: 	6165325
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1440@814)
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(146276352))(a SearchMorp...etc...
		lastStepTime: 	6165325
		lastStepMessage: 	nil
		lastCycleTime: 	6165347
		alarms: 	a Heap()
		lastAlarmTime: 	6165325
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1440@814)
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(146276352))(a SearchMorp...etc...
		lastStepTime: 	6165325
		lastStepMessage: 	nil
		lastCycleTime: 	6165347
		alarms: 	a Heap()
		lastAlarmTime: 	6165325
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1440@814)
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(146276352))(a SearchMorp...etc...
		lastStepTime: 	6165325
		lastStepMessage: 	nil
		lastCycleTime: 	6165347
		alarms: 	a Heap()
		lastAlarmTime: 	6165325
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@814)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a MyMorph(158072832) a NautilusWi...etc...
		fullBounds: 	(0@0) corner: (1440@814)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
World doOneCycle.
Processor yield.
false ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
MyMorph>>keyStroke:
MyMorph(Morph)>>handleKeystroke:
KeyboardEvent>>sentTo:
MyMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MyMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
17 February 2015 10:56:48.448851 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

MorphicEventHandler(Object)>>haltOnce
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#keyStroke->a Set(a MorphEventSubscription) )


MorphicEventHandler>>keyStroke:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[keystroke '<backspace>']
		sourceMorph: 	a PluggableTextMorphWithLimits(1064566784)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#keyStroke->a Set(a MorphEventSubscription) )


PluggableTextMorphWithLimits(PluggableTextMorph)>>keyStroke:
	Receiver: a PluggableTextMorphWithLimits(1064566784)
	Arguments and temporary variables: 
		evt: 	[keystroke '<backspace>']
	Receiver's instance variables: 
		bounds: 	(406.0@436.0) corner: (1222.0@713.0)
		owner: 	a MultipleMethodsEditor(290193408)
		submorphs: 	an Array(an AlphaImageMorph(170655744) a TransformMorph(683671552))
		fullBounds: 	(406@436) corner: (1222@713)
		color: 	Color white
		extension: 	a MorphExtension (256114688) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(32505856)
		scroller: 	a TransformMorph(683671552)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(906231808)
		textMorph: 	a TextMorphForEditView(289406976)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(41 to: 55)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	nil
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(170655744)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(289406976)
	Arguments and temporary variables: 
		evt: 	[keystroke '<backspace>']
		view: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (808@50)
		owner: 	a TransformMorph(683671552)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (808@50)
		color: 	Color black
		extension: 	a MorphExtension (344195072) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'keyStroke: event fromMorph: sourceMorph
self haltOnce.
	^self...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorphWithLimits(1064566784)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(289406976)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<backspace>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (808@50)
		owner: 	a TransformMorph(683671552)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (808@50)
		color: 	Color black
		extension: 	a MorphExtension (344195072) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'keyStroke: event fromMorph: sourceMorph
self haltOnce.
	^self...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorphWithLimits(1064566784)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<backspace>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(289406976)
	Receiver's instance variables: 
		timeStamp: 	6217896
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	0
		position: 	(2@39.0)
		handler: 	nil
		wasHandled: 	false
		keyValue: 	8
		charCode: 	8
		scanCode: 	51


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(289406976)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<backspace>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (808@50)
		owner: 	a TransformMorph(683671552)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (808@50)
		color: 	Color black
		extension: 	a MorphExtension (344195072) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'keyStroke: event fromMorph: sourceMorph
self haltOnce.
	^self...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorphWithLimits(1064566784)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(289406976)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<backspace>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (808@50)
		owner: 	a TransformMorph(683671552)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (808@50)
		color: 	Color black
		extension: 	a MorphExtension (344195072) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'keyStroke: event fromMorph: sourceMorph
self haltOnce.
	^self...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorphWithLimits(1064566784)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<backspace>']
		focusHolder: 	a TextMorphForEditView(289406976)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(404@467.0) corner: (420@483.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(404@467.0) corner: (420@483.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(289406976)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(412@476) mouseOver nil nil]
		targetOffset: 	(2@28)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6217451 412 476 0 0 0 1)
		lastKeyScanCode: 	51
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@814)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a NautilusWindow(998506496) a MyM...etc...
		fullBounds: 	(0@0) corner: (1440@814)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[keystroke '<backspace>']
		focusHolder: 	a TextMorphForEditView(289406976)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(404@467.0) corner: (420@483.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(404@467.0) corner: (420@483.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(289406976)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(412@476) mouseOver nil nil]
		targetOffset: 	(2@28)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6217451 412 476 0 0 0 1)
		lastKeyScanCode: 	51
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<backspace>']
		focusHolder: 	a TextMorphForEditView(289406976)
		aBlock: 	[ self keyboardFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(404@467.0) corner: (420@483.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(404@467.0) corner: (420@483.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(289406976)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(412@476) mouseOver nil nil]
		targetOffset: 	(2@28)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6217451 412 476 0 0 0 1)
		lastKeyScanCode: 	51
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<backspace>']
	Receiver's instance variables: 
		bounds: 	(404@467.0) corner: (420@483.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(404@467.0) corner: (420@483.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(289406976)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(412@476) mouseOver nil nil]
		targetOffset: 	(2@28)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6217451 412 476 0 0 0 1)
		lastKeyScanCode: 	51
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<backspace>']
		evt: 	[keystroke '<backspace>']
	Receiver's instance variables: 
		bounds: 	(404@467.0) corner: (420@483.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(404@467.0) corner: (420@483.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(289406976)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(412@476) mouseOver nil nil]
		targetOffset: 	(2@28)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6217451 412 476 0 0 0 1)
		lastKeyScanCode: 	51
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[keystroke '<backspace>']
		evtBuf: 	#(2 6217896 8 0 0 8 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	(404@467.0) corner: (420@483.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(404@467.0) corner: (420@483.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(289406976)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(412@476) mouseOver nil nil]
		targetOffset: 	(2@28)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6217451 412 476 0 0 0 1)
		lastKeyScanCode: 	51
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1440@814)
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(964427776))(a DropList...etc...
		lastStepTime: 	6217878
		lastStepMessage: 	nil
		lastCycleTime: 	6217899
		alarms: 	a Heap()
		lastAlarmTime: 	6217878
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1440@814)
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(964427776))(a DropList...etc...
		lastStepTime: 	6217878
		lastStepMessage: 	nil
		lastCycleTime: 	6217899
		alarms: 	a Heap()
		lastAlarmTime: 	6217878
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1440@814)
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(964427776))(a DropList...etc...
		lastStepTime: 	6217878
		lastStepMessage: 	nil
		lastCycleTime: 	6217899
		alarms: 	a Heap()
		lastAlarmTime: 	6217878
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1440@814)
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(964427776))(a DropList...etc...
		lastStepTime: 	6217878
		lastStepMessage: 	nil
		lastCycleTime: 	6217899
		alarms: 	a Heap()
		lastAlarmTime: 	6217878
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@814)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a NautilusWindow(998506496) a MyM...etc...
		fullBounds: 	(0@0) corner: (1440@814)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
World doOneCycle.
Processor yield.
false ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
MorphicEventHandler(Object)>>haltOnce
MorphicEventHandler>>keyStroke:fromMorph:
PluggableTextMorphWithLimits(PluggableTextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
17 February 2015 11:00:20.94246 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

MyMorph>>keyStroke:
	Receiver: a MyMorph(158072832)
	Arguments and temporary variables: 
		evt: 	[keystroke ',']
	Receiver's instance variables: 
		bounds: 	(23@442.0) corner: (323@742.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(23@442.0) corner: (323@742.0)
		color: 	Color blue
		extension: 	a MorphExtension (945029120) [other:  (lastPosition -> (41@184.0)) (...etc...


MyMorph(Morph)>>handleKeystroke:
	Receiver: a MyMorph(158072832)
	Arguments and temporary variables: 
		anEvent: 	[keystroke ',']
	Receiver's instance variables: 
		bounds: 	(23@442.0) corner: (323@742.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(23@442.0) corner: (323@742.0)
		color: 	Color blue
		extension: 	a MorphExtension (945029120) [other:  (lastPosition -> (41@184.0)) (...etc...


KeyboardEvent>>sentTo:
	Receiver: [keystroke ',']
	Arguments and temporary variables: 
		anObject: 	a MyMorph(158072832)
	Receiver's instance variables: 
		timeStamp: 	6430399
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	0
		position: 	(137@670.0)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	44
		charCode: 	44
		scanCode: 	43


MyMorph(Morph)>>handleEvent:
	Receiver: a MyMorph(158072832)
	Arguments and temporary variables: 
		anEvent: 	[keystroke ',']
	Receiver's instance variables: 
		bounds: 	(23@442.0) corner: (323@742.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(23@442.0) corner: (323@742.0)
		color: 	Color blue
		extension: 	a MorphExtension (945029120) [other:  (lastPosition -> (41@184.0)) (...etc...


MyMorph(Morph)>>handleFocusEvent:
	Receiver: a MyMorph(158072832)
	Arguments and temporary variables: 
		anEvent: 	[keystroke ',']
	Receiver's instance variables: 
		bounds: 	(23@442.0) corner: (323@742.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(23@442.0) corner: (323@742.0)
		color: 	Color blue
		extension: 	a MorphExtension (945029120) [other:  (lastPosition -> (41@184.0)) (...etc...


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke ',']
		focusHolder: 	a MyMorph(158072832)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(137@670.0) corner: (153@686.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(137@670.0) corner: (153@686.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a MyMorph(158072832)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(137@670) mouseOver nil nil]
		targetOffset: 	(-114@ -228.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	false
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6428931 137 670 0 0 0 1)
		lastKeyScanCode: 	43
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@814)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a MyMorph(158072832) a NautilusWi...etc...
		fullBounds: 	(0@0) corner: (1440@814)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[keystroke ',']
		focusHolder: 	a MyMorph(158072832)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(137@670.0) corner: (153@686.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(137@670.0) corner: (153@686.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a MyMorph(158072832)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(137@670) mouseOver nil nil]
		targetOffset: 	(-114@ -228.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	false
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6428931 137 670 0 0 0 1)
		lastKeyScanCode: 	43
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke ',']
		focusHolder: 	a MyMorph(158072832)
		aBlock: 	[ self keyboardFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(137@670.0) corner: (153@686.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(137@670.0) corner: (153@686.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a MyMorph(158072832)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(137@670) mouseOver nil nil]
		targetOffset: 	(-114@ -228.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	false
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6428931 137 670 0 0 0 1)
		lastKeyScanCode: 	43
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke ',']
	Receiver's instance variables: 
		bounds: 	(137@670.0) corner: (153@686.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(137@670.0) corner: (153@686.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a MyMorph(158072832)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(137@670) mouseOver nil nil]
		targetOffset: 	(-114@ -228.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	false
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6428931 137 670 0 0 0 1)
		lastKeyScanCode: 	43
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke ',']
		evt: 	[keystroke ',']
	Receiver's instance variables: 
		bounds: 	(137@670.0) corner: (153@686.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(137@670.0) corner: (153@686.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a MyMorph(158072832)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(137@670) mouseOver nil nil]
		targetOffset: 	(-114@ -228.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	false
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6428931 137 670 0 0 0 1)
		lastKeyScanCode: 	43
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[keystroke ',']
		evtBuf: 	#(2 6430399 44 0 0 44 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	(137@670.0) corner: (153@686.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(137@670.0) corner: (153@686.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a MyMorph(158072832)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(137@670) mouseOver nil nil]
		targetOffset: 	(-114@ -228.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	false
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6428931 137 670 0 0 0 1)
		lastKeyScanCode: 	43
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1440@814)
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> 3PButton(#browseInstVars 429654016))(3...etc...
		lastStepTime: 	6430378
		lastStepMessage: 	nil
		lastCycleTime: 	6430399
		alarms: 	a Heap()
		lastAlarmTime: 	6430378
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1440@814)
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> 3PButton(#browseInstVars 429654016))(3...etc...
		lastStepTime: 	6430378
		lastStepMessage: 	nil
		lastCycleTime: 	6430399
		alarms: 	a Heap()
		lastAlarmTime: 	6430378
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1440@814)
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> 3PButton(#browseInstVars 429654016))(3...etc...
		lastStepTime: 	6430378
		lastStepMessage: 	nil
		lastCycleTime: 	6430399
		alarms: 	a Heap()
		lastAlarmTime: 	6430378
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1440@814)
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> 3PButton(#browseInstVars 429654016))(3...etc...
		lastStepTime: 	6430378
		lastStepMessage: 	nil
		lastCycleTime: 	6430399
		alarms: 	a Heap()
		lastAlarmTime: 	6430378
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@814)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a MyMorph(158072832) a NautilusWi...etc...
		fullBounds: 	(0@0) corner: (1440@814)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
World doOneCycle.
Processor yield.
false ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
MyMorph>>keyStroke:
MyMorph(Morph)>>handleKeystroke:
KeyboardEvent>>sentTo:
MyMorph(Morph)>>handleEvent:
MyMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
17 February 2015 11:00:28.244481 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

MyMorph>>keyStroke:
	Receiver: a MyMorph(158072832)
	Arguments and temporary variables: 
		evt: 	[keystroke 'f']
	Receiver's instance variables: 
		bounds: 	(23@442.0) corner: (323@742.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(23@442.0) corner: (323@742.0)
		color: 	Color blue
		extension: 	a MorphExtension (945029120) [other:  (lastPosition -> (41@184.0)) (...etc...


MyMorph(Morph)>>handleKeystroke:
	Receiver: a MyMorph(158072832)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'f']
	Receiver's instance variables: 
		bounds: 	(23@442.0) corner: (323@742.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(23@442.0) corner: (323@742.0)
		color: 	Color blue
		extension: 	a MorphExtension (945029120) [other:  (lastPosition -> (41@184.0)) (...etc...


KeyboardEvent>>sentTo:
	Receiver: [keystroke 'f']
	Arguments and temporary variables: 
		anObject: 	a MyMorph(158072832)
	Receiver's instance variables: 
		timeStamp: 	6437680
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	0
		position: 	(211@623.0)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	102
		charCode: 	102
		scanCode: 	3


MyMorph(Morph)>>handleEvent:
	Receiver: a MyMorph(158072832)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'f']
	Receiver's instance variables: 
		bounds: 	(23@442.0) corner: (323@742.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(23@442.0) corner: (323@742.0)
		color: 	Color blue
		extension: 	a MorphExtension (945029120) [other:  (lastPosition -> (41@184.0)) (...etc...


MyMorph(Morph)>>handleFocusEvent:
	Receiver: a MyMorph(158072832)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'f']
	Receiver's instance variables: 
		bounds: 	(23@442.0) corner: (323@742.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(23@442.0) corner: (323@742.0)
		color: 	Color blue
		extension: 	a MorphExtension (945029120) [other:  (lastPosition -> (41@184.0)) (...etc...


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'f']
		focusHolder: 	a MyMorph(158072832)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(211@623.0) corner: (227@639.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(211@623.0) corner: (227@639.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a MyMorph(158072832)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(211@623) mouseOver nil nil]
		targetOffset: 	(155.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6435891 211 623 0 0 0 1)
		lastKeyScanCode: 	3
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@814)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a MyMorph(158072832) a NautilusWi...etc...
		fullBounds: 	(0@0) corner: (1440@814)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[keystroke 'f']
		focusHolder: 	a MyMorph(158072832)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(211@623.0) corner: (227@639.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(211@623.0) corner: (227@639.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a MyMorph(158072832)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(211@623) mouseOver nil nil]
		targetOffset: 	(155.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6435891 211 623 0 0 0 1)
		lastKeyScanCode: 	3
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'f']
		focusHolder: 	a MyMorph(158072832)
		aBlock: 	[ self keyboardFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(211@623.0) corner: (227@639.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(211@623.0) corner: (227@639.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a MyMorph(158072832)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(211@623) mouseOver nil nil]
		targetOffset: 	(155.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6435891 211 623 0 0 0 1)
		lastKeyScanCode: 	3
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'f']
	Receiver's instance variables: 
		bounds: 	(211@623.0) corner: (227@639.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(211@623.0) corner: (227@639.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a MyMorph(158072832)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(211@623) mouseOver nil nil]
		targetOffset: 	(155.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6435891 211 623 0 0 0 1)
		lastKeyScanCode: 	3
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'f']
		evt: 	[keystroke 'f']
	Receiver's instance variables: 
		bounds: 	(211@623.0) corner: (227@639.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(211@623.0) corner: (227@639.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a MyMorph(158072832)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(211@623) mouseOver nil nil]
		targetOffset: 	(155.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6435891 211 623 0 0 0 1)
		lastKeyScanCode: 	3
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[keystroke 'f']
		evtBuf: 	#(2 6437680 102 0 0 102 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	(211@623.0) corner: (227@639.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(211@623.0) corner: (227@639.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a MyMorph(158072832)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(211@623) mouseOver nil nil]
		targetOffset: 	(155.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6435891 211 623 0 0 0 1)
		lastKeyScanCode: 	3
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1440@814)
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> 3PButton(#toggleSelected 748158976))(3...etc...
		lastStepTime: 	6437671
		lastStepMessage: 	nil
		lastCycleTime: 	6437692
		alarms: 	a Heap()
		lastAlarmTime: 	6437671
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1440@814)
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> 3PButton(#toggleSelected 748158976))(3...etc...
		lastStepTime: 	6437671
		lastStepMessage: 	nil
		lastCycleTime: 	6437692
		alarms: 	a Heap()
		lastAlarmTime: 	6437671
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1440@814)
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> 3PButton(#toggleSelected 748158976))(3...etc...
		lastStepTime: 	6437671
		lastStepMessage: 	nil
		lastCycleTime: 	6437692
		alarms: 	a Heap()
		lastAlarmTime: 	6437671
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1440@814)
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> 3PButton(#toggleSelected 748158976))(3...etc...
		lastStepTime: 	6437671
		lastStepMessage: 	nil
		lastCycleTime: 	6437692
		alarms: 	a Heap()
		lastAlarmTime: 	6437671
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@814)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a MyMorph(158072832) a NautilusWi...etc...
		fullBounds: 	(0@0) corner: (1440@814)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
World doOneCycle.
Processor yield.
false ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
MyMorph>>keyStroke:
MyMorph(Morph)>>handleKeystroke:
KeyboardEvent>>sentTo:
MyMorph(Morph)>>handleEvent:
MyMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
17 February 2015 11:09:36.088539 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

TsContainerWithKeyboardSupport>>handlesKeyboard:
	Receiver: a TsContainerWithKeyboardSupport(24903680)
	Arguments and temporary variables: 
		evt: 	[keyUp '<Cmd- >']
	Receiver's instance variables: 
		bounds: 	(339.0@514.0) corner: (639.0@814.0)
		owner: 	a SystemWindow(648544256)
		submorphs: 	#()
		fullBounds: 	(339.0@514.0) corner: (639.0@814.0)
		color: 	Color white
		extension: 	a MorphExtension (62128128)
		actionDictionary: 	a Dictionary()


TsContainerWithKeyboardSupport(Morph)>>handlesKeyUp:
	Receiver: a TsContainerWithKeyboardSupport(24903680)
	Arguments and temporary variables: 
		evt: 	[keyUp '<Cmd- >']
	Receiver's instance variables: 
		bounds: 	(339.0@514.0) corner: (639.0@814.0)
		owner: 	a SystemWindow(648544256)
		submorphs: 	#()
		fullBounds: 	(339.0@514.0) corner: (639.0@814.0)
		color: 	Color white
		extension: 	a MorphExtension (62128128)
		actionDictionary: 	a Dictionary()


TsContainerWithKeyboardSupport(Morph)>>handleKeyUp:
	Receiver: a TsContainerWithKeyboardSupport(24903680)
	Arguments and temporary variables: 
		anEvent: 	[keyUp '<Cmd- >']
	Receiver's instance variables: 
		bounds: 	(339.0@514.0) corner: (639.0@814.0)
		owner: 	a SystemWindow(648544256)
		submorphs: 	#()
		fullBounds: 	(339.0@514.0) corner: (639.0@814.0)
		color: 	Color white
		extension: 	a MorphExtension (62128128)
		actionDictionary: 	a Dictionary()


KeyboardEvent>>sentTo:
	Receiver: [keyUp '<Cmd- >']
	Arguments and temporary variables: 
		anObject: 	a TsContainerWithKeyboardSupport(24903680)
	Receiver's instance variables: 
		timeStamp: 	6985527
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#keyUp
		buttons: 	64
		position: 	(601@637.0)
		handler: 	nil
		wasHandled: 	false
		keyValue: 	2
		charCode: 	0
		scanCode: 	2


TsContainerWithKeyboardSupport(Morph)>>handleEvent:
	Receiver: a TsContainerWithKeyboardSupport(24903680)
	Arguments and temporary variables: 
		anEvent: 	[keyUp '<Cmd- >']
	Receiver's instance variables: 
		bounds: 	(339.0@514.0) corner: (639.0@814.0)
		owner: 	a SystemWindow(648544256)
		submorphs: 	#()
		fullBounds: 	(339.0@514.0) corner: (639.0@814.0)
		color: 	Color white
		extension: 	a MorphExtension (62128128)
		actionDictionary: 	a Dictionary()


TsContainerWithKeyboardSupport(Morph)>>handleFocusEvent:
	Receiver: a TsContainerWithKeyboardSupport(24903680)
	Arguments and temporary variables: 
		anEvent: 	[keyUp '<Cmd- >']
	Receiver's instance variables: 
		bounds: 	(339.0@514.0) corner: (639.0@814.0)
		owner: 	a SystemWindow(648544256)
		submorphs: 	#()
		fullBounds: 	(339.0@514.0) corner: (639.0@814.0)
		color: 	Color white
		extension: 	a MorphExtension (62128128)
		actionDictionary: 	a Dictionary()


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keyUp '<Cmd- >']
		focusHolder: 	a TsContainerWithKeyboardSupport(24903680)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(601@637.0) corner: (617@653.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TsContainerWithKeyboardSupport(24903680)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(601@637) mouseOver nil nil]
		targetOffset: 	(278@173)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6982684 601 637 0 0 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@814)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(648544256) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[keyUp '<Cmd- >']
		focusHolder: 	a TsContainerWithKeyboardSupport(24903680)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(601@637.0) corner: (617@653.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TsContainerWithKeyboardSupport(24903680)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(601@637) mouseOver nil nil]
		targetOffset: 	(278@173)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6982684 601 637 0 0 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keyUp '<Cmd- >']
		focusHolder: 	a TsContainerWithKeyboardSupport(24903680)
		aBlock: 	[ self keyboardFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(601@637.0) corner: (617@653.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TsContainerWithKeyboardSupport(24903680)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(601@637) mouseOver nil nil]
		targetOffset: 	(278@173)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6982684 601 637 0 0 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keyUp '<Cmd- >']
	Receiver's instance variables: 
		bounds: 	(601@637.0) corner: (617@653.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TsContainerWithKeyboardSupport(24903680)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(601@637) mouseOver nil nil]
		targetOffset: 	(278@173)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6982684 601 637 0 0 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keyUp '<Cmd- >']
		evt: 	[keyUp '<Cmd- >']
	Receiver's instance variables: 
		bounds: 	(601@637.0) corner: (617@653.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TsContainerWithKeyboardSupport(24903680)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(601@637) mouseOver nil nil]
		targetOffset: 	(278@173)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6982684 601 637 0 0 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[keyUp '<Cmd- >']
		evtBuf: 	#(2 6985527 2 2 8 0 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	(601@637.0) corner: (617@653.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TsContainerWithKeyboardSupport(24903680)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(601@637) mouseOver nil nil]
		targetOffset: 	(278@173)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6982684 601 637 0 0 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1440@814)
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(595853312))(a Spec...etc...
		lastStepTime: 	6985506
		lastStepMessage: 	nil
		lastCycleTime: 	6985527
		alarms: 	a Heap()
		lastAlarmTime: 	6985506
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1440@814)
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(595853312))(a Spec...etc...
		lastStepTime: 	6985506
		lastStepMessage: 	nil
		lastCycleTime: 	6985527
		alarms: 	a Heap()
		lastAlarmTime: 	6985506
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1440@814)
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(595853312))(a Spec...etc...
		lastStepTime: 	6985506
		lastStepMessage: 	nil
		lastCycleTime: 	6985527
		alarms: 	a Heap()
		lastAlarmTime: 	6985506
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1440@814)
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(595853312))(a Spec...etc...
		lastStepTime: 	6985506
		lastStepMessage: 	nil
		lastCycleTime: 	6985527
		alarms: 	a Heap()
		lastAlarmTime: 	6985506
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@814)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(648544256) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
World doOneCycle.
Processor yield.
false ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
TsContainerWithKeyboardSupport>>handlesKeyboard:
TsContainerWithKeyboardSupport(Morph)>>handlesKeyUp:
TsContainerWithKeyboardSupport(Morph)>>handleKeyUp:
KeyboardEvent>>sentTo:
TsContainerWithKeyboardSupport(Morph)>>handleEvent:
TsContainerWithKeyboardSupport(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Character class>>leftArrow
17 February 2015 11:17:20.076469 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

Character class(Object)>>doesNotUnderstand: #leftArrow
	Receiver: Character
	Arguments and temporary variables: 
		aMessage: 	leftArrow
		exception: 	MessageNotUnderstood: Character class>>leftArrow
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#<->Character>>#< #=->Character>>#= #>->Characte...etc...
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	#('value')
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Character
		classPool: 	a Dictionary(#CharacterTable->{Character null. Character home. Chara...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-BasicObjects'
		traitComposition: 	{}
		localSelectors: 	nil


TsTetris>>initialize
	Receiver: a TsTetris
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a TsContainerWithKeyboardSupport(118226944)
		terrain: 	a TsTerrain
		pieceCourante: 	nil
		affichage: 	a TsAfficheurTerrain
		process: 	nil


TsTetris class(Behavior)>>new
	Receiver: TsTetris
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	MaComposite
		methodDict: 	a MethodDictionary(#basicStart->TsTetris>>#basicStart #basicStop->T...etc...
		format: 	140
		layout: 	a FixedLayout
		instanceVariables: 	#(#terrain #pieceCourante #affichage #process)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#TsTetris
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Tetris
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'tetris := TsTetris new.'
		itsSelection: 	a Text for 'tetris := TsTetris new.'
		itsSelectionString: 	'tetris := TsTetris new.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ tetris := TsTetris new
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(794034176)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(794034176)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[ textMorph editor evaluateSelection ] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(1007681536)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(319.0@543.0) corner: (759.0@710.0)
		owner: 	a SystemWindow(899678208)
		submorphs: 	an Array(a ScrollBar(1047527424) a TransformMorph(946077696))
		fullBounds: 	(319@543) corner: (759@710)
		color: 	Color white
		extension: 	a MorphExtension (772800512) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1047527424)
		scroller: 	a TransformMorph(946077696)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(963641344)
		textMorph: 	a TextMorphForEditView(794034176)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(24 to: 23)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


[ result := editBlock value ] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(1007681536)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph editor evaluateSelection ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(319.0@543.0) corner: (759.0@710.0)
		owner: 	a SystemWindow(899678208)
		submorphs: 	an Array(a ScrollBar(1047527424) a TransformMorph(946077696))
		fullBounds: 	(319@543) corner: (759@710)
		color: 	Color white
		extension: 	a MorphExtension (772800512) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1047527424)
		scroller: 	a TransformMorph(946077696)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(963641344)
		textMorph: 	a TextMorphForEditView(794034176)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(24 to: 23)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(794034176)
	Arguments and temporary variables: 
		editBlock: 	[ result := editBlock value ]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (419@226)
		owner: 	a TransformMorph(946077696)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (419@226)
		color: 	Color black
		extension: 	a MorphExtension (854851584) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'tetris := TsTetris new.
tetris start.
tetris stop.


tetris n...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(1007681536)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(1007681536)
	Arguments and temporary variables: 
		result: 	nil
		editBlock: 	[ textMorph editor evaluateSelection ]
	Receiver's instance variables: 
		bounds: 	(319.0@543.0) corner: (759.0@710.0)
		owner: 	a SystemWindow(899678208)
		submorphs: 	an Array(a ScrollBar(1047527424) a TransformMorph(946077696))
		fullBounds: 	(319@543) corner: (759@710)
		color: 	Color white
		extension: 	a MorphExtension (772800512) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1047527424)
		scroller: 	a TransformMorph(946077696)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(963641344)
		textMorph: 	a TextMorphForEditView(794034176)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(24 to: 23)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(1007681536)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(319.0@543.0) corner: (759.0@710.0)
		owner: 	a SystemWindow(899678208)
		submorphs: 	an Array(a ScrollBar(1047527424) a TransformMorph(946077696))
		fullBounds: 	(319@543) corner: (759@710)
		color: 	Color white
		extension: 	a MorphExtension (772800512) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1047527424)
		scroller: 	a TransformMorph(946077696)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(963641344)
		textMorph: 	a TextMorphForEditView(794034176)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(24 to: 23)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


[ :morph | morph doIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: SmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		morph: 	a PluggableTextMorph(1007681536)
	Receiver's instance variables: 
		superclass: 	TextEditor
		methodDict: 	a MethodDictionary(#argAdvance:->SmalltalkEditor>>#argAdvance: #bro...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SmalltalkEditor
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Text-Edition'
		traitComposition: 	{}
		localSelectors: 	nil
		cmdActions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop...etc...
		shiftCmdActions: 	#(#noop: #argAdvance: #noop: #compareToClipboard: #debugIt: #m...etc...


BlockClosure>>cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(1007681536)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	157
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(1007681536)
		secondArg: 	a PluggableTextMorph(1007681536)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	157
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(1007681536)
		secondArg: 	a PluggableTextMorph(1007681536)
		thirdArg: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	157
		numArgs: 	1


KMCategoryBinding>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#doIt on Cmd + D do [ :morph | morph doIt ]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(1007681536)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(1007681536)


[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Cmd + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		l: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[ :l | l completeMatch: self buffer: aBuffer ]
		index: 	1
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Cmd + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #doIt on Cmd + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
		entry: 	#doIt on Cmd + D do [ :morph | morph doIt ]

	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


Set>>do:
	Receiver: a Set(#inspectIt on Cmd + I do [ :morph | morph inspectIt ]
 #sendersOfIt on Cmd + N do [ ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andD...etc...
		index: 	9
		each: 	#doIt on Cmd + D do [ :morph | morph doIt ]

	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(#inspectIt on Cmd + I do [ :morph | morph inspectIt ]
 #senders...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aListener: 	a KMDispatcher
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(1007681536)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(1007681536)


[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextMorphTab) aKMCategoryTarget(#SmalltalkEdi...etc...
		morph: 	a PluggableTextMorph(1007681536)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#TextMorphTab) aKMCategoryTa...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyM...etc...
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#TextMorphTab) aKMCate...etc...
		firstIndex: 	1
		lastIndex: 	7


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextMorphTab) aKMCategoryTarget(#SmalltalkEdi...etc...
		morph: 	a PluggableTextMorph(1007681536)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a PluggableTextMorph(1007681536)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		targetToDispatch: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>do:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aBlock: 	[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstan...etc...
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
		chain: 	a KMDispatchChain
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a TextMorphForEditView(794034176)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(794034176)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (419@226)
		owner: 	a TransformMorph(946077696)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (419@226)
		color: 	Color black
		extension: 	a MorphExtension (854851584) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'tetris := TsTetris new.
tetris start.
tetris stop.


tetris n...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(1007681536)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(794034176)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (419@226)
		owner: 	a TransformMorph(946077696)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (419@226)
		color: 	Color black
		extension: 	a MorphExtension (854851584) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'tetris := TsTetris new.
tetris start.
tetris stop.


tetris n...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(1007681536)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-d>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(794034176)
	Receiver's instance variables: 
		timeStamp: 	7449510
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	(150@8.0)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	100
		charCode: 	100
		scanCode: 	2


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(794034176)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (419@226)
		owner: 	a TransformMorph(946077696)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (419@226)
		color: 	Color black
		extension: 	a MorphExtension (854851584) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'tetris := TsTetris new.
tetris start.
tetris stop.


tetris n...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(1007681536)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(794034176)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (419@226)
		owner: 	a TransformMorph(946077696)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (419@226)
		color: 	Color black
		extension: 	a MorphExtension (854851584) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'tetris := TsTetris new.
tetris start.
tetris stop.


tetris n...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(1007681536)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(794034176)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(465@543.0) corner: (481@559.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(465@543.0) corner: (481@559.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(794034176)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(473@552) mouseOver nil nil]
		targetOffset: 	(150@8)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7448913 473 552 0 0 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8



--- The full stack ---
Character class(Object)>>doesNotUnderstand: #leftArrow
TsTetris>>initialize
TsTetris class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[ textMorph editor evaluateSelection ] in PluggableTextMorph>>doIt
[ result := editBlock value ] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
[ :morph | morph doIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
17 February 2015 11:19:30.70723 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

TsContainerWithKeyboardSupport>>handlesKeyboard:
	Receiver: a TsContainerWithKeyboardSupport(911474688)
	Arguments and temporary variables: 
		evt: 	[keyUp '<Cmd- >']
	Receiver's instance variables: 
		bounds: 	(339.0@314.0) corner: (739.0@814.0)
		owner: 	a MaWrapperMorph(414449664)
		submorphs: 	an Array(a MaScribbleMorph(1052246016))
		fullBounds: 	(339.0@314.0) corner: (739.0@814.0)
		color: 	Color transparent
		extension: 	a MorphExtension (930611200)
		actionDictionary: 	a Dictionary(Character arrowLeft->[ self pieceCourante avance...etc...


TsContainerWithKeyboardSupport(Morph)>>handlesKeyUp:
	Receiver: a TsContainerWithKeyboardSupport(911474688)
	Arguments and temporary variables: 
		evt: 	[keyUp '<Cmd- >']
	Receiver's instance variables: 
		bounds: 	(339.0@314.0) corner: (739.0@814.0)
		owner: 	a MaWrapperMorph(414449664)
		submorphs: 	an Array(a MaScribbleMorph(1052246016))
		fullBounds: 	(339.0@314.0) corner: (739.0@814.0)
		color: 	Color transparent
		extension: 	a MorphExtension (930611200)
		actionDictionary: 	a Dictionary(Character arrowLeft->[ self pieceCourante avance...etc...


TsContainerWithKeyboardSupport(Morph)>>handleKeyUp:
	Receiver: a TsContainerWithKeyboardSupport(911474688)
	Arguments and temporary variables: 
		anEvent: 	[keyUp '<Cmd- >']
	Receiver's instance variables: 
		bounds: 	(339.0@314.0) corner: (739.0@814.0)
		owner: 	a MaWrapperMorph(414449664)
		submorphs: 	an Array(a MaScribbleMorph(1052246016))
		fullBounds: 	(339.0@314.0) corner: (739.0@814.0)
		color: 	Color transparent
		extension: 	a MorphExtension (930611200)
		actionDictionary: 	a Dictionary(Character arrowLeft->[ self pieceCourante avance...etc...


KeyboardEvent>>sentTo:
	Receiver: [keyUp '<Cmd- >']
	Arguments and temporary variables: 
		anObject: 	a TsContainerWithKeyboardSupport(911474688)
	Receiver's instance variables: 
		timeStamp: 	7580137
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#keyUp
		buttons: 	64
		position: 	(432@569.0)
		handler: 	nil
		wasHandled: 	false
		keyValue: 	2
		charCode: 	0
		scanCode: 	2


TsContainerWithKeyboardSupport(Morph)>>handleEvent:
	Receiver: a TsContainerWithKeyboardSupport(911474688)
	Arguments and temporary variables: 
		anEvent: 	[keyUp '<Cmd- >']
	Receiver's instance variables: 
		bounds: 	(339.0@314.0) corner: (739.0@814.0)
		owner: 	a MaWrapperMorph(414449664)
		submorphs: 	an Array(a MaScribbleMorph(1052246016))
		fullBounds: 	(339.0@314.0) corner: (739.0@814.0)
		color: 	Color transparent
		extension: 	a MorphExtension (930611200)
		actionDictionary: 	a Dictionary(Character arrowLeft->[ self pieceCourante avance...etc...


TsContainerWithKeyboardSupport(Morph)>>handleFocusEvent:
	Receiver: a TsContainerWithKeyboardSupport(911474688)
	Arguments and temporary variables: 
		anEvent: 	[keyUp '<Cmd- >']
	Receiver's instance variables: 
		bounds: 	(339.0@314.0) corner: (739.0@814.0)
		owner: 	a MaWrapperMorph(414449664)
		submorphs: 	an Array(a MaScribbleMorph(1052246016))
		fullBounds: 	(339.0@314.0) corner: (739.0@814.0)
		color: 	Color transparent
		extension: 	a MorphExtension (930611200)
		actionDictionary: 	a Dictionary(Character arrowLeft->[ self pieceCourante avance...etc...


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keyUp '<Cmd- >']
		focusHolder: 	a TsContainerWithKeyboardSupport(911474688)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(432@569.0) corner: (448@585.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TsContainerWithKeyboardSupport(911474688)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(432@569) mouseOver nil nil]
		targetOffset: 	(109@25)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7578926 432 569 0 0 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@814)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(439615488) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[keyUp '<Cmd- >']
		focusHolder: 	a TsContainerWithKeyboardSupport(911474688)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(432@569.0) corner: (448@585.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TsContainerWithKeyboardSupport(911474688)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(432@569) mouseOver nil nil]
		targetOffset: 	(109@25)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7578926 432 569 0 0 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keyUp '<Cmd- >']
		focusHolder: 	a TsContainerWithKeyboardSupport(911474688)
		aBlock: 	[ self keyboardFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(432@569.0) corner: (448@585.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TsContainerWithKeyboardSupport(911474688)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(432@569) mouseOver nil nil]
		targetOffset: 	(109@25)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7578926 432 569 0 0 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keyUp '<Cmd- >']
	Receiver's instance variables: 
		bounds: 	(432@569.0) corner: (448@585.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TsContainerWithKeyboardSupport(911474688)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(432@569) mouseOver nil nil]
		targetOffset: 	(109@25)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7578926 432 569 0 0 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keyUp '<Cmd- >']
		evt: 	[keyUp '<Cmd- >']
	Receiver's instance variables: 
		bounds: 	(432@569.0) corner: (448@585.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TsContainerWithKeyboardSupport(911474688)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(432@569) mouseOver nil nil]
		targetOffset: 	(109@25)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7578926 432 569 0 0 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[keyUp '<Cmd- >']
		evtBuf: 	#(2 7580137 2 2 8 0 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	(432@569.0) corner: (448@585.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TsContainerWithKeyboardSupport(911474688)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(432@569) mouseOver nil nil]
		targetOffset: 	(109@25)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7578926 432 569 0 0 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1440@814)
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(864026624))(a SearchMorp...etc...
		lastStepTime: 	7580115
		lastStepMessage: 	nil
		lastCycleTime: 	7580137
		alarms: 	a Heap()
		lastAlarmTime: 	7580115
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1440@814)
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(864026624))(a SearchMorp...etc...
		lastStepTime: 	7580115
		lastStepMessage: 	nil
		lastCycleTime: 	7580137
		alarms: 	a Heap()
		lastAlarmTime: 	7580115
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1440@814)
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(864026624))(a SearchMorp...etc...
		lastStepTime: 	7580115
		lastStepMessage: 	nil
		lastCycleTime: 	7580137
		alarms: 	a Heap()
		lastAlarmTime: 	7580115
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1440@814)
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(864026624))(a SearchMorp...etc...
		lastStepTime: 	7580115
		lastStepMessage: 	nil
		lastCycleTime: 	7580137
		alarms: 	a Heap()
		lastAlarmTime: 	7580115
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@814)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(439615488) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
World doOneCycle.
Processor yield.
false ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
TsContainerWithKeyboardSupport>>handlesKeyboard:
TsContainerWithKeyboardSupport(Morph)>>handlesKeyUp:
TsContainerWithKeyboardSupport(Morph)>>handleKeyUp:
KeyboardEvent>>sentTo:
TsContainerWithKeyboardSupport(Morph)>>handleEvent:
TsContainerWithKeyboardSupport(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
17 February 2015 11:19:45.452427 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

TsContainerWithKeyboardSupport>>handlesKeyboard:
	Receiver: a TsContainerWithKeyboardSupport(911474688)
	Arguments and temporary variables: 
		evt: 	[keyDown ' ']
	Receiver's instance variables: 
		bounds: 	(839.0@177.0) corner: (1239.0@677.0)
		owner: 	a MaWrapperMorph(414449664)
		submorphs: 	an Array(a MaScribbleMorph(1052246016))
		fullBounds: 	(839.0@177.0) corner: (1239.0@677.0)
		color: 	Color transparent
		extension: 	a MorphExtension (930611200)
		actionDictionary: 	a Dictionary(Character arrowLeft->[ self pieceCourante avance...etc...


TsContainerWithKeyboardSupport(Morph)>>handlesKeyDown:
	Receiver: a TsContainerWithKeyboardSupport(911474688)
	Arguments and temporary variables: 
		evt: 	[keyDown ' ']
	Receiver's instance variables: 
		bounds: 	(839.0@177.0) corner: (1239.0@677.0)
		owner: 	a MaWrapperMorph(414449664)
		submorphs: 	an Array(a MaScribbleMorph(1052246016))
		fullBounds: 	(839.0@177.0) corner: (1239.0@677.0)
		color: 	Color transparent
		extension: 	a MorphExtension (930611200)
		actionDictionary: 	a Dictionary(Character arrowLeft->[ self pieceCourante avance...etc...


TsContainerWithKeyboardSupport(Morph)>>handleKeyDown:
	Receiver: a TsContainerWithKeyboardSupport(911474688)
	Arguments and temporary variables: 
		anEvent: 	[keyDown ' ']
	Receiver's instance variables: 
		bounds: 	(839.0@177.0) corner: (1239.0@677.0)
		owner: 	a MaWrapperMorph(414449664)
		submorphs: 	an Array(a MaScribbleMorph(1052246016))
		fullBounds: 	(839.0@177.0) corner: (1239.0@677.0)
		color: 	Color transparent
		extension: 	a MorphExtension (930611200)
		actionDictionary: 	a Dictionary(Character arrowLeft->[ self pieceCourante avance...etc...


KeyboardEvent>>sentTo:
	Receiver: [keyDown ' ']
	Arguments and temporary variables: 
		anObject: 	a TsContainerWithKeyboardSupport(911474688)
	Receiver's instance variables: 
		timeStamp: 	7594914
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#keyDown
		buttons: 	0
		position: 	(984@361.0)
		handler: 	nil
		wasHandled: 	false
		keyValue: 	124
		charCode: 	0
		scanCode: 	124


TsContainerWithKeyboardSupport(Morph)>>handleEvent:
	Receiver: a TsContainerWithKeyboardSupport(911474688)
	Arguments and temporary variables: 
		anEvent: 	[keyDown ' ']
	Receiver's instance variables: 
		bounds: 	(839.0@177.0) corner: (1239.0@677.0)
		owner: 	a MaWrapperMorph(414449664)
		submorphs: 	an Array(a MaScribbleMorph(1052246016))
		fullBounds: 	(839.0@177.0) corner: (1239.0@677.0)
		color: 	Color transparent
		extension: 	a MorphExtension (930611200)
		actionDictionary: 	a Dictionary(Character arrowLeft->[ self pieceCourante avance...etc...


TsContainerWithKeyboardSupport(Morph)>>handleFocusEvent:
	Receiver: a TsContainerWithKeyboardSupport(911474688)
	Arguments and temporary variables: 
		anEvent: 	[keyDown ' ']
	Receiver's instance variables: 
		bounds: 	(839.0@177.0) corner: (1239.0@677.0)
		owner: 	a MaWrapperMorph(414449664)
		submorphs: 	an Array(a MaScribbleMorph(1052246016))
		fullBounds: 	(839.0@177.0) corner: (1239.0@677.0)
		color: 	Color transparent
		extension: 	a MorphExtension (930611200)
		actionDictionary: 	a Dictionary(Character arrowLeft->[ self pieceCourante avance...etc...


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keyDown ' ']
		focusHolder: 	a TsContainerWithKeyboardSupport(911474688)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(984@361.0) corner: (1000@377.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(984@361.0) corner: (1000@377.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TsContainerWithKeyboardSupport(911474688)
		eventListeners: 	nil
		mouseListeners: 	a WeakArray(a NautilusWindow(179830784))
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(984@361) mouseOver nil nil]
		targetOffset: 	(-150.0@ -212.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	false
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7593384 984 361 0 0 0 1)
		lastKeyScanCode: 	124
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@814)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(439615488) a Syste...etc...
		fullBounds: 	(0@0) corner: (1440@814)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[keyDown ' ']
		focusHolder: 	a TsContainerWithKeyboardSupport(911474688)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(984@361.0) corner: (1000@377.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(984@361.0) corner: (1000@377.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TsContainerWithKeyboardSupport(911474688)
		eventListeners: 	nil
		mouseListeners: 	a WeakArray(a NautilusWindow(179830784))
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(984@361) mouseOver nil nil]
		targetOffset: 	(-150.0@ -212.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	false
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7593384 984 361 0 0 0 1)
		lastKeyScanCode: 	124
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keyDown ' ']
		focusHolder: 	a TsContainerWithKeyboardSupport(911474688)
		aBlock: 	[ self keyboardFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(984@361.0) corner: (1000@377.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(984@361.0) corner: (1000@377.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TsContainerWithKeyboardSupport(911474688)
		eventListeners: 	nil
		mouseListeners: 	a WeakArray(a NautilusWindow(179830784))
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(984@361) mouseOver nil nil]
		targetOffset: 	(-150.0@ -212.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	false
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7593384 984 361 0 0 0 1)
		lastKeyScanCode: 	124
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keyDown ' ']
	Receiver's instance variables: 
		bounds: 	(984@361.0) corner: (1000@377.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(984@361.0) corner: (1000@377.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TsContainerWithKeyboardSupport(911474688)
		eventListeners: 	nil
		mouseListeners: 	a WeakArray(a NautilusWindow(179830784))
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(984@361) mouseOver nil nil]
		targetOffset: 	(-150.0@ -212.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	false
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7593384 984 361 0 0 0 1)
		lastKeyScanCode: 	124
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keyDown ' ']
		evt: 	[keyDown ' ']
	Receiver's instance variables: 
		bounds: 	(984@361.0) corner: (1000@377.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(984@361.0) corner: (1000@377.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TsContainerWithKeyboardSupport(911474688)
		eventListeners: 	nil
		mouseListeners: 	a WeakArray(a NautilusWindow(179830784))
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(984@361) mouseOver nil nil]
		targetOffset: 	(-150.0@ -212.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	false
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7593384 984 361 0 0 0 1)
		lastKeyScanCode: 	124
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[keyDown ' ']
		evtBuf: 	#(2 7594914 124 1 0 0 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(984@361.0) corner: (1000@377.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(984@361.0) corner: (1000@377.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TsContainerWithKeyboardSupport(911474688)
		eventListeners: 	nil
		mouseListeners: 	a WeakArray(a NautilusWindow(179830784))
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(984@361) mouseOver nil nil]
		targetOffset: 	(-150.0@ -212.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	false
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7593384 984 361 0 0 0 1)
		lastKeyScanCode: 	124
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1440@814)
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(601620480))(a SearchMorp...etc...
		lastStepTime: 	7594893
		lastStepMessage: 	nil
		lastCycleTime: 	7594914
		alarms: 	a Heap()
		lastAlarmTime: 	7594893
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1440@814)
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(601620480))(a SearchMorp...etc...
		lastStepTime: 	7594893
		lastStepMessage: 	nil
		lastCycleTime: 	7594914
		alarms: 	a Heap()
		lastAlarmTime: 	7594893
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1440@814)
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(601620480))(a SearchMorp...etc...
		lastStepTime: 	7594893
		lastStepMessage: 	nil
		lastCycleTime: 	7594914
		alarms: 	a Heap()
		lastAlarmTime: 	7594893
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1440@814)
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(601620480))(a SearchMorp...etc...
		lastStepTime: 	7594893
		lastStepMessage: 	nil
		lastCycleTime: 	7594914
		alarms: 	a Heap()
		lastAlarmTime: 	7594893
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@814)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(439615488) a Syste...etc...
		fullBounds: 	(0@0) corner: (1440@814)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
World doOneCycle.
Processor yield.
false ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
TsContainerWithKeyboardSupport>>handlesKeyboard:
TsContainerWithKeyboardSupport(Morph)>>handlesKeyDown:
TsContainerWithKeyboardSupport(Morph)>>handleKeyDown:
KeyboardEvent>>sentTo:
TsContainerWithKeyboardSupport(Morph)>>handleEvent:
TsContainerWithKeyboardSupport(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
17 February 2015 11:19:45.484088 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

TsContainerWithKeyboardSupport>>handlesKeyboard:
	Receiver: a TsContainerWithKeyboardSupport(911474688)
	Arguments and temporary variables: 
		evt: 	[keystroke '<right>']
	Receiver's instance variables: 
		bounds: 	(839.0@177.0) corner: (1239.0@677.0)
		owner: 	a MaWrapperMorph(414449664)
		submorphs: 	an Array(a MaScribbleMorph(1052246016))
		fullBounds: 	(839.0@177.0) corner: (1239.0@677.0)
		color: 	Color transparent
		extension: 	a MorphExtension (930611200) [other:  (kmDispatcher -> a KMDispatche...etc...
		actionDictionary: 	a Dictionary(Character arrowLeft->[ self pieceCourante avance...etc...


TsContainerWithKeyboardSupport(Morph)>>handlesKeyStroke:
	Receiver: a TsContainerWithKeyboardSupport(911474688)
	Arguments and temporary variables: 
		evt: 	[keystroke '<right>']
	Receiver's instance variables: 
		bounds: 	(839.0@177.0) corner: (1239.0@677.0)
		owner: 	a MaWrapperMorph(414449664)
		submorphs: 	an Array(a MaScribbleMorph(1052246016))
		fullBounds: 	(839.0@177.0) corner: (1239.0@677.0)
		color: 	Color transparent
		extension: 	a MorphExtension (930611200) [other:  (kmDispatcher -> a KMDispatche...etc...
		actionDictionary: 	a Dictionary(Character arrowLeft->[ self pieceCourante avance...etc...


TsContainerWithKeyboardSupport(Morph)>>handleKeystroke:
	Receiver: a TsContainerWithKeyboardSupport(911474688)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<right>']
	Receiver's instance variables: 
		bounds: 	(839.0@177.0) corner: (1239.0@677.0)
		owner: 	a MaWrapperMorph(414449664)
		submorphs: 	an Array(a MaScribbleMorph(1052246016))
		fullBounds: 	(839.0@177.0) corner: (1239.0@677.0)
		color: 	Color transparent
		extension: 	a MorphExtension (930611200) [other:  (kmDispatcher -> a KMDispatche...etc...
		actionDictionary: 	a Dictionary(Character arrowLeft->[ self pieceCourante avance...etc...


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<right>']
	Arguments and temporary variables: 
		anObject: 	a TsContainerWithKeyboardSupport(911474688)
	Receiver's instance variables: 
		timeStamp: 	7594914
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	0
		position: 	(984@361.0)
		handler: 	nil
		wasHandled: 	false
		keyValue: 	29
		charCode: 	29
		scanCode: 	124


TsContainerWithKeyboardSupport(Morph)>>handleEvent:
	Receiver: a TsContainerWithKeyboardSupport(911474688)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<right>']
	Receiver's instance variables: 
		bounds: 	(839.0@177.0) corner: (1239.0@677.0)
		owner: 	a MaWrapperMorph(414449664)
		submorphs: 	an Array(a MaScribbleMorph(1052246016))
		fullBounds: 	(839.0@177.0) corner: (1239.0@677.0)
		color: 	Color transparent
		extension: 	a MorphExtension (930611200) [other:  (kmDispatcher -> a KMDispatche...etc...
		actionDictionary: 	a Dictionary(Character arrowLeft->[ self pieceCourante avance...etc...


TsContainerWithKeyboardSupport(Morph)>>handleFocusEvent:
	Receiver: a TsContainerWithKeyboardSupport(911474688)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<right>']
	Receiver's instance variables: 
		bounds: 	(839.0@177.0) corner: (1239.0@677.0)
		owner: 	a MaWrapperMorph(414449664)
		submorphs: 	an Array(a MaScribbleMorph(1052246016))
		fullBounds: 	(839.0@177.0) corner: (1239.0@677.0)
		color: 	Color transparent
		extension: 	a MorphExtension (930611200) [other:  (kmDispatcher -> a KMDispatche...etc...
		actionDictionary: 	a Dictionary(Character arrowLeft->[ self pieceCourante avance...etc...


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<right>']
		focusHolder: 	a TsContainerWithKeyboardSupport(911474688)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(984@361.0) corner: (1000@377.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(984@361.0) corner: (1000@377.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TsContainerWithKeyboardSupport(911474688)
		eventListeners: 	nil
		mouseListeners: 	a WeakArray(a NautilusWindow(179830784))
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(984@361) mouseOver nil nil]
		targetOffset: 	(-150.0@ -212.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	false
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7593384 984 361 0 0 0 1)
		lastKeyScanCode: 	124
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@814)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(439615488) a Syste...etc...
		fullBounds: 	(0@0) corner: (1440@814)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[keystroke '<right>']
		focusHolder: 	a TsContainerWithKeyboardSupport(911474688)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(984@361.0) corner: (1000@377.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(984@361.0) corner: (1000@377.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TsContainerWithKeyboardSupport(911474688)
		eventListeners: 	nil
		mouseListeners: 	a WeakArray(a NautilusWindow(179830784))
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(984@361) mouseOver nil nil]
		targetOffset: 	(-150.0@ -212.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	false
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7593384 984 361 0 0 0 1)
		lastKeyScanCode: 	124
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<right>']
		focusHolder: 	a TsContainerWithKeyboardSupport(911474688)
		aBlock: 	[ self keyboardFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(984@361.0) corner: (1000@377.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(984@361.0) corner: (1000@377.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TsContainerWithKeyboardSupport(911474688)
		eventListeners: 	nil
		mouseListeners: 	a WeakArray(a NautilusWindow(179830784))
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(984@361) mouseOver nil nil]
		targetOffset: 	(-150.0@ -212.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	false
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7593384 984 361 0 0 0 1)
		lastKeyScanCode: 	124
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<right>']
	Receiver's instance variables: 
		bounds: 	(984@361.0) corner: (1000@377.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(984@361.0) corner: (1000@377.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TsContainerWithKeyboardSupport(911474688)
		eventListeners: 	nil
		mouseListeners: 	a WeakArray(a NautilusWindow(179830784))
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(984@361) mouseOver nil nil]
		targetOffset: 	(-150.0@ -212.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	false
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7593384 984 361 0 0 0 1)
		lastKeyScanCode: 	124
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<right>']
		evt: 	[keystroke '<right>']
	Receiver's instance variables: 
		bounds: 	(984@361.0) corner: (1000@377.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(984@361.0) corner: (1000@377.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TsContainerWithKeyboardSupport(911474688)
		eventListeners: 	nil
		mouseListeners: 	a WeakArray(a NautilusWindow(179830784))
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(984@361) mouseOver nil nil]
		targetOffset: 	(-150.0@ -212.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	false
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7593384 984 361 0 0 0 1)
		lastKeyScanCode: 	124
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[keystroke '<right>']
		evtBuf: 	#(2 7594914 29 0 0 29 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(984@361.0) corner: (1000@377.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(984@361.0) corner: (1000@377.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TsContainerWithKeyboardSupport(911474688)
		eventListeners: 	nil
		mouseListeners: 	a WeakArray(a NautilusWindow(179830784))
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(984@361) mouseOver nil nil]
		targetOffset: 	(-150.0@ -212.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	false
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7593384 984 361 0 0 0 1)
		lastKeyScanCode: 	124
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1440@814)
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(601620480))(a SearchMorp...etc...
		lastStepTime: 	7594893
		lastStepMessage: 	nil
		lastCycleTime: 	7594950
		alarms: 	a Heap()
		lastAlarmTime: 	7594893
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1440@814)
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(601620480))(a SearchMorp...etc...
		lastStepTime: 	7594893
		lastStepMessage: 	nil
		lastCycleTime: 	7594950
		alarms: 	a Heap()
		lastAlarmTime: 	7594893
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1440@814)
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(601620480))(a SearchMorp...etc...
		lastStepTime: 	7594893
		lastStepMessage: 	nil
		lastCycleTime: 	7594950
		alarms: 	a Heap()
		lastAlarmTime: 	7594893
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1440@814)
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(601620480))(a SearchMorp...etc...
		lastStepTime: 	7594893
		lastStepMessage: 	nil
		lastCycleTime: 	7594950
		alarms: 	a Heap()
		lastAlarmTime: 	7594893
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@814)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(439615488) a Syste...etc...
		fullBounds: 	(0@0) corner: (1440@814)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
World doOneCycle.
Processor yield.
false ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
TsContainerWithKeyboardSupport>>handlesKeyboard:
TsContainerWithKeyboardSupport(Morph)>>handlesKeyStroke:
TsContainerWithKeyboardSupport(Morph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TsContainerWithKeyboardSupport(Morph)>>handleEvent:
TsContainerWithKeyboardSupport(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
NotYetImplemented: #rotation is not yet implemented in TsBarre
17 February 2015 11:21:05.237978 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

TsBarre(Object)>>notYetImplemented
	Receiver: a TsBarre
	Arguments and temporary variables: 

	Receiver's instance variables: 
		couleur: 	Color green
		carres: 	an OrderedCollection(a TsCarre)


TsBarre>>rotation
	Receiver: a TsBarre
	Arguments and temporary variables: 

	Receiver's instance variables: 
		couleur: 	Color green
		carres: 	an OrderedCollection(a TsCarre)


[ self pieceCourante rotation ] in TsTetris>>initialize
	Receiver: a TsTetris
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a TsContainerWithKeyboardSupport(911474688)
		terrain: 	a TsTerrain
		pieceCourante: 	a TsBarre
		affichage: 	a TsAfficheurTerrain
		process: 	nil


TsContainerWithKeyboardSupport>>keyStroke:
	Receiver: a TsContainerWithKeyboardSupport(911474688)
	Arguments and temporary variables: 
		evt: 	[keystroke '<up>']
	Receiver's instance variables: 
		bounds: 	(839.0@177.0) corner: (1239.0@677.0)
		owner: 	a MaWrapperMorph(414449664)
		submorphs: 	an Array(a MaScribbleMorph(1052246016))
		fullBounds: 	(839.0@177.0) corner: (1239.0@677.0)
		color: 	Color transparent
		extension: 	a MorphExtension (930611200) [other:  (kmDispatcher -> a KMDispatche...etc...
		actionDictionary: 	a Dictionary(Character arrowLeft->[ self pieceCourante avance...etc...


TsContainerWithKeyboardSupport(Morph)>>handleKeystroke:
	Receiver: a TsContainerWithKeyboardSupport(911474688)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<up>']
	Receiver's instance variables: 
		bounds: 	(839.0@177.0) corner: (1239.0@677.0)
		owner: 	a MaWrapperMorph(414449664)
		submorphs: 	an Array(a MaScribbleMorph(1052246016))
		fullBounds: 	(839.0@177.0) corner: (1239.0@677.0)
		color: 	Color transparent
		extension: 	a MorphExtension (930611200) [other:  (kmDispatcher -> a KMDispatche...etc...
		actionDictionary: 	a Dictionary(Character arrowLeft->[ self pieceCourante avance...etc...


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<up>']
	Arguments and temporary variables: 
		anObject: 	a TsContainerWithKeyboardSupport(911474688)
	Receiver's instance variables: 
		timeStamp: 	7674697
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	0
		position: 	(982@225.0)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	30
		charCode: 	30
		scanCode: 	126


TsContainerWithKeyboardSupport(Morph)>>handleEvent:
	Receiver: a TsContainerWithKeyboardSupport(911474688)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<up>']
	Receiver's instance variables: 
		bounds: 	(839.0@177.0) corner: (1239.0@677.0)
		owner: 	a MaWrapperMorph(414449664)
		submorphs: 	an Array(a MaScribbleMorph(1052246016))
		fullBounds: 	(839.0@177.0) corner: (1239.0@677.0)
		color: 	Color transparent
		extension: 	a MorphExtension (930611200) [other:  (kmDispatcher -> a KMDispatche...etc...
		actionDictionary: 	a Dictionary(Character arrowLeft->[ self pieceCourante avance...etc...


TsContainerWithKeyboardSupport(Morph)>>handleFocusEvent:
	Receiver: a TsContainerWithKeyboardSupport(911474688)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<up>']
	Receiver's instance variables: 
		bounds: 	(839.0@177.0) corner: (1239.0@677.0)
		owner: 	a MaWrapperMorph(414449664)
		submorphs: 	an Array(a MaScribbleMorph(1052246016))
		fullBounds: 	(839.0@177.0) corner: (1239.0@677.0)
		color: 	Color transparent
		extension: 	a MorphExtension (930611200) [other:  (kmDispatcher -> a KMDispatche...etc...
		actionDictionary: 	a Dictionary(Character arrowLeft->[ self pieceCourante avance...etc...


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<up>']
		focusHolder: 	a TsContainerWithKeyboardSupport(911474688)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(982@225.0) corner: (998@241.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(982@225.0) corner: (998@241.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TsContainerWithKeyboardSupport(911474688)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(982@225) mouseOver nil nil]
		targetOffset: 	(-140.0@ -30.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7672181 982 225 0 0 0 1)
		lastKeyScanCode: 	126
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@814)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(439615488) a Nauti...etc...
		fullBounds: 	(0@0) corner: (1440@814)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[keystroke '<up>']
		focusHolder: 	a TsContainerWithKeyboardSupport(911474688)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(982@225.0) corner: (998@241.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(982@225.0) corner: (998@241.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TsContainerWithKeyboardSupport(911474688)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(982@225) mouseOver nil nil]
		targetOffset: 	(-140.0@ -30.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7672181 982 225 0 0 0 1)
		lastKeyScanCode: 	126
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<up>']
		focusHolder: 	a TsContainerWithKeyboardSupport(911474688)
		aBlock: 	[ self keyboardFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(982@225.0) corner: (998@241.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(982@225.0) corner: (998@241.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TsContainerWithKeyboardSupport(911474688)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(982@225) mouseOver nil nil]
		targetOffset: 	(-140.0@ -30.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7672181 982 225 0 0 0 1)
		lastKeyScanCode: 	126
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<up>']
	Receiver's instance variables: 
		bounds: 	(982@225.0) corner: (998@241.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(982@225.0) corner: (998@241.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TsContainerWithKeyboardSupport(911474688)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(982@225) mouseOver nil nil]
		targetOffset: 	(-140.0@ -30.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7672181 982 225 0 0 0 1)
		lastKeyScanCode: 	126
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<up>']
		evt: 	[keystroke '<up>']
	Receiver's instance variables: 
		bounds: 	(982@225.0) corner: (998@241.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(982@225.0) corner: (998@241.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TsContainerWithKeyboardSupport(911474688)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(982@225) mouseOver nil nil]
		targetOffset: 	(-140.0@ -30.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7672181 982 225 0 0 0 1)
		lastKeyScanCode: 	126
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[keystroke '<up>']
		evtBuf: 	#(2 7674697 30 0 0 30 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	(982@225.0) corner: (998@241.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(982@225.0) corner: (998@241.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TsContainerWithKeyboardSupport(911474688)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(982@225) mouseOver nil nil]
		targetOffset: 	(-140.0@ -30.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7672181 982 225 0 0 0 1)
		lastKeyScanCode: 	126
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1440@814)
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(861405184))(a DropList...etc...
		lastStepTime: 	7674676
		lastStepMessage: 	nil
		lastCycleTime: 	7674697
		alarms: 	a Heap()
		lastAlarmTime: 	7674676
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1440@814)
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(861405184))(a DropList...etc...
		lastStepTime: 	7674676
		lastStepMessage: 	nil
		lastCycleTime: 	7674697
		alarms: 	a Heap()
		lastAlarmTime: 	7674676
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1440@814)
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(861405184))(a DropList...etc...
		lastStepTime: 	7674676
		lastStepMessage: 	nil
		lastCycleTime: 	7674697
		alarms: 	a Heap()
		lastAlarmTime: 	7674676
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1440@814)
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(861405184))(a DropList...etc...
		lastStepTime: 	7674676
		lastStepMessage: 	nil
		lastCycleTime: 	7674697
		alarms: 	a Heap()
		lastAlarmTime: 	7674676
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@814)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(439615488) a Nauti...etc...
		fullBounds: 	(0@0) corner: (1440@814)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
World doOneCycle.
Processor yield.
false ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
TsBarre(Object)>>notYetImplemented
TsBarre>>rotation
[ self pieceCourante rotation ] in TsTetris>>initialize
TsContainerWithKeyboardSupport>>keyStroke:
TsContainerWithKeyboardSupport(Morph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TsContainerWithKeyboardSupport(Morph)>>handleEvent:
TsContainerWithKeyboardSupport(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
NotYetImplemented: #rotation is not yet implemented in TsBarre
17 February 2015 11:21:28.476132 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

TsBarre(Object)>>notYetImplemented
	Receiver: a TsBarre
	Arguments and temporary variables: 

	Receiver's instance variables: 
		couleur: 	Color pink
		carres: 	an OrderedCollection(a TsCarre a TsCarre a TsCarre a TsCarre)


TsBarre>>rotation
	Receiver: a TsBarre
	Arguments and temporary variables: 

	Receiver's instance variables: 
		couleur: 	Color pink
		carres: 	an OrderedCollection(a TsCarre a TsCarre a TsCarre a TsCarre)


[ self pieceCourante rotation ] in TsTetris>>initialize
	Receiver: a TsTetris
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a TsContainerWithKeyboardSupport(911474688)
		terrain: 	a TsTerrain
		pieceCourante: 	a TsBarre
		affichage: 	a TsAfficheurTerrain
		process: 	a Process in [ delaySemaphore wait ] in Delay>>wait


TsContainerWithKeyboardSupport>>keyStroke:
	Receiver: a TsContainerWithKeyboardSupport(911474688)
	Arguments and temporary variables: 
		evt: 	[keystroke '<up>']
	Receiver's instance variables: 
		bounds: 	(839.0@177.0) corner: (1239.0@677.0)
		owner: 	a MaWrapperMorph(414449664)
		submorphs: 	an Array(a MaScribbleMorph(1052246016))
		fullBounds: 	(839.0@177.0) corner: (1239.0@677.0)
		color: 	Color transparent
		extension: 	a MorphExtension (930611200) [other:  (kmDispatcher -> a KMDispatche...etc...
		actionDictionary: 	a Dictionary(Character arrowLeft->[ self pieceCourante avance...etc...


TsContainerWithKeyboardSupport(Morph)>>handleKeystroke:
	Receiver: a TsContainerWithKeyboardSupport(911474688)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<up>']
	Receiver's instance variables: 
		bounds: 	(839.0@177.0) corner: (1239.0@677.0)
		owner: 	a MaWrapperMorph(414449664)
		submorphs: 	an Array(a MaScribbleMorph(1052246016))
		fullBounds: 	(839.0@177.0) corner: (1239.0@677.0)
		color: 	Color transparent
		extension: 	a MorphExtension (930611200) [other:  (kmDispatcher -> a KMDispatche...etc...
		actionDictionary: 	a Dictionary(Character arrowLeft->[ self pieceCourante avance...etc...


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<up>']
	Arguments and temporary variables: 
		anObject: 	a TsContainerWithKeyboardSupport(911474688)
	Receiver's instance variables: 
		timeStamp: 	7697937
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	0
		position: 	(1043@494.0)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	30
		charCode: 	30
		scanCode: 	126


TsContainerWithKeyboardSupport(Morph)>>handleEvent:
	Receiver: a TsContainerWithKeyboardSupport(911474688)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<up>']
	Receiver's instance variables: 
		bounds: 	(839.0@177.0) corner: (1239.0@677.0)
		owner: 	a MaWrapperMorph(414449664)
		submorphs: 	an Array(a MaScribbleMorph(1052246016))
		fullBounds: 	(839.0@177.0) corner: (1239.0@677.0)
		color: 	Color transparent
		extension: 	a MorphExtension (930611200) [other:  (kmDispatcher -> a KMDispatche...etc...
		actionDictionary: 	a Dictionary(Character arrowLeft->[ self pieceCourante avance...etc...


TsContainerWithKeyboardSupport(Morph)>>handleFocusEvent:
	Receiver: a TsContainerWithKeyboardSupport(911474688)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<up>']
	Receiver's instance variables: 
		bounds: 	(839.0@177.0) corner: (1239.0@677.0)
		owner: 	a MaWrapperMorph(414449664)
		submorphs: 	an Array(a MaScribbleMorph(1052246016))
		fullBounds: 	(839.0@177.0) corner: (1239.0@677.0)
		color: 	Color transparent
		extension: 	a MorphExtension (930611200) [other:  (kmDispatcher -> a KMDispatche...etc...
		actionDictionary: 	a Dictionary(Character arrowLeft->[ self pieceCourante avance...etc...


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<up>']
		focusHolder: 	a TsContainerWithKeyboardSupport(911474688)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1043@494.0) corner: (1059@510.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1043@494.0) corner: (1059@510.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TsContainerWithKeyboardSupport(911474688)
		eventListeners: 	nil
		mouseListeners: 	a WeakArray(a NautilusWindow(179830784))
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1043@494) mouseOver nil nil]
		targetOffset: 	(-209.0@ -345.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	false
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7696080 1043 494 0 0 0 1)
		lastKeyScanCode: 	126
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@814)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(439615488) a Syste...etc...
		fullBounds: 	(0@0) corner: (1440@814)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[keystroke '<up>']
		focusHolder: 	a TsContainerWithKeyboardSupport(911474688)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(1043@494.0) corner: (1059@510.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1043@494.0) corner: (1059@510.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TsContainerWithKeyboardSupport(911474688)
		eventListeners: 	nil
		mouseListeners: 	a WeakArray(a NautilusWindow(179830784))
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1043@494) mouseOver nil nil]
		targetOffset: 	(-209.0@ -345.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	false
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7696080 1043 494 0 0 0 1)
		lastKeyScanCode: 	126
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<up>']
		focusHolder: 	a TsContainerWithKeyboardSupport(911474688)
		aBlock: 	[ self keyboardFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1043@494.0) corner: (1059@510.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1043@494.0) corner: (1059@510.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TsContainerWithKeyboardSupport(911474688)
		eventListeners: 	nil
		mouseListeners: 	a WeakArray(a NautilusWindow(179830784))
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1043@494) mouseOver nil nil]
		targetOffset: 	(-209.0@ -345.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	false
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7696080 1043 494 0 0 0 1)
		lastKeyScanCode: 	126
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<up>']
	Receiver's instance variables: 
		bounds: 	(1043@494.0) corner: (1059@510.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1043@494.0) corner: (1059@510.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TsContainerWithKeyboardSupport(911474688)
		eventListeners: 	nil
		mouseListeners: 	a WeakArray(a NautilusWindow(179830784))
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1043@494) mouseOver nil nil]
		targetOffset: 	(-209.0@ -345.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	false
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7696080 1043 494 0 0 0 1)
		lastKeyScanCode: 	126
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<up>']
		evt: 	[keystroke '<up>']
	Receiver's instance variables: 
		bounds: 	(1043@494.0) corner: (1059@510.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1043@494.0) corner: (1059@510.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TsContainerWithKeyboardSupport(911474688)
		eventListeners: 	nil
		mouseListeners: 	a WeakArray(a NautilusWindow(179830784))
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1043@494) mouseOver nil nil]
		targetOffset: 	(-209.0@ -345.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	false
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7696080 1043 494 0 0 0 1)
		lastKeyScanCode: 	126
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[keystroke '<up>']
		evtBuf: 	#(2 7697937 30 0 0 30 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	(1043@494.0) corner: (1059@510.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1043@494.0) corner: (1059@510.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TsContainerWithKeyboardSupport(911474688)
		eventListeners: 	nil
		mouseListeners: 	a WeakArray(a NautilusWindow(179830784))
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1043@494) mouseOver nil nil]
		targetOffset: 	(-209.0@ -345.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	false
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7696080 1043 494 0 0 0 1)
		lastKeyScanCode: 	126
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1440@814)
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(861405184))(a DropList...etc...
		lastStepTime: 	7697916
		lastStepMessage: 	nil
		lastCycleTime: 	7697937
		alarms: 	a Heap()
		lastAlarmTime: 	7697916
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1440@814)
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(861405184))(a DropList...etc...
		lastStepTime: 	7697916
		lastStepMessage: 	nil
		lastCycleTime: 	7697937
		alarms: 	a Heap()
		lastAlarmTime: 	7697916
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1440@814)
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(861405184))(a DropList...etc...
		lastStepTime: 	7697916
		lastStepMessage: 	nil
		lastCycleTime: 	7697937
		alarms: 	a Heap()
		lastAlarmTime: 	7697916
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1440@814)
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(861405184))(a DropList...etc...
		lastStepTime: 	7697916
		lastStepMessage: 	nil
		lastCycleTime: 	7697937
		alarms: 	a Heap()
		lastAlarmTime: 	7697916
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@814)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(439615488) a Syste...etc...
		fullBounds: 	(0@0) corner: (1440@814)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
World doOneCycle.
Processor yield.
false ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
TsBarre(Object)>>notYetImplemented
TsBarre>>rotation
[ self pieceCourante rotation ] in TsTetris>>initialize
TsContainerWithKeyboardSupport>>keyStroke:
TsContainerWithKeyboardSupport(Morph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TsContainerWithKeyboardSupport(Morph)>>handleEvent:
TsContainerWithKeyboardSupport(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
NotYetImplemented: #rotation is not yet implemented in TsBarre
17 February 2015 11:21:53.524596 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

TsBarre(Object)>>notYetImplemented
	Receiver: a TsBarre
	Arguments and temporary variables: 

	Receiver's instance variables: 
		couleur: 	Color purple
		carres: 	an OrderedCollection(a TsCarre a TsCarre)


TsBarre>>rotation
	Receiver: a TsBarre
	Arguments and temporary variables: 

	Receiver's instance variables: 
		couleur: 	Color purple
		carres: 	an OrderedCollection(a TsCarre a TsCarre)


[ self pieceCourante rotation ] in TsTetris>>initialize
	Receiver: a TsTetris
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a TsContainerWithKeyboardSupport(911474688)
		terrain: 	a TsTerrain
		pieceCourante: 	a TsBarre
		affichage: 	a TsAfficheurTerrain
		process: 	a Process in [ delaySemaphore wait ] in Delay>>wait


TsContainerWithKeyboardSupport>>keyStroke:
	Receiver: a TsContainerWithKeyboardSupport(911474688)
	Arguments and temporary variables: 
		evt: 	[keystroke '<up>']
	Receiver's instance variables: 
		bounds: 	(839.0@177.0) corner: (1239.0@677.0)
		owner: 	a MaWrapperMorph(414449664)
		submorphs: 	an Array(a MaScribbleMorph(1052246016))
		fullBounds: 	(839.0@177.0) corner: (1239.0@677.0)
		color: 	Color transparent
		extension: 	a MorphExtension (930611200) [other:  (kmDispatcher -> a KMDispatche...etc...
		actionDictionary: 	a Dictionary(Character arrowLeft->[ self pieceCourante avance...etc...


TsContainerWithKeyboardSupport(Morph)>>handleKeystroke:
	Receiver: a TsContainerWithKeyboardSupport(911474688)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<up>']
	Receiver's instance variables: 
		bounds: 	(839.0@177.0) corner: (1239.0@677.0)
		owner: 	a MaWrapperMorph(414449664)
		submorphs: 	an Array(a MaScribbleMorph(1052246016))
		fullBounds: 	(839.0@177.0) corner: (1239.0@677.0)
		color: 	Color transparent
		extension: 	a MorphExtension (930611200) [other:  (kmDispatcher -> a KMDispatche...etc...
		actionDictionary: 	a Dictionary(Character arrowLeft->[ self pieceCourante avance...etc...


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<up>']
	Arguments and temporary variables: 
		anObject: 	a TsContainerWithKeyboardSupport(911474688)
	Receiver's instance variables: 
		timeStamp: 	7722970
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	0
		position: 	(1032@507.0)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	30
		charCode: 	30
		scanCode: 	126


TsContainerWithKeyboardSupport(Morph)>>handleEvent:
	Receiver: a TsContainerWithKeyboardSupport(911474688)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<up>']
	Receiver's instance variables: 
		bounds: 	(839.0@177.0) corner: (1239.0@677.0)
		owner: 	a MaWrapperMorph(414449664)
		submorphs: 	an Array(a MaScribbleMorph(1052246016))
		fullBounds: 	(839.0@177.0) corner: (1239.0@677.0)
		color: 	Color transparent
		extension: 	a MorphExtension (930611200) [other:  (kmDispatcher -> a KMDispatche...etc...
		actionDictionary: 	a Dictionary(Character arrowLeft->[ self pieceCourante avance...etc...


TsContainerWithKeyboardSupport(Morph)>>handleFocusEvent:
	Receiver: a TsContainerWithKeyboardSupport(911474688)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<up>']
	Receiver's instance variables: 
		bounds: 	(839.0@177.0) corner: (1239.0@677.0)
		owner: 	a MaWrapperMorph(414449664)
		submorphs: 	an Array(a MaScribbleMorph(1052246016))
		fullBounds: 	(839.0@177.0) corner: (1239.0@677.0)
		color: 	Color transparent
		extension: 	a MorphExtension (930611200) [other:  (kmDispatcher -> a KMDispatche...etc...
		actionDictionary: 	a Dictionary(Character arrowLeft->[ self pieceCourante avance...etc...


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<up>']
		focusHolder: 	a TsContainerWithKeyboardSupport(911474688)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1032@507.0) corner: (1048@523.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1032@507.0) corner: (1048@523.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TsContainerWithKeyboardSupport(911474688)
		eventListeners: 	nil
		mouseListeners: 	a WeakArray(a NautilusWindow(179830784))
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1032@507) mouseOver nil nil]
		targetOffset: 	(-198.0@ -358.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	false
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7720356 1032 507 0 0 0 1)
		lastKeyScanCode: 	126
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@814)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(439615488) a Nauti...etc...
		fullBounds: 	(0@0) corner: (1440@814)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[keystroke '<up>']
		focusHolder: 	a TsContainerWithKeyboardSupport(911474688)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(1032@507.0) corner: (1048@523.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1032@507.0) corner: (1048@523.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TsContainerWithKeyboardSupport(911474688)
		eventListeners: 	nil
		mouseListeners: 	a WeakArray(a NautilusWindow(179830784))
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1032@507) mouseOver nil nil]
		targetOffset: 	(-198.0@ -358.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	false
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7720356 1032 507 0 0 0 1)
		lastKeyScanCode: 	126
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<up>']
		focusHolder: 	a TsContainerWithKeyboardSupport(911474688)
		aBlock: 	[ self keyboardFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1032@507.0) corner: (1048@523.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1032@507.0) corner: (1048@523.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TsContainerWithKeyboardSupport(911474688)
		eventListeners: 	nil
		mouseListeners: 	a WeakArray(a NautilusWindow(179830784))
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1032@507) mouseOver nil nil]
		targetOffset: 	(-198.0@ -358.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	false
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7720356 1032 507 0 0 0 1)
		lastKeyScanCode: 	126
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<up>']
	Receiver's instance variables: 
		bounds: 	(1032@507.0) corner: (1048@523.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1032@507.0) corner: (1048@523.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TsContainerWithKeyboardSupport(911474688)
		eventListeners: 	nil
		mouseListeners: 	a WeakArray(a NautilusWindow(179830784))
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1032@507) mouseOver nil nil]
		targetOffset: 	(-198.0@ -358.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	false
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7720356 1032 507 0 0 0 1)
		lastKeyScanCode: 	126
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<up>']
		evt: 	[keystroke '<up>']
	Receiver's instance variables: 
		bounds: 	(1032@507.0) corner: (1048@523.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1032@507.0) corner: (1048@523.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TsContainerWithKeyboardSupport(911474688)
		eventListeners: 	nil
		mouseListeners: 	a WeakArray(a NautilusWindow(179830784))
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1032@507) mouseOver nil nil]
		targetOffset: 	(-198.0@ -358.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	false
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7720356 1032 507 0 0 0 1)
		lastKeyScanCode: 	126
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[keystroke '<up>']
		evtBuf: 	#(2 7722970 30 0 0 30 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	(1032@507.0) corner: (1048@523.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1032@507.0) corner: (1048@523.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TsContainerWithKeyboardSupport(911474688)
		eventListeners: 	nil
		mouseListeners: 	a WeakArray(a NautilusWindow(179830784))
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1032@507) mouseOver nil nil]
		targetOffset: 	(-198.0@ -358.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	false
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7720356 1032 507 0 0 0 1)
		lastKeyScanCode: 	126
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1440@814)
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(964427776))(a DropList...etc...
		lastStepTime: 	7723016
		lastStepMessage: 	nil
		lastCycleTime: 	7723016
		alarms: 	a Heap()
		lastAlarmTime: 	7723016
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1440@814)
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(964427776))(a DropList...etc...
		lastStepTime: 	7723016
		lastStepMessage: 	nil
		lastCycleTime: 	7723016
		alarms: 	a Heap()
		lastAlarmTime: 	7723016
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1440@814)
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(964427776))(a DropList...etc...
		lastStepTime: 	7723016
		lastStepMessage: 	nil
		lastCycleTime: 	7723016
		alarms: 	a Heap()
		lastAlarmTime: 	7723016
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1440@814)
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(964427776))(a DropList...etc...
		lastStepTime: 	7723016
		lastStepMessage: 	nil
		lastCycleTime: 	7723016
		alarms: 	a Heap()
		lastAlarmTime: 	7723016
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@814)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(439615488) a Nauti...etc...
		fullBounds: 	(0@0) corner: (1440@814)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
World doOneCycle.
Processor yield.
false ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
TsBarre(Object)>>notYetImplemented
TsBarre>>rotation
[ self pieceCourante rotation ] in TsTetris>>initialize
TsContainerWithKeyboardSupport>>keyStroke:
TsContainerWithKeyboardSupport(Morph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TsContainerWithKeyboardSupport(Morph)>>handleEvent:
TsContainerWithKeyboardSupport(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: WorldMorph>>hand
18 February 2015 10:12:49.58555 am

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

WorldMorph(Object)>>doesNotUnderstand: #hand
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aMessage: 	hand
		exception: 	MessageNotUnderstood: WorldMorph>>hand
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@814)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a NECMenuMorph(308019200) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'World hand'
		itsSelection: 	a Text for 'World hand'
		itsSelectionString: 	'World hand'
	Receiver's instance variables: 
		ast: 	DoIt
	^ World hand
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
printString := [ result printString ]
	on: Error
	do: [ '<...etc...
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(762314752)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[ 
(oldEditor := textMorph editor)
	evaluateSelectionAndDo: [ :result | 
		printString := [ result printString ]
			on: Error
			do: [ '<error in printString: try ''Inspect it'' to debug>' ].
		selectionInterval := oldEditor selectionInterval.
		textMorph installEditorToReplace: oldEditor.
		textMorph handleEdit: [ oldEditor afterSelectionInsertAndSelect: printString ].
		selectionInterval := oldEditor selectionInterval.
		textMorph editor selectFrom: selectionInterval first to: selectionInterval last.
		self scrollSelectionIntoView ] ] in PluggableTextMorph>>printIt
	Receiver: a PluggableTextMorph(579600384)
	Arguments and temporary variables: 
		oldEditor: 	a SmalltalkEditor
		printString: 	nil
	Receiver's instance variables: 
		bounds: 	(516.0@75.0) corner: (956.0@242.0)
		owner: 	a SystemWindow(943980544)
		submorphs: 	an Array(a TransformMorph(276037632))
		fullBounds: 	(516@75) corner: (956@242)
		color: 	Color white
		extension: 	a MorphExtension (729022464) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(619446272)
		scroller: 	a TransformMorph(276037632)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(371982336)
		textMorph: 	a TextMorphForEditView(762314752)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(11 to: 10)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(762314752)
	Arguments and temporary variables: 
		editBlock: 	[ 
(oldEditor := textMorph editor)
	evaluateSelectionAndDo: [ :resul...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@18)
		owner: 	a TransformMorph(276037632)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@18)
		color: 	Color black
		extension: 	a MorphExtension (817102848) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'World hand'
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(579600384)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>printIt
	Receiver: a PluggableTextMorph(579600384)
	Arguments and temporary variables: 
		oldEditor: 	a SmalltalkEditor
		printString: 	nil
	Receiver's instance variables: 
		bounds: 	(516.0@75.0) corner: (956.0@242.0)
		owner: 	a SystemWindow(943980544)
		submorphs: 	an Array(a TransformMorph(276037632))
		fullBounds: 	(516@75) corner: (956@242)
		color: 	Color white
		extension: 	a MorphExtension (729022464) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(619446272)
		scroller: 	a TransformMorph(276037632)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(371982336)
		textMorph: 	a TextMorphForEditView(762314752)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(11 to: 10)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


[ :morph | morph printIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: SmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		morph: 	a PluggableTextMorph(579600384)
	Receiver's instance variables: 
		superclass: 	TextEditor
		methodDict: 	a MethodDictionary(#argAdvance:->SmalltalkEditor>>#argAdvance: #bro...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SmalltalkEditor
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Text-Edition'
		traitComposition: 	{}
		localSelectors: 	nil
		cmdActions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop...etc...
		shiftCmdActions: 	#(#noop: #argAdvance: #noop: #compareToClipboard: #debugIt: #m...etc...


BlockClosure>>cull:
	Receiver: [ :morph | morph printIt ]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(579600384)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	277
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :morph | morph printIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(579600384)
		secondArg: 	a PluggableTextMorph(579600384)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	277
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [ :morph | morph printIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(579600384)
		secondArg: 	a PluggableTextMorph(579600384)
		thirdArg: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	277
		numArgs: 	1


KMCategoryBinding>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#printIt on Cmd + P do [ :morph | morph printIt ]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(579600384)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(579600384)


[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #printIt on Cmd + P do [ :morph | morph printIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		l: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		action: 	[ :morph | morph printIt ]
		name: 	#printIt
		shortcut: 	Cmd + P
		defaultShortcut: 	Cmd + P
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[ :l | l completeMatch: self buffer: aBuffer ]
		index: 	1
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #printIt on Cmd + P do [ :morph | morph printIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[ :morph | morph printIt ]
		name: 	#printIt
		shortcut: 	Cmd + P
		defaultShortcut: 	Cmd + P
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #printIt on Cmd + P do [ :morph | morph printIt ]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		action: 	[ :morph | morph printIt ]
		name: 	#printIt
		shortcut: 	Cmd + P
		defaultShortcut: 	Cmd + P
		description: 	''


[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
		entry: 	#printIt on Cmd + P do [ :morph | morph printIt ]

	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


Set>>do:
	Receiver: a Set(#inspectIt on Cmd + I do [ :morph | morph inspectIt ]
 #sendersOfIt on Cmd + N do [ ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andD...etc...
		index: 	5
		each: 	#printIt on Cmd + P do [ :morph | morph printIt ]

	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(#inspectIt on Cmd + I do [ :morph | morph inspectIt ]
 #senders...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		aListener: 	a KMDispatcher
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(579600384)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(579600384)


[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a PluggableTextMorph(579600384)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#MorphFocusCtrlNavigation) a...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyM...etc...
		index: 	7
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#MorphFocusCtrlNavigat...etc...
		firstIndex: 	1
		lastIndex: 	7


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a PluggableTextMorph(579600384)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a PluggableTextMorph(579600384)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
		targetToDispatch: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>do:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aBlock: 	[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstan...etc...
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-p>']
		chain: 	a KMDispatchChain
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextMorph) aKMCategoryTarget(#MorphFocusCtrlN...etc...
		morph: 	a TextMorphForEditView(762314752)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(762314752)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@18)
		owner: 	a TransformMorph(276037632)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@18)
		color: 	Color black
		extension: 	a MorphExtension (817102848) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'World hand'
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(579600384)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(762314752)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@18)
		owner: 	a TransformMorph(276037632)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@18)
		color: 	Color black
		extension: 	a MorphExtension (817102848) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'World hand'
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(579600384)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-p>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(762314752)
	Receiver's instance variables: 
		timeStamp: 	135056
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	(93@86.0)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	112
		scanCode: 	35


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(762314752)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@18)
		owner: 	a TransformMorph(276037632)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@18)
		color: 	Color black
		extension: 	a MorphExtension (817102848) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'World hand'
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(579600384)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(762314752)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@18)
		owner: 	a TransformMorph(276037632)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@18)
		color: 	Color black
		extension: 	a MorphExtension (817102848) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'World hand'
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(579600384)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(762314752)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(613@162.0) corner: (629@178.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(613@162.0) corner: (629@178.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a NECMenuMorph(308019200)
		keyboardFocus: 	a TextMorphForEditView(762314752)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(613@162) mouseOver nil nil]
		targetOffset: 	(36.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 130290 613 162 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(613@162) mouseOver nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@814)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a NECMenuMorph(308019200) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(762314752)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(613@162.0) corner: (629@178.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(613@162.0) corner: (629@178.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a NECMenuMorph(308019200)
		keyboardFocus: 	a TextMorphForEditView(762314752)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(613@162) mouseOver nil nil]
		targetOffset: 	(36.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 130290 613 162 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(762314752)
		aBlock: 	[ self keyboardFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(613@162.0) corner: (629@178.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(613@162.0) corner: (629@178.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a NECMenuMorph(308019200)
		keyboardFocus: 	a TextMorphForEditView(762314752)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(613@162) mouseOver nil nil]
		targetOffset: 	(36.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 130290 613 162 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	(613@162.0) corner: (629@178.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(613@162.0) corner: (629@178.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a NECMenuMorph(308019200)
		keyboardFocus: 	a TextMorphForEditView(762314752)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(613@162) mouseOver nil nil]
		targetOffset: 	(36.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 130290 613 162 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8



--- The full stack ---
WorldMorph(Object)>>doesNotUnderstand: #hand
UndefinedObject>>DoIt
OpalCompiler>>evaluate
SmalltalkEditor>>evaluateSelectionAndDo:
[ 
(oldEditor := textMorph editor)
	evaluateSelectionAndDo: [ :result | 
		printString := [ result printString ]
			on: Error
			do: [ '<error in printString: try ''Inspect it'' to debug>' ].
		selectionInterval := oldEditor selectionInterval.
		textMorph installEditorToReplace: oldEditor.
		textMorph handleEdit: [ oldEditor afterSelectionInsertAndSelect: printString ].
		selectionInterval := oldEditor selectionInterval.
		textMorph editor selectFrom: selectionInterval first to: selectionInterval last.
		self scrollSelectionIntoView ] ] in PluggableTextMorph>>printIt
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>printIt
[ :morph | morph printIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------


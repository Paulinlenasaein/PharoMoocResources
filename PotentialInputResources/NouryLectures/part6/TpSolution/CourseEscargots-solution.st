Object subclass: #Arbitre	instanceVariableNames: 'course pasDeTempsEcoules'	classVariableNames: ''	poolDictionaries: ''	category: 'CourseEscargots'!!Arbitre methodsFor: 'arbitrer' stamp: 'NouryBouraqadi 3/6/2015 19:40'!boucleArbitrage	[		self arriveeAtteinte ifTrue: [ ^self arreterLaCourse].		pasDeTempsEcoules := pasDeTempsEcoules + 1.		self dureeUnPasDeTemps asDelay wait	] repeat! !!Arbitre methodsFor: 'arbitrer' stamp: 'NouryBouraqadi 3/6/2015 19:40'!demarrerArbitrage	[		pasDeTempsEcoules := 0.		self boucleArbitrage	] forkAt: Processor userInterruptPriority! !!Arbitre methodsFor: 'arbitrer' stamp: 'NouryBouraqadi 3/6/2015 19:11'!arriveeAtteinte	^self escargots anySatisfy: [ :unEscargot| unEscargot xPosition > self xArrivee]! !!Arbitre methodsFor: 'arbitrer' stamp: 'NouryBouraqadi 3/6/2015 19:39'!arreterLaCourse	self course arreter.	Transcript 		cr; 		show: 'Temps du meilleur escargot  = ';		show: self dureeCourse! !!Arbitre methodsFor: 'accessing' stamp: 'NouryBouraqadi 3/6/2015 19:10'!dureeUnPasDeTemps	^self course dureeUnPasDeTemps! !!Arbitre methodsFor: 'accessing' stamp: 'NouryBouraqadi 3/6/2015 19:14'!xArrivee	^self course xArrivee! !!Arbitre methodsFor: 'accessing' stamp: 'NouryBouraqadi 3/6/2015 19:16'!escargots	^self course escargots! !!Arbitre methodsFor: 'accessing' stamp: 'NouryBouraqadi 3/6/2015 19:12'!course: anObject	course := anObject! !!Arbitre methodsFor: 'accessing' stamp: 'NouryBouraqadi 3/6/2015 19:12'!course	^ course! !!Arbitre methodsFor: 'accessing' stamp: 'NouryBouraqadi 3/6/2015 19:40'!dureeCourse	^self dureeUnPasDeTemps * pasDeTempsEcoules! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Arbitre class	instanceVariableNames: ''!!Arbitre class methodsFor: 'instance creation' stamp: 'NouryBouraqadi 3/6/2015 19:15'!pourCourse: uneCourse	^self new		course: uneCourse;		yourself ! !Object subclass: #Escargot	instanceVariableNames: 'position energie annonceur course thread'	classVariableNames: ''	poolDictionaries: ''	category: 'CourseEscargots'!!Escargot methodsFor: 'initialize-release' stamp: 'NouryBouraqadi 3/6/2015 18:12'!initialize	super initialize.	annonceur := Announcer new.	self resetEnergie.	self resetPosition.! !!Escargot methodsFor: 'initialize-release' stamp: 'NouryBouraqadi 3/6/2015 18:08'!resetEnergie	self energie: self nombreAleatoireEntre1Et10! !!Escargot methodsFor: 'initialize-release' stamp: 'NouryBouraqadi 3/6/2015 17:59'!resetPosition	self position: self positionInitiale! !!Escargot methodsFor: 'activite' stamp: 'NouryBouraqadi 3/6/2015 18:08'!dureeSommeil	^self dureeUnPas * self nombreAleatoireEntre1Et10! !!Escargot methodsFor: 'activite' stamp: 'NouryBouraqadi 3/6/2015 19:02'!faireCourse	thread := [ self boucleCourse ] forkAt: Processor userBackgroundPriority ! !!Escargot methodsFor: 'activite' stamp: 'NouryBouraqadi 3/6/2015 18:14'!faireUneAction	self energie > 0 ifTrue: [^self avanceDUnPas].	self dort! !!Escargot methodsFor: 'activite' stamp: 'NouryBouraqadi 3/6/2015 18:29'!boucleCourse	[self courseFinie] whileFalse: [self faireUneAction]! !!Escargot methodsFor: 'activite' stamp: 'NouryBouraqadi 3/6/2015 18:10'!dimensionUnPas	^10@0! !!Escargot methodsFor: 'activite' stamp: 'NouryBouraqadi 3/6/2015 18:07'!avanceDUnPas	self energie: self energie - 1.	self position: self position + self dimensionUnPas.	self dureeUnPas asDelay wait! !!Escargot methodsFor: 'activite' stamp: 'NouryBouraqadi 3/6/2015 18:24'!dort	annonceur announce: EvenementEscargotDort new.	self resetEnergie.	self dureeSommeil asDelay wait.	annonceur announce: EvenementEscargotSort new.! !!Escargot methodsFor: 'activite' stamp: 'NouryBouraqadi 3/6/2015 18:07'!dureeUnPas	^100 milliSeconds! !!Escargot methodsFor: 'accessing' stamp: 'NouryBouraqadi 3/6/2015 18:25'!position: unPoint	| evenementDeplacement |	position := unPoint.	evenementDeplacement := EvenementEscargotBouge nouvellePosition: unPoint.	annonceur announce: evenementDeplacement! !!Escargot methodsFor: 'accessing' stamp: 'NouryBouraqadi 3/6/2015 17:56'!position	^ position! !!Escargot methodsFor: 'accessing' stamp: 'NouryBouraqadi 3/6/2015 17:59'!positionInitiale	^0@0! !!Escargot methodsFor: 'accessing' stamp: 'NouryBouraqadi 3/6/2015 18:29'!courseFinie	^self course courseFinie! !!Escargot methodsFor: 'accessing' stamp: 'NouryBouraqadi 3/6/2015 17:44'!energie: unNombre	energie := unNombre! !!Escargot methodsFor: 'accessing' stamp: 'NouryBouraqadi 3/6/2015 18:29'!course: anObject	course := anObject! !!Escargot methodsFor: 'accessing' stamp: 'NouryBouraqadi 3/6/2015 18:08'!nombreAleatoireEntre1Et10	^(1 to: 10) atRandom! !!Escargot methodsFor: 'accessing' stamp: 'NouryBouraqadi 3/6/2015 17:43'!energie	^ energie! !!Escargot methodsFor: 'accessing' stamp: 'NouryBouraqadi 3/6/2015 18:29'!course	^ course! !!Escargot methodsFor: 'accessing' stamp: 'NouryBouraqadi 3/6/2015 19:12'!xPosition	^self position x! !!Escargot methodsFor: 'accessing' stamp: 'NouryBouraqadi 3/6/2015 18:50'!annonceur	^annonceur! !Announcement subclass: #EvenementEscargotBouge	instanceVariableNames: 'nouvellePosition'	classVariableNames: ''	poolDictionaries: ''	category: 'CourseEscargots'!!EvenementEscargotBouge methodsFor: 'accessing' stamp: 'NouryBouraqadi 3/6/2015 18:23'!nouvellePosition	^ nouvellePosition! !!EvenementEscargotBouge methodsFor: 'accessing' stamp: 'NouryBouraqadi 3/6/2015 18:23'!nouvellePosition: anObject	nouvellePosition := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EvenementEscargotBouge class	instanceVariableNames: ''!!EvenementEscargotBouge class methodsFor: 'instance creation' stamp: 'NouryBouraqadi 3/6/2015 18:24'!nouvellePosition: unPoint	^self new		nouvellePosition: unPoint;		yourself! !TestCase subclass: #TestEscargot	instanceVariableNames: 'escargot'	classVariableNames: ''	poolDictionaries: ''	category: 'CourseEscargots'!!TestEscargot methodsFor: 'testing' stamp: 'NouryBouraqadi 3/6/2015 17:50'!testEnergieInitialeArbitraire	| energiesInitiales |	energiesInitiales := Set new.	20 timesRepeat: [energiesInitiales add: Escargot new energie].	self assert: energiesInitiales asSet size > 1	! !!TestEscargot methodsFor: 'testing' stamp: 'NouryBouraqadi 3/6/2015 18:09'!testEnergieArbitraireApresSommeil	| energiesApresSommeil |	energiesApresSommeil := Set new.	10 timesRepeat: [		escargot energie: 0.		escargot dort.		energiesApresSommeil add: escargot energie].	self assert: energiesApresSommeil asSet size > 1. "valeurs differentes"	self assert: (energiesApresSommeil allSatisfy: [ :each | each > 0 ]).	! !!TestEscargot methodsFor: 'testing' stamp: 'NouryBouraqadi 3/6/2015 18:01'!testEnergieDecrementeeQuandEscargotAvanceDUnPas	escargot energie: 10.	(0 to: 9) reverseDo: [ :energieAttendue| 		escargot avanceDUnPas.		self assert: escargot energie equals: energieAttendue ].! !!TestEscargot methodsFor: 'testing' stamp: 'NouryBouraqadi 3/6/2015 17:58'!testPositionInitialeEstX0Y0	self assert: escargot position equals: 0@0! !!TestEscargot methodsFor: 'testing' stamp: 'NouryBouraqadi 3/6/2015 18:10'!testXPositionIcrementeQuandEscargotAvanceDUnPas	escargot position: 0@0.	(10 to: 60 by: 10) do: [ :xPositionAttendu| 		escargot avanceDUnPas.		self assert: escargot position x equals: xPositionAttendu ].! !!TestEscargot methodsFor: 'testing' stamp: 'NouryBouraqadi 3/6/2015 17:41'!setUp	super setUp.	escargot := Escargot new! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TestEscargot class	instanceVariableNames: 'escargot'!Announcement subclass: #EvenementEscargotSort	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CourseEscargots'!Announcement subclass: #EvenementEscargotDort	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CourseEscargots'!Object subclass: #CourseDEscargots	instanceVariableNames: 'courseFinie escargots afficheursEscargots afficheurLigneArrivee'	classVariableNames: ''	poolDictionaries: ''	category: 'CourseEscargots'!!CourseDEscargots methodsFor: 'initialize-release' stamp: 'NouryBouraqadi 3/6/2015 18:41'!nouvelAfficheurPour: unEscargot	| afficheur |	afficheur := self classeAfficheurEscargot new.	unEscargot annonceur		on: EvenementEscargotBouge		send: #mettreAJourApresDeplacement:		to: afficheur.	unEscargot annonceur		on: EvenementEscargotDort		send: #mettreAJourApresSommeil:		to: afficheur.	unEscargot annonceur		on: EvenementEscargotSort		send: #mettreAJourApresReveil:		to: afficheur.	^afficheur! !!CourseDEscargots methodsFor: 'initialize-release' stamp: 'NouryBouraqadi 3/6/2015 18:52'!nouvelEscargot	| nouvelEscargot |	nouvelEscargot := self classeEscargot new.	nouvelEscargot course: self.	^nouvelEscargot! !!CourseDEscargots methodsFor: 'initialize-release' stamp: 'NouryBouraqadi 3/6/2015 19:22'!couleurLigneArrivee	^ Color yellow! !!CourseDEscargots methodsFor: 'initialize-release' stamp: 'NouryBouraqadi 3/6/2015 18:42'!classeAfficheurEscargot
	^AfficheurEscargot ! !!CourseDEscargots methodsFor: 'initialize-release' stamp: 'NouryBouraqadi 3/6/2015 19:21'!initialize	super initialize.	escargots := Set new.	self nombreEscargots timesRepeat: [ escargots add: self nouvelEscargot ].	afficheursEscargots := escargots collect: [ :unEscargot | self nouvelAfficheurPour: unEscargot ].	self nouvelAfficheurLigneArrivee! !!CourseDEscargots methodsFor: 'initialize-release' stamp: 'NouryBouraqadi 3/6/2015 19:24'!nouvelAfficheurLigneArrivee	afficheurLigneArrivee := Morph new.	afficheurLigneArrivee color: self couleurLigneArrivee.	afficheurLigneArrivee extent: self largeurLigneArrivee @ self hauteurLigneArrivee.	afficheurLigneArrivee position: self positionLigneArrivee ! !!CourseDEscargots methodsFor: 'initialize-release' stamp: 'NouryBouraqadi 3/6/2015 18:41'!classeEscargot	^Escargot ! !!CourseDEscargots methodsFor: 'initialize-release' stamp: 'NouryBouraqadi 3/6/2015 19:22'!largeurLigneArrivee	^10! !!CourseDEscargots methodsFor: 'initialize-release' stamp: 'NouryBouraqadi 3/6/2015 19:23'!hauteurLigneArrivee	^World extent y! !!CourseDEscargots methodsFor: 'initialize-release' stamp: 'NouryBouraqadi 3/6/2015 18:34'!nombreEscargots	^3! !!CourseDEscargots methodsFor: 'initialize-release' stamp: 'NouryBouraqadi 3/6/2015 19:24'!positionLigneArrivee 	^(self xArrivee - self largeurLigneArrivee) @ 0! !!CourseDEscargots methodsFor: 'affichage' stamp: 'NouryBouraqadi 3/6/2015 19:24'!arreterAffichage	afficheurLigneArrivee delete.	afficheursEscargots do: [:each| each arreterAffichage]! !!CourseDEscargots methodsFor: 'affichage' stamp: 'NouryBouraqadi 3/6/2015 19:24'!demarrerAffichage	afficheurLigneArrivee openInWorld.	afficheursEscargots do: [:each| each demarrerAffichage]! !!CourseDEscargots methodsFor: 'course' stamp: 'NouryBouraqadi 3/6/2015 18:48'!lancerLesEscargots	escargots do: [ :unEscargot |  unEscargot faireCourse]! !!CourseDEscargots methodsFor: 'course' stamp: 'NouryBouraqadi 3/6/2015 19:16'!xArrivee	^World extent x - 200! !!CourseDEscargots methodsFor: 'course' stamp: 'NouryBouraqadi 3/6/2015 19:14'!demarrerArbitrage	| arbitre |	arbitre := Arbitre pourCourse: self.	arbitre demarrerArbitrage ! !!CourseDEscargots methodsFor: 'course' stamp: 'NouryBouraqadi 3/6/2015 19:13'!demarrer	self courseFinie: false.	self reinitialiserLesPositionsDesEscargots.	self demarrerAffichage.	self demarrerArbitrage.	self lancerLesEscargots! !!CourseDEscargots methodsFor: 'course' stamp: 'NouryBouraqadi 3/6/2015 18:47'!reinitialiserLesPositionsDesEscargots	self positionInitiales with: escargots asArray do: [ :unPoint :unEscargot| 		unEscargot position: unPoint	]! !!CourseDEscargots methodsFor: 'course' stamp: 'NouryBouraqadi 3/6/2015 18:53'!arreter	self courseFinie: true! !!CourseDEscargots methodsFor: 'course' stamp: 'NouryBouraqadi 3/6/2015 18:48'!positionInitiales	^{		0@100.		0@300.		0@600	}! !!CourseDEscargots methodsFor: 'accessing' stamp: 'NouryBouraqadi 3/6/2015 19:17'!escargots	^ escargots! !!CourseDEscargots methodsFor: 'accessing' stamp: 'NouryBouraqadi 3/6/2015 19:17'!dureeUnPasDeTemps	^100 milliSeconds! !!CourseDEscargots methodsFor: 'accessing' stamp: 'NouryBouraqadi 3/6/2015 18:28'!courseFinie	^ courseFinie! !!CourseDEscargots methodsFor: 'accessing' stamp: 'NouryBouraqadi 3/6/2015 18:28'!courseFinie: anObject	courseFinie := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CourseDEscargots class	instanceVariableNames: 'defaultInstance'!!CourseDEscargots class methodsFor: 'accessing' stamp: 'NouryBouraqadi 3/6/2015 19:29'!resetDefaultInstance	defaultInstance ifNil: [ ^self ].	defaultInstance arreter.	defaultInstance arreterAffichage.	defaultInstance := nil! !!CourseDEscargots class methodsFor: 'accessing' stamp: 'NouryBouraqadi 3/6/2015 19:28'!defaultInstance	^defaultInstance ifNil: [ defaultInstance := self new ]! !Object subclass: #AfficheurEscargot	instanceVariableNames: 'position estAffiche imageCourante imageEscargot imageCoquille'	classVariableNames: ''	poolDictionaries: ''	category: 'CourseEscargots'!!AfficheurEscargot methodsFor: 'observation' stamp: 'NouryBouraqadi 3/3/2015 17:09'!mettreAJourApresReveil: evenementReveil	self sort! !!AfficheurEscargot methodsFor: 'observation' stamp: 'NouryBouraqadi 3/3/2015 16:44'!mettreAJourApresDeplacement: evenementDeplacement	self position: evenementDeplacement nouvellePosition	! !!AfficheurEscargot methodsFor: 'observation' stamp: 'NouryBouraqadi 3/3/2015 17:09'!mettreAJourApresSommeil: evenementSommeil	self rentre! !!AfficheurEscargot methodsFor: 'initialize-release' stamp: 'NouryBouraqadi 3/6/2015 17:11'!initialize	super initialize.	position := self positionParDefaut.	estAffiche := self estAfficheParDefaut.	imageEscargot := self image: self nomImageEscargot.	imageCoquille := self image: self nomImageCoquille.	self sort! !!AfficheurEscargot methodsFor: 'initialize-release' stamp: 'NouryBouraqadi 3/6/2015 17:11'!nomImageCoquille	^ 'coquille.png'! !!AfficheurEscargot methodsFor: 'initialize-release' stamp: 'NouryBouraqadi 3/3/2015 16:52'!image: nomFichier	^ImageMorph withForm: (Form fromFileNamed: nomFichier)! !!AfficheurEscargot methodsFor: 'initialize-release' stamp: 'NouryBouraqadi 3/3/2015 16:57'!estAfficheParDefaut	^false! !!AfficheurEscargot methodsFor: 'initialize-release' stamp: 'NouryBouraqadi 3/3/2015 16:43'!positionParDefaut	^0@0! !!AfficheurEscargot methodsFor: 'initialize-release' stamp: 'NouryBouraqadi 3/6/2015 17:11'!nomImageEscargot	^ 'escargot.png'! !!AfficheurEscargot methodsFor: 'affichage' stamp: 'NouryBouraqadi 3/3/2015 16:48'!demarrerAffichage	estAffiche := true.	imageCourante openInWorld! !!AfficheurEscargot methodsFor: 'affichage' stamp: 'NouryBouraqadi 3/3/2015 16:55'!imageCourante: nouvelleImage	| doitEtreAffiche |	doitEtreAffiche := estAffiche.	doitEtreAffiche ifTrue: [		self arreterAffichage].	imageCourante := nouvelleImage.	imageCourante position: self position.	doitEtreAffiche ifTrue: [		self demarrerAffichage]! !!AfficheurEscargot methodsFor: 'affichage' stamp: 'NouryBouraqadi 3/3/2015 16:56'!sort	self imageCourante: imageEscargot! !!AfficheurEscargot methodsFor: 'affichage' stamp: 'NouryBouraqadi 3/3/2015 16:48'!arreterAffichage	estAffiche := false.	imageCourante delete! !!AfficheurEscargot methodsFor: 'affichage' stamp: 'NouryBouraqadi 3/3/2015 16:58'!rentre	self imageCourante: imageCoquille! !!AfficheurEscargot methodsFor: 'accessing' stamp: 'NouryBouraqadi 3/3/2015 16:45'!position	^ position! !!AfficheurEscargot methodsFor: 'accessing' stamp: 'NouryBouraqadi 3/3/2015 16:48'!position: unPoint	position := unPoint.	imageCourante position: unPoint! !
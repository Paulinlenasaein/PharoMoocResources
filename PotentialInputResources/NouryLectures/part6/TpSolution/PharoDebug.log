THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Object class>>announcer
3 March 2015 3:46:34.31295 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

Object class(Object)>>doesNotUnderstand: #announcer
	Receiver: Object
	Arguments and temporary variables: 
		aMessage: 	announcer
		exception: 	MessageNotUnderstood: Object class>>announcer
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 349)
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{BalloonState. UndefinedObject. Boolean. FillStyle. ConnectionQueue...etc...
		name: 	#Object
		classPool: 	a Dictionary(#DependentsFields->a WeakIdentityKeyDictionary(a HelpBr...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'Object announcer'
		itsSelection: 	a Text for 'Object announcer'
		itsSelectionString: 	'Object announcer'
	Receiver's instance variables: 
		ast: 	DoIt
	^ Object announcer
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
printString := [ result printString ]
	on: Error
	do: [ '<...etc...
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(102236160)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[ 
(oldEditor := textMorph editor)
	evaluateSelectionAndDo: [ :result | 
		printString := [ result printString ]
			on: Error
			do: [ '<error in printString: try ''Inspect it'' to debug>' ].
		selectionInterval := oldEditor selectionInterval.
		textMorph installEditorToReplace: oldEditor.
		textMorph handleEdit: [ oldEditor afterSelectionInsertAndSelect: printString ].
		selectionInterval := oldEditor selectionInterval.
		textMorph editor selectFrom: selectionInterval first to: selectionInterval last.
		self scrollSelectionIntoView ] ] in PluggableTextMorph>>printIt
	Receiver: a PluggableTextMorph(290979840)
	Arguments and temporary variables: 
		oldEditor: 	a SmalltalkEditor
		printString: 	nil
	Receiver's instance variables: 
		bounds: 	(1154.0@524.0) corner: (1594.0@691.0)
		owner: 	a SystemWindow(504627200)
		submorphs: 	an Array(a TransformMorph(223346688))
		fullBounds: 	(1154@524) corner: (1594@691)
		color: 	Color white
		extension: 	a MorphExtension (81002496) [other:  (kmDispatcher -> a KMDispatcher...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(330825728)
		scroller: 	a TransformMorph(223346688)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(246939648)
		textMorph: 	a TextMorphForEditView(102236160)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(17 to: 16)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(102236160)
	Arguments and temporary variables: 
		editBlock: 	[ 
(oldEditor := textMorph editor)
	evaluateSelectionAndDo: [ :resul...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@18)
		owner: 	a TransformMorph(223346688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@18)
		color: 	Color black
		extension: 	a MorphExtension (163053568) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'Object announcer'
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(290979840)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>printIt
	Receiver: a PluggableTextMorph(290979840)
	Arguments and temporary variables: 
		oldEditor: 	a SmalltalkEditor
		printString: 	nil
	Receiver's instance variables: 
		bounds: 	(1154.0@524.0) corner: (1594.0@691.0)
		owner: 	a SystemWindow(504627200)
		submorphs: 	an Array(a TransformMorph(223346688))
		fullBounds: 	(1154@524) corner: (1594@691)
		color: 	Color white
		extension: 	a MorphExtension (81002496) [other:  (kmDispatcher -> a KMDispatcher...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(330825728)
		scroller: 	a TransformMorph(223346688)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(246939648)
		textMorph: 	a TextMorphForEditView(102236160)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(17 to: 16)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


[ :morph | morph printIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: SmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		morph: 	a PluggableTextMorph(290979840)
	Receiver's instance variables: 
		superclass: 	TextEditor
		methodDict: 	a MethodDictionary(#argAdvance:->SmalltalkEditor>>#argAdvance: #bro...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SmalltalkEditor
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Text-Edition'
		traitComposition: 	{}
		localSelectors: 	nil
		cmdActions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop...etc...
		shiftCmdActions: 	#(#noop: #argAdvance: #noop: #compareToClipboard: #debugIt: #m...etc...


BlockClosure>>cull:
	Receiver: [ :morph | morph printIt ]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(290979840)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	277
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :morph | morph printIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(290979840)
		secondArg: 	a PluggableTextMorph(290979840)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	277
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [ :morph | morph printIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(290979840)
		secondArg: 	a PluggableTextMorph(290979840)
		thirdArg: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	277
		numArgs: 	1


KMCategoryBinding>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#printIt on Cmd + P do [ :morph | morph printIt ]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(290979840)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(290979840)


[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #printIt on Cmd + P do [ :morph | morph printIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		l: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		action: 	[ :morph | morph printIt ]
		name: 	#printIt
		shortcut: 	Cmd + P
		defaultShortcut: 	Cmd + P
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[ :l | l completeMatch: self buffer: aBuffer ]
		index: 	1
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #printIt on Cmd + P do [ :morph | morph printIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[ :morph | morph printIt ]
		name: 	#printIt
		shortcut: 	Cmd + P
		defaultShortcut: 	Cmd + P
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #printIt on Cmd + P do [ :morph | morph printIt ]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		action: 	[ :morph | morph printIt ]
		name: 	#printIt
		shortcut: 	Cmd + P
		defaultShortcut: 	Cmd + P
		description: 	''


[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
		entry: 	#printIt on Cmd + P do [ :morph | morph printIt ]

	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


Set>>do:
	Receiver: a Set(#inspectIt on Cmd + I do [ :morph | morph inspectIt ]
 #sendersOfIt on Cmd + N do [ ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andD...etc...
		index: 	5
		each: 	#printIt on Cmd + P do [ :morph | morph printIt ]

	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(#inspectIt on Cmd + I do [ :morph | morph inspectIt ]
 #senders...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		aListener: 	a KMDispatcher
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(290979840)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(290979840)


[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a PluggableTextMorph(290979840)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#MorphFocusCtrlNavigation) a...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyM...etc...
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#MorphFocusCtrlNavigat...etc...
		firstIndex: 	1
		lastIndex: 	7


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a PluggableTextMorph(290979840)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a PluggableTextMorph(290979840)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
		targetToDispatch: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>do:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aBlock: 	[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstan...etc...
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-p>']
		chain: 	a KMDispatchChain
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a TextMorphForEditView(102236160)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(102236160)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@18)
		owner: 	a TransformMorph(223346688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@18)
		color: 	Color black
		extension: 	a MorphExtension (163053568) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'Object announcer'
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(290979840)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(102236160)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@18)
		owner: 	a TransformMorph(223346688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@18)
		color: 	Color black
		extension: 	a MorphExtension (163053568) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'Object announcer'
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(290979840)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-p>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(102236160)
	Receiver's instance variables: 
		timeStamp: 	90408
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	(60@28.0)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	112
		scanCode: 	35


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(102236160)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@18)
		owner: 	a TransformMorph(223346688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@18)
		color: 	Color black
		extension: 	a MorphExtension (163053568) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'Object announcer'
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(290979840)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(102236160)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@18)
		owner: 	a TransformMorph(223346688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@18)
		color: 	Color black
		extension: 	a MorphExtension (163053568) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'Object announcer'
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(290979840)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(102236160)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1218@553) corner: (1234@569)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1218@553) corner: (1234@569)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(102236160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1218@553) mouseOver nil nil]
		targetOffset: 	(28.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 84093 1218 553 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1150)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(504627200) a Nauti...etc...
		fullBounds: 	(0@0) corner: (1920@1150)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.063 g: 0.063 b: 0.063 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(102236160)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(1218@553) corner: (1234@569)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1218@553) corner: (1234@569)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(102236160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1218@553) mouseOver nil nil]
		targetOffset: 	(28.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 84093 1218 553 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(102236160)
		aBlock: 	[ self keyboardFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1218@553) corner: (1234@569)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1218@553) corner: (1234@569)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(102236160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1218@553) mouseOver nil nil]
		targetOffset: 	(28.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 84093 1218 553 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	(1218@553) corner: (1234@569)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1218@553) corner: (1234@569)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(102236160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1218@553) mouseOver nil nil]
		targetOffset: 	(28.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 84093 1218 553 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8



--- The full stack ---
Object class(Object)>>doesNotUnderstand: #announcer
UndefinedObject>>DoIt
OpalCompiler>>evaluate
SmalltalkEditor>>evaluateSelectionAndDo:
[ 
(oldEditor := textMorph editor)
	evaluateSelectionAndDo: [ :result | 
		printString := [ result printString ]
			on: Error
			do: [ '<error in printString: try ''Inspect it'' to debug>' ].
		selectionInterval := oldEditor selectionInterval.
		textMorph installEditorToReplace: oldEditor.
		textMorph handleEdit: [ oldEditor afterSelectionInsertAndSelect: printString ].
		selectionInterval := oldEditor selectionInterval.
		textMorph editor selectFrom: selectionInterval first to: selectionInterval last.
		self scrollSelectionIntoView ] ] in PluggableTextMorph>>printIt
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>printIt
[ :morph | morph printIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "asNautilusSelection" is nil
3 March 2015 3:50:57.160332 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

PackageTreeNautilus class>>parentOfClass:
	Receiver: PackageTreeNautilus
	Arguments and temporary variables: 
		aClass: 	AnObsoleteTestBalleRealiste class
		package: 	a RPackage(_UnpackagedPackage)
		tag: 	nil
	Receiver's instance variables: 
		superclass: 	Nautilus
		methodDict: 	a MethodDictionary(#defaultUIClass->PackageTreeNautilus>>#defaultUI...etc...
		format: 	164
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PackageTreeNautilus
		classPool: 	a Dictionary(#ShowGroupsOnTop->true )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Nautilus-Tree'
		traitComposition: 	{}
		localSelectors: 	nil
		populateMethodList: 	nil
		emptyCommentWarning: 	nil
		groups: 	a GroupHolder
		maxSize: 	10
		useOldStyleKeys: 	nil


PackageTreeNautilus(Nautilus)>>parentOfClass:
	Receiver: a PackageTreeNautilus
	Arguments and temporary variables: 
		aClass: 	AnObsoleteTestBalleRealiste class
	Receiver's instance variables: 
		announcer: 	a NautilusAnnouncer
		browsedEnvironment: 	Smalltalk
		browsingHistory: 	a NavigationHistory
		plugins: 	an OrderedCollection()
		selectedCategory: 	nil
		selectedClass: 	nil
		selectedGroup: 	nil
		selectedMethod: 	nil
		selectedPackage: 	a PackageTreePackageSelection
		showCategories: 	true
		showComment: 	false
		showGroups: 	false
		showHierarchy: 	true
		showInstance: 	false
		showPackages: 	true
		ui: 	a PackageTreeNautilusUI
		uiClass: 	nil


PackageTreeNautilusUI(NautilusUI)>>parentOfClass:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aClass: 	AnObsoleteTestBalleRealiste class
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(751828992)
		hierarchyClass: 	Courbe
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(15990784)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(a PackageTreePackageSelection->true a RPackage(...etc...
		classesSelection: 	a Dictionary()
		list: 	a MorphTreeMorph(377749504)
		list2: 	a PluggableIconListMorph(1038876672)
		sourceCodePanel: 	a PanelMorph(915931136)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(919863296)
		list2Elements: 	{AfficheurGraphiqueDeBalle. BalleSimple. BalleRebondissante. Bal...etc...
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(15990784)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(639369216)
		contentSelection: 	nil
		acceptor: 	a ClassDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(785383424)


PackageTreeNautilusUI(NautilusUI)>>selectedClassWithoutChangingSelection:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aClass: 	AnObsoleteTestBalleRealiste class
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(751828992)
		hierarchyClass: 	Courbe
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(15990784)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(a PackageTreePackageSelection->true a RPackage(...etc...
		classesSelection: 	a Dictionary()
		list: 	a MorphTreeMorph(377749504)
		list2: 	a PluggableIconListMorph(1038876672)
		sourceCodePanel: 	a PanelMorph(915931136)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(919863296)
		list2Elements: 	{AfficheurGraphiqueDeBalle. BalleSimple. BalleRebondissante. Bal...etc...
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(15990784)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(639369216)
		contentSelection: 	nil
		acceptor: 	a ClassDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(785383424)


PackageTreeNautilusUI(AbstractNautilusUI)>>selectedClass:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aClass: 	AnObsoleteTestBalleRealiste class
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(751828992)
		hierarchyClass: 	Courbe
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(15990784)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(a PackageTreePackageSelection->true a RPackage(...etc...
		classesSelection: 	a Dictionary()
		list: 	a MorphTreeMorph(377749504)
		list2: 	a PluggableIconListMorph(1038876672)
		sourceCodePanel: 	a PanelMorph(915931136)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(919863296)
		list2Elements: 	{AfficheurGraphiqueDeBalle. BalleSimple. BalleRebondissante. Bal...etc...
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(15990784)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(639369216)
		contentSelection: 	nil
		acceptor: 	a ClassDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(785383424)


PackageTreeNautilusUI>>updateBothView
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		selectedPackage: 	a PackageTreePackageSelection
		selectedClass: 	AnObsoleteTestBalleRealiste class
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(751828992)
		hierarchyClass: 	Courbe
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(15990784)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(a PackageTreePackageSelection->true a RPackage(...etc...
		classesSelection: 	a Dictionary()
		list: 	a MorphTreeMorph(377749504)
		list2: 	a PluggableIconListMorph(1038876672)
		sourceCodePanel: 	a PanelMorph(915931136)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(919863296)
		list2Elements: 	{AfficheurGraphiqueDeBalle. BalleSimple. BalleRebondissante. Bal...etc...
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(15990784)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(639369216)
		contentSelection: 	nil
		acceptor: 	a ClassDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(785383424)


PackageTreeNautilusUI(AbstractNautilusUI)>>classRemoved:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		class: 	AnObsoleteTestBalleRealiste
		oldPackage: 	a RPackage(SimulationBalle)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(751828992)
		hierarchyClass: 	Courbe
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(15990784)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(a PackageTreePackageSelection->true a RPackage(...etc...
		classesSelection: 	a Dictionary()
		list: 	a MorphTreeMorph(377749504)
		list2: 	a PluggableIconListMorph(1038876672)
		sourceCodePanel: 	a PanelMorph(915931136)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(919863296)
		list2Elements: 	{AfficheurGraphiqueDeBalle. BalleSimple. BalleRebondissante. Bal...etc...
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(15990784)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(639369216)
		contentSelection: 	nil
		acceptor: 	a ClassDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(785383424)


WeakMessageSend>>value:
	Receiver: WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)
	Arguments and temporary variables: 
		anObject: 	a ClassRemoved
	Receiver's instance variables: 
		selector: 	#classRemoved:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


WeakMessageSend>>cull:
	Receiver: WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)
	Arguments and temporary variables: 
		arg: 	a ClassRemoved
	Receiver's instance variables: 
		selector: 	#classRemoved:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


WeakMessageSend>>cull:cull:
	Receiver: WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)
	Arguments and temporary variables: 
		arg1: 	a ClassRemoved
		arg2: 	a SystemAnnouncer
	Receiver's instance variables: 
		selector: 	#classRemoved:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


[ action cull: anAnnouncement cull: announcer ] in WeakAnnouncementSubscription>>deliver:
	Receiver: a WeakAnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
	Receiver's instance variables: 
		list: 	a WeakFinalizationList
		next: 	nil
		announcer: 	a SystemAnnouncer
		announcementClass: 	ClassRemoved
		action: 	WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	WeakAnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


[ Processor terminateActive ] in [ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx := thisContext.
thisCtx := onDoCtx home.	"find the context on stack for which this method's is sender"
[ onDoCtx sender == thisCtx ]
	whileFalse: [ 
		onDoCtx := onDoCtx sender.
		onDoCtx
			ifNil: [ 
				"Can't find our home context. seems like we're already forked
				and handling another exception in new thread. In this case, just pass it through handler."
				^ handlerAction cull: ex ] ].
bottom := [ Processor terminateActive ] asContext.
onDoCtx privSender: bottom.
handler := [ handlerAction cull: ex ] asContext.
handler privSender: thisContext sender.
(Process forContext: handler priority: Processor activePriority) resume.	"cut the stack of current process"
thisContext privSender: thisCtx.
nil ] in BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	nil
		ex: 	UnhandledError
		copy: 	nil
		onDoCtx: 	nil
		process: 	nil
		handler: 	nil
		bottom: 	nil
		thisCtx: 	nil
	Receiver's instance variables: 
		outerContext: 	WeakAnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
PackageTreeNautilus class>>parentOfClass:
PackageTreeNautilus(Nautilus)>>parentOfClass:
PackageTreeNautilusUI(NautilusUI)>>parentOfClass:
PackageTreeNautilusUI(NautilusUI)>>selectedClassWithoutChangingSelection:
PackageTreeNautilusUI(AbstractNautilusUI)>>selectedClass:
PackageTreeNautilusUI>>updateBothView
PackageTreeNautilusUI(AbstractNautilusUI)>>classRemoved:
WeakMessageSend>>value:
WeakMessageSend>>cull:
WeakMessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in WeakAnnouncementSubscription>>deliver:
BlockClosure>>on:do:
[ Processor terminateActive ] in [ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx := thisContext.
thisCtx := onDoCtx home.	"find the context on stack for which this method's is sender"
[ onDoCtx sender == thisCtx ]
	whileFalse: [ 
		onDoCtx := onDoCtx sender.
		onDoCtx
			ifNil: [ 
				"Can't find our home context. seems like we're already forked
				and handling another exception in new thread. In this case, just pass it through handler."
				^ handlerAction cull: ex ] ].
bottom := [ Processor terminateActive ] asContext.
onDoCtx privSender: bottom.
handler := [ handlerAction cull: ex ] asContext.
handler privSender: thisContext sender.
(Process forContext: handler priority: Processor activePriority) resume.	"cut the stack of current process"
thisContext privSender: thisCtx.
nil ] in BlockClosure>>on:fork:
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "asNautilusSelection" is nil
3 March 2015 3:51:05.069935 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

PackageTreeNautilus class>>parentOfClass:
	Receiver: PackageTreeNautilus
	Arguments and temporary variables: 
		aClass: 	AnObsoleteSimulationBalleRealiste class
		package: 	a RPackage(_UnpackagedPackage)
		tag: 	nil
	Receiver's instance variables: 
		superclass: 	Nautilus
		methodDict: 	a MethodDictionary(#defaultUIClass->PackageTreeNautilus>>#defaultUI...etc...
		format: 	164
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PackageTreeNautilus
		classPool: 	a Dictionary(#ShowGroupsOnTop->true )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Nautilus-Tree'
		traitComposition: 	{}
		localSelectors: 	nil
		populateMethodList: 	nil
		emptyCommentWarning: 	nil
		groups: 	a GroupHolder
		maxSize: 	10
		useOldStyleKeys: 	nil


PackageTreeNautilus(Nautilus)>>parentOfClass:
	Receiver: a PackageTreeNautilus
	Arguments and temporary variables: 
		aClass: 	AnObsoleteSimulationBalleRealiste class
	Receiver's instance variables: 
		announcer: 	a NautilusAnnouncer
		browsedEnvironment: 	Smalltalk
		browsingHistory: 	a NavigationHistory
		plugins: 	an OrderedCollection()
		selectedCategory: 	nil
		selectedClass: 	nil
		selectedGroup: 	nil
		selectedMethod: 	nil
		selectedPackage: 	a PackageTreePackageSelection
		showCategories: 	true
		showComment: 	false
		showGroups: 	false
		showHierarchy: 	true
		showInstance: 	false
		showPackages: 	true
		ui: 	a PackageTreeNautilusUI
		uiClass: 	nil


PackageTreeNautilusUI(NautilusUI)>>parentOfClass:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aClass: 	AnObsoleteSimulationBalleRealiste class
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(751828992)
		hierarchyClass: 	Courbe
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(15990784)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(a PackageTreePackageSelection->true a RPackage(...etc...
		classesSelection: 	a Dictionary()
		list: 	a MorphTreeMorph(377749504)
		list2: 	a PluggableIconListMorph(1038876672)
		sourceCodePanel: 	a PanelMorph(915931136)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(919863296)
		list2Elements: 	{AfficheurGraphiqueDeBalle. BalleSimple. BalleRebondissante. Bal...etc...
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(15990784)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(639369216)
		contentSelection: 	nil
		acceptor: 	a ClassDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(785383424)


PackageTreeNautilusUI(NautilusUI)>>selectedClassWithoutChangingSelection:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aClass: 	AnObsoleteSimulationBalleRealiste class
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(751828992)
		hierarchyClass: 	Courbe
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(15990784)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(a PackageTreePackageSelection->true a RPackage(...etc...
		classesSelection: 	a Dictionary()
		list: 	a MorphTreeMorph(377749504)
		list2: 	a PluggableIconListMorph(1038876672)
		sourceCodePanel: 	a PanelMorph(915931136)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(919863296)
		list2Elements: 	{AfficheurGraphiqueDeBalle. BalleSimple. BalleRebondissante. Bal...etc...
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(15990784)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(639369216)
		contentSelection: 	nil
		acceptor: 	a ClassDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(785383424)


PackageTreeNautilusUI(AbstractNautilusUI)>>selectedClass:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aClass: 	AnObsoleteSimulationBalleRealiste class
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(751828992)
		hierarchyClass: 	Courbe
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(15990784)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(a PackageTreePackageSelection->true a RPackage(...etc...
		classesSelection: 	a Dictionary()
		list: 	a MorphTreeMorph(377749504)
		list2: 	a PluggableIconListMorph(1038876672)
		sourceCodePanel: 	a PanelMorph(915931136)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(919863296)
		list2Elements: 	{AfficheurGraphiqueDeBalle. BalleSimple. BalleRebondissante. Bal...etc...
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(15990784)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(639369216)
		contentSelection: 	nil
		acceptor: 	a ClassDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(785383424)


PackageTreeNautilusUI>>updateBothView
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		selectedPackage: 	a PackageTreePackageSelection
		selectedClass: 	AnObsoleteSimulationBalleRealiste class
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(751828992)
		hierarchyClass: 	Courbe
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(15990784)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(a PackageTreePackageSelection->true a RPackage(...etc...
		classesSelection: 	a Dictionary()
		list: 	a MorphTreeMorph(377749504)
		list2: 	a PluggableIconListMorph(1038876672)
		sourceCodePanel: 	a PanelMorph(915931136)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(919863296)
		list2Elements: 	{AfficheurGraphiqueDeBalle. BalleSimple. BalleRebondissante. Bal...etc...
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(15990784)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(639369216)
		contentSelection: 	nil
		acceptor: 	a ClassDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(785383424)


PackageTreeNautilusUI(AbstractNautilusUI)>>classRemoved:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		class: 	AnObsoleteSimulationBalleRealiste
		oldPackage: 	a RPackage(SimulationBalle)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(751828992)
		hierarchyClass: 	Courbe
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(15990784)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(a PackageTreePackageSelection->true a RPackage(...etc...
		classesSelection: 	a Dictionary()
		list: 	a MorphTreeMorph(377749504)
		list2: 	a PluggableIconListMorph(1038876672)
		sourceCodePanel: 	a PanelMorph(915931136)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(919863296)
		list2Elements: 	{AfficheurGraphiqueDeBalle. BalleSimple. BalleRebondissante. Bal...etc...
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(15990784)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(639369216)
		contentSelection: 	nil
		acceptor: 	a ClassDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(785383424)


WeakMessageSend>>value:
	Receiver: WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)
	Arguments and temporary variables: 
		anObject: 	a ClassRemoved
	Receiver's instance variables: 
		selector: 	#classRemoved:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


WeakMessageSend>>cull:
	Receiver: WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)
	Arguments and temporary variables: 
		arg: 	a ClassRemoved
	Receiver's instance variables: 
		selector: 	#classRemoved:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


WeakMessageSend>>cull:cull:
	Receiver: WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)
	Arguments and temporary variables: 
		arg1: 	a ClassRemoved
		arg2: 	a SystemAnnouncer
	Receiver's instance variables: 
		selector: 	#classRemoved:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


[ action cull: anAnnouncement cull: announcer ] in WeakAnnouncementSubscription>>deliver:
	Receiver: a WeakAnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
	Receiver's instance variables: 
		list: 	a WeakFinalizationList
		next: 	nil
		announcer: 	a SystemAnnouncer
		announcementClass: 	ClassRemoved
		action: 	WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	WeakAnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


[ Processor terminateActive ] in [ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx := thisContext.
thisCtx := onDoCtx home.	"find the context on stack for which this method's is sender"
[ onDoCtx sender == thisCtx ]
	whileFalse: [ 
		onDoCtx := onDoCtx sender.
		onDoCtx
			ifNil: [ 
				"Can't find our home context. seems like we're already forked
				and handling another exception in new thread. In this case, just pass it through handler."
				^ handlerAction cull: ex ] ].
bottom := [ Processor terminateActive ] asContext.
onDoCtx privSender: bottom.
handler := [ handlerAction cull: ex ] asContext.
handler privSender: thisContext sender.
(Process forContext: handler priority: Processor activePriority) resume.	"cut the stack of current process"
thisContext privSender: thisCtx.
nil ] in BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	nil
		ex: 	UnhandledError
		copy: 	nil
		onDoCtx: 	nil
		process: 	nil
		handler: 	nil
		bottom: 	nil
		thisCtx: 	nil
	Receiver's instance variables: 
		outerContext: 	WeakAnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
PackageTreeNautilus class>>parentOfClass:
PackageTreeNautilus(Nautilus)>>parentOfClass:
PackageTreeNautilusUI(NautilusUI)>>parentOfClass:
PackageTreeNautilusUI(NautilusUI)>>selectedClassWithoutChangingSelection:
PackageTreeNautilusUI(AbstractNautilusUI)>>selectedClass:
PackageTreeNautilusUI>>updateBothView
PackageTreeNautilusUI(AbstractNautilusUI)>>classRemoved:
WeakMessageSend>>value:
WeakMessageSend>>cull:
WeakMessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in WeakAnnouncementSubscription>>deliver:
BlockClosure>>on:do:
[ Processor terminateActive ] in [ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx := thisContext.
thisCtx := onDoCtx home.	"find the context on stack for which this method's is sender"
[ onDoCtx sender == thisCtx ]
	whileFalse: [ 
		onDoCtx := onDoCtx sender.
		onDoCtx
			ifNil: [ 
				"Can't find our home context. seems like we're already forked
				and handling another exception in new thread. In this case, just pass it through handler."
				^ handlerAction cull: ex ] ].
bottom := [ Processor terminateActive ] asContext.
onDoCtx privSender: bottom.
handler := [ handlerAction cull: ex ] asContext.
handler privSender: thisContext sender.
(Process forContext: handler priority: Processor activePriority) resume.	"cut the stack of current process"
thisContext privSender: thisCtx.
nil ] in BlockClosure>>on:fork:
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "effacer" is nil
3 March 2015 3:52:43.806055 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

UndefinedObject(Object)>>doesNotUnderstand: #effacer
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	effacer
		exception: 	MessageNotUnderstood: receiver of "effacer" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

SimulationBalleRebondissante(Simulation)>>effacerCourbe
	Receiver: a SimulationBalleRebondissante
	Arguments and temporary variables: 

	Receiver's instance variables: 
		balle: 	a BalleRebondissante
		afficheur: 	an AfficheurGraphiqueDeBalle
		courbe: 	nil
		thread: 	nil


SimulationBalleRebondissante(Simulation)>>reinitialiserSimulation
	Receiver: a SimulationBalleRebondissante
	Arguments and temporary variables: 

	Receiver's instance variables: 
		balle: 	a BalleRebondissante
		afficheur: 	an AfficheurGraphiqueDeBalle
		courbe: 	nil
		thread: 	nil


SimulationBalleRebondissante(Simulation)>>initialize
	Receiver: a SimulationBalleRebondissante
	Arguments and temporary variables: 

	Receiver's instance variables: 
		balle: 	a BalleRebondissante
		afficheur: 	an AfficheurGraphiqueDeBalle
		courbe: 	nil
		thread: 	nil


SimulationBalleRebondissante class(Behavior)>>new
	Receiver: SimulationBalleRebondissante
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Simulation
		methodDict: 	a MethodDictionary(#classeBalle->SimulationBalleRebondissante>>#cla...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SimulationBalleRebondissante
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#SimulationBalle
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'sim := SimulationBalleRebondissante new.'
		itsSelection: 	a Text for 'sim := SimulationBalleRebondissante new.'
		itsSelectionString: 	'sim := SimulationBalleRebondissante new.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ sim := SimulationBalleRebondissante new
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1034944512)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1034944512)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[ textMorph editor evaluateSelection ] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(180092928)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(768.0@109.0) corner: (1208.0@276.0)
		owner: 	a SystemWindow(80740352)
		submorphs: 	an Array(a TransformMorph(118489088))
		fullBounds: 	(768@109) corner: (1208@276)
		color: 	Color white
		extension: 	a MorphExtension (1013710848) [other:  (kmDispatcher -> a KMDispatch...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(219938816)
		scroller: 	a TransformMorph(118489088)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(136052736)
		textMorph: 	a TextMorphForEditView(1034944512)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(58 to: 57)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


[ result := editBlock value ] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(180092928)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph editor evaluateSelection ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(768.0@109.0) corner: (1208.0@276.0)
		owner: 	a SystemWindow(80740352)
		submorphs: 	an Array(a TransformMorph(118489088))
		fullBounds: 	(768@109) corner: (1208@276)
		color: 	Color white
		extension: 	a MorphExtension (1013710848) [other:  (kmDispatcher -> a KMDispatch...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(219938816)
		scroller: 	a TransformMorph(118489088)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(136052736)
		textMorph: 	a TextMorphForEditView(1034944512)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(58 to: 57)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(1034944512)
	Arguments and temporary variables: 
		editBlock: 	[ result := editBlock value ]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@82)
		owner: 	a TransformMorph(118489088)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@82)
		color: 	Color black
		extension: 	a MorphExtension (22020096) [other:  (kmDispatcher -> a KMDispatcher...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'sim arreterAffichage.
sim := SimulationBalleRebondissante new...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(180092928)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(180092928)
	Arguments and temporary variables: 
		result: 	nil
		editBlock: 	[ textMorph editor evaluateSelection ]
	Receiver's instance variables: 
		bounds: 	(768.0@109.0) corner: (1208.0@276.0)
		owner: 	a SystemWindow(80740352)
		submorphs: 	an Array(a TransformMorph(118489088))
		fullBounds: 	(768@109) corner: (1208@276)
		color: 	Color white
		extension: 	a MorphExtension (1013710848) [other:  (kmDispatcher -> a KMDispatch...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(219938816)
		scroller: 	a TransformMorph(118489088)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(136052736)
		textMorph: 	a TextMorphForEditView(1034944512)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(58 to: 57)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(180092928)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(768.0@109.0) corner: (1208.0@276.0)
		owner: 	a SystemWindow(80740352)
		submorphs: 	an Array(a TransformMorph(118489088))
		fullBounds: 	(768@109) corner: (1208@276)
		color: 	Color white
		extension: 	a MorphExtension (1013710848) [other:  (kmDispatcher -> a KMDispatch...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(219938816)
		scroller: 	a TransformMorph(118489088)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(136052736)
		textMorph: 	a TextMorphForEditView(1034944512)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(58 to: 57)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


[ :morph | morph doIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: SmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		morph: 	a PluggableTextMorph(180092928)
	Receiver's instance variables: 
		superclass: 	TextEditor
		methodDict: 	a MethodDictionary(#argAdvance:->SmalltalkEditor>>#argAdvance: #bro...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SmalltalkEditor
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Text-Edition'
		traitComposition: 	{}
		localSelectors: 	nil
		cmdActions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop...etc...
		shiftCmdActions: 	#(#noop: #argAdvance: #noop: #compareToClipboard: #debugIt: #m...etc...


BlockClosure>>cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(180092928)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	157
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(180092928)
		secondArg: 	a PluggableTextMorph(180092928)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	157
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(180092928)
		secondArg: 	a PluggableTextMorph(180092928)
		thirdArg: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	157
		numArgs: 	1


KMCategoryBinding>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#doIt on Cmd + D do [ :morph | morph doIt ]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(180092928)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(180092928)


[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Cmd + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		l: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[ :l | l completeMatch: self buffer: aBuffer ]
		index: 	1
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Cmd + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #doIt on Cmd + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
		entry: 	#doIt on Cmd + D do [ :morph | morph doIt ]

	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


Set>>do:
	Receiver: a Set(#inspectIt on Cmd + I do [ :morph | morph inspectIt ]
 #sendersOfIt on Cmd + N do [ ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andD...etc...
		index: 	9
		each: 	#doIt on Cmd + D do [ :morph | morph doIt ]

	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(#inspectIt on Cmd + I do [ :morph | morph inspectIt ]
 #senders...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aListener: 	a KMDispatcher
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(180092928)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(180092928)


[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#MorphFocusCtrl...etc...
		morph: 	a PluggableTextMorph(180092928)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCategoryTarg...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyM...etc...
		index: 	5
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCatego...etc...
		firstIndex: 	1
		lastIndex: 	7


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#MorphFocusCtrl...etc...
		morph: 	a PluggableTextMorph(180092928)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a PluggableTextMorph(180092928)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		targetToDispatch: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>do:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aBlock: 	[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstan...etc...
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
		chain: 	a KMDispatchChain
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextMorph) aKMCategoryTarget(#MorphFocusCtrlN...etc...
		morph: 	a TextMorphForEditView(1034944512)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(1034944512)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@82)
		owner: 	a TransformMorph(118489088)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@82)
		color: 	Color black
		extension: 	a MorphExtension (22020096) [other:  (kmDispatcher -> a KMDispatcher...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'sim arreterAffichage.
sim := SimulationBalleRebondissante new...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(180092928)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(1034944512)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@82)
		owner: 	a TransformMorph(118489088)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@82)
		color: 	Color black
		extension: 	a MorphExtension (22020096) [other:  (kmDispatcher -> a KMDispatcher...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'sim arreterAffichage.
sim := SimulationBalleRebondissante new...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(180092928)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-d>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(1034944512)
	Receiver's instance variables: 
		timeStamp: 	459922
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	(141.0@24.0)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	100
		charCode: 	100
		scanCode: 	2


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(1034944512)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@82)
		owner: 	a TransformMorph(118489088)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@82)
		color: 	Color black
		extension: 	a MorphExtension (22020096) [other:  (kmDispatcher -> a KMDispatcher...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'sim arreterAffichage.
sim := SimulationBalleRebondissante new...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(180092928)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #effacer
SimulationBalleRebondissante(Simulation)>>effacerCourbe
SimulationBalleRebondissante(Simulation)>>reinitialiserSimulation
SimulationBalleRebondissante(Simulation)>>initialize
SimulationBalleRebondissante class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[ textMorph editor evaluateSelection ] in PluggableTextMorph>>doIt
[ result := editBlock value ] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
[ :morph | morph doIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
3 March 2015 4:33:24.557486 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

ZLibReadStream(InflateStream)>>bitPosition
	Receiver: a ZLibReadStream
	Arguments and temporary variables: 

	Receiver's instance variables: 
		collection: 	#[1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0...etc...
		position: 	0
		readLimit: 	61302
		state: 	1
		bitBuf: 	0
		bitPos: 	2
		source: 	#[120 1 237 125 7 128 148 197 249 254 187 189 220 94 175 112 133 3 238 ...etc...
		sourcePos: 	17590
		sourceLimit: 	17594
		litTable: 	a WordArray(50331650 65539 67108898 16777226 83886176 65540 83886144 ...etc...
		distTable: 	a WordArray(50331650 524801 33554450 16777228 33554458 16777226 3355...etc...
		sourceStream: 	nil
		crc: 	1


ZLibReadStream(InflateStream)>>pastEndRead
	Receiver: a ZLibReadStream
	Arguments and temporary variables: 
		blockType: 	2
		bp: 	29
		oldLimit: 	0
	Receiver's instance variables: 
		collection: 	#[1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0...etc...
		position: 	0
		readLimit: 	61302
		state: 	1
		bitBuf: 	0
		bitPos: 	2
		source: 	#[120 1 237 125 7 128 148 197 249 254 187 189 220 94 175 112 133 3 238 ...etc...
		sourcePos: 	17590
		sourceLimit: 	17594
		litTable: 	a WordArray(50331650 65539 67108898 16777226 83886176 65540 83886144 ...etc...
		distTable: 	a WordArray(50331650 524801 33554450 16777228 33554458 16777226 3355...etc...
		sourceStream: 	nil
		crc: 	1


ZLibReadStream(InflateStream)>>next
	Receiver: a ZLibReadStream
	Arguments and temporary variables: 

	Receiver's instance variables: 
		collection: 	#[1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0...etc...
		position: 	0
		readLimit: 	61302
		state: 	1
		bitBuf: 	0
		bitPos: 	2
		source: 	#[120 1 237 125 7 128 148 197 249 254 187 189 220 94 175 112 133 3 238 ...etc...
		sourcePos: 	17590
		sourceLimit: 	17594
		litTable: 	a WordArray(50331650 65539 67108898 16777226 83886176 65540 83886144 ...etc...
		distTable: 	a WordArray(50331650 524801 33554450 16777228 33554458 16777226 3355...etc...
		sourceStream: 	nil
		crc: 	1


PNGReadWriter>>processNonInterlaced
	Receiver: a PNGReadWriter
	Arguments and temporary variables: 
		z: 	a ZLibReadStream
		filter: 	nil
		temp: 	nil
		copyMethod: 	#copyPixelsRGBA:
		debug: 	false
		y: 	0
	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/noury/Cours/Objet/07-Concurrence/TpSolutio...etc...
		chunk: 	#[]
		form: 	Form(150x102x32)
		width: 	150
		height: 	102
		depth: 	32
		backColor: 	nil
		bitsPerChannel: 	8
		colorType: 	6
		interlaceMethod: 	0
		bitsPerPixel: 	32
		bytesPerScanline: 	600
		thisScanline: 	#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0...etc...
		prevScanline: 	#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0...etc...
		rowSize: 	150
		idatChunkStream: 	a WriteStream
		unknownChunks: 	a Set('iCCP' 'iTXt')
		palette: 	nil
		transparentPixelValue: 	nil
		filtersSeen: 	a Bag()
		cachedDecoderMap: 	nil
		bigEndian: 	false


PNGReadWriter>>processIDATChunk
	Receiver: a PNGReadWriter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/noury/Cours/Objet/07-Concurrence/TpSolutio...etc...
		chunk: 	#[]
		form: 	Form(150x102x32)
		width: 	150
		height: 	102
		depth: 	32
		backColor: 	nil
		bitsPerChannel: 	8
		colorType: 	6
		interlaceMethod: 	0
		bitsPerPixel: 	32
		bytesPerScanline: 	600
		thisScanline: 	#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0...etc...
		prevScanline: 	#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0...etc...
		rowSize: 	150
		idatChunkStream: 	a WriteStream
		unknownChunks: 	a Set('iCCP' 'iTXt')
		palette: 	nil
		transparentPixelValue: 	nil
		filtersSeen: 	a Bag()
		cachedDecoderMap: 	nil
		bigEndian: 	false


PNGReadWriter>>nextImage
	Receiver: a PNGReadWriter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/noury/Cours/Objet/07-Concurrence/TpSolutio...etc...
		chunk: 	#[]
		form: 	Form(150x102x32)
		width: 	150
		height: 	102
		depth: 	32
		backColor: 	nil
		bitsPerChannel: 	8
		colorType: 	6
		interlaceMethod: 	0
		bitsPerPixel: 	32
		bytesPerScanline: 	600
		thisScanline: 	#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0...etc...
		prevScanline: 	#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0...etc...
		rowSize: 	150
		idatChunkStream: 	a WriteStream
		unknownChunks: 	a Set('iCCP' 'iTXt')
		palette: 	nil
		transparentPixelValue: 	nil
		filtersSeen: 	a Bag()
		cachedDecoderMap: 	nil
		bigEndian: 	false


[ 
form := reader nextImage.
reader close ] in ImageReadWriter class>>formFromStream:
	Receiver: ImageReadWriter
	Arguments and temporary variables: 
		aBinaryStream: 	MultiByteFileStream: '/Users/noury/Cours/Objet/07-Concurrence/Tp...etc...
		reader: 	a PNGReadWriter
		readerClass: 	PNGReadWriter
		form: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#atEnd->ImageReadWriter>>#atEnd #changePadOfBits...etc...
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	#('stream')
		organization: 	a ClassOrganization
		subclasses: 	{JPEGReadWriter. BMPReadWriter. GIFReadWriter. PluginBasedJPEGReadW...etc...
		name: 	#ImageReadWriter
		classPool: 	a Dictionary(#ImageNotStoredSignal->nil #MagicNumberErrorSignal->nil...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	nil
		category: 	#'Graphics-Files'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>ensure:
	Receiver: [ 
form := reader nextImage.
reader close ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ImageReadWriter class>>formFromStream:
		startpc: 	103
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r0
		2r0
		2r100000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
form := reader nextImage.
reader close ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ImageReadWriter class>>formFromStream:
	Receiver: ImageReadWriter
	Arguments and temporary variables: 
		form: 	nil
		aBinaryStream: 	MultiByteFileStream: '/Users/noury/Cours/Objet/07-Concurrence/Tp...etc...
		reader: 	a PNGReadWriter
		readerClass: 	PNGReadWriter
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#atEnd->ImageReadWriter>>#atEnd #changePadOfBits...etc...
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	#('stream')
		organization: 	a ClassOrganization
		subclasses: 	{JPEGReadWriter. BMPReadWriter. GIFReadWriter. PluginBasedJPEGReadW...etc...
		name: 	#ImageReadWriter
		classPool: 	a Dictionary(#ImageNotStoredSignal->nil #MagicNumberErrorSignal->nil...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	nil
		category: 	#'Graphics-Files'
		traitComposition: 	{}
		localSelectors: 	nil


Form class>>fromBinaryStream:
	Receiver: Form
	Arguments and temporary variables: 
		aBinaryStream: 	MultiByteFileStream: '/Users/noury/Cours/Objet/07-Concurrence/Tp...etc...
		firstByte: 	137
	Receiver's instance variables: 
		superclass: 	DisplayMedium
		methodDict: 	a MethodDictionary(size 198)
		format: 	140
		layout: 	a FixedLayout
		instanceVariables: 	#('bits' 'width' 'height' 'depth' 'offset')
		organization: 	a ClassOrganization
		subclasses: 	{Cursor. ColorForm. DisplayScreen. GlyphForm}
		name: 	#Form
		classPool: 	a Dictionary(#FloodFillTolerance->nil )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Graphics-Display Objects'
		traitComposition: 	{}
		localSelectors: 	nil


[ :aFile | 
aFile binary.
self fromBinaryStream: aFile ] in Form class>>fromFileNamed:
	Receiver: Form
	Arguments and temporary variables: 
		fileName: 	'escargotClipart.png'
		aFile: 	MultiByteFileStream: '/Users/noury/Cours/Objet/07-Concurrence/TpSolution...etc...
	Receiver's instance variables: 
		superclass: 	DisplayMedium
		methodDict: 	a MethodDictionary(size 198)
		format: 	140
		layout: 	a FixedLayout
		instanceVariables: 	#('bits' 'width' 'height' 'depth' 'offset')
		organization: 	a ClassOrganization
		subclasses: 	{Cursor. ColorForm. DisplayScreen. GlyphForm}
		name: 	#Form
		classPool: 	a Dictionary(#FloodFillTolerance->nil )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Graphics-Display Objects'
		traitComposition: 	{}
		localSelectors: 	nil


[ anotherBlock value: file ] in FileStream class>>detectFile:do:
	Receiver: FileStream
	Arguments and temporary variables: 
		aBlock: 	[ self readOnlyFileNamed: fileName ]
		anotherBlock: 	[ :aFile | 
aFile binary.
self fromBinaryStream: aFile ]
		file: 	MultiByteFileStream: '/Users/noury/Cours/Objet/07-Concurrence/TpSolution/...etc...
	Receiver's instance variables: 
		superclass: 	ReadWriteStream
		methodDict: 	a MethodDictionary(#asBinaryOrTextStream->FileStream>>#asBinaryOrTe...etc...
		format: 	140
		layout: 	a FixedLayout
		instanceVariables: 	#('rwmode')
		organization: 	a ClassOrganization
		subclasses: 	{StandardFileStream}
		name: 	#FileStream
		classPool: 	a Dictionary(#Stderr->MultiByteFileStream: #stderr #Stdin->nil #Stdi...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Files-Kernel'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>ensure:
	Receiver: [ anotherBlock value: file ]
	Arguments and temporary variables: 
		aBlock: 	[ file close ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	FileStream class>>detectFile:do:
		startpc: 	41
		numArgs: 	0


FileStream class>>detectFile:do:
	Receiver: FileStream
	Arguments and temporary variables: 
		aBlock: 	[ self readOnlyFileNamed: fileName ]
		anotherBlock: 	[ :aFile | 
aFile binary.
self fromBinaryStream: aFile ]
	Receiver's instance variables: 
		superclass: 	ReadWriteStream
		methodDict: 	a MethodDictionary(#asBinaryOrTextStream->FileStream>>#asBinaryOrTe...etc...
		format: 	140
		layout: 	a FixedLayout
		instanceVariables: 	#('rwmode')
		organization: 	a ClassOrganization
		subclasses: 	{StandardFileStream}
		name: 	#FileStream
		classPool: 	a Dictionary(#Stderr->MultiByteFileStream: #stderr #Stdin->nil #Stdi...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Files-Kernel'
		traitComposition: 	{}
		localSelectors: 	nil


FileStream class>>readOnlyFileNamed:do:
	Receiver: FileStream
	Arguments and temporary variables: 
		fileName: 	'escargotClipart.png'
		aBlock: 	[ :aFile | 
aFile binary.
self fromBinaryStream: aFile ]
	Receiver's instance variables: 
		superclass: 	ReadWriteStream
		methodDict: 	a MethodDictionary(#asBinaryOrTextStream->FileStream>>#asBinaryOrTe...etc...
		format: 	140
		layout: 	a FixedLayout
		instanceVariables: 	#('rwmode')
		organization: 	a ClassOrganization
		subclasses: 	{StandardFileStream}
		name: 	#FileStream
		classPool: 	a Dictionary(#Stderr->MultiByteFileStream: #stderr #Stdin->nil #Stdi...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Files-Kernel'
		traitComposition: 	{}
		localSelectors: 	nil


Form class>>fromFileNamed:
	Receiver: Form
	Arguments and temporary variables: 
		fileName: 	'escargotClipart.png'
	Receiver's instance variables: 
		superclass: 	DisplayMedium
		methodDict: 	a MethodDictionary(size 198)
		format: 	140
		layout: 	a FixedLayout
		instanceVariables: 	#('bits' 'width' 'height' 'depth' 'offset')
		organization: 	a ClassOrganization
		subclasses: 	{Cursor. ColorForm. DisplayScreen. GlyphForm}
		name: 	#Form
		classPool: 	a Dictionary(#FloodFillTolerance->nil )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Graphics-Display Objects'
		traitComposition: 	{}
		localSelectors: 	nil


ImageEscargot class>>new
	Receiver: ImageEscargot
	Arguments and temporary variables: 
		image: 	nil
	Receiver's instance variables: 
		superclass: 	ImageMorph
		methodDict: 	a MethodDictionary()
		format: 	144
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ImageEscargot
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#SimulationBalle
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ImageEscargot class(ImageMorph class)>>withForm:
	Receiver: ImageEscargot
	Arguments and temporary variables: 
		aForm: 	Form(150x102x32)
	Receiver's instance variables: 
		superclass: 	ImageMorph
		methodDict: 	a MethodDictionary()
		format: 	144
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ImageEscargot
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#SimulationBalle
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ImageEscargot class>>new
	Receiver: ImageEscargot
	Arguments and temporary variables: 
		image: 	nil
	Receiver's instance variables: 
		superclass: 	ImageMorph
		methodDict: 	a MethodDictionary()
		format: 	144
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ImageEscargot
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#SimulationBalle
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ImageEscargot class(ImageMorph class)>>withForm:
	Receiver: ImageEscargot
	Arguments and temporary variables: 
		aForm: 	Form(150x102x32)
	Receiver's instance variables: 
		superclass: 	ImageMorph
		methodDict: 	a MethodDictionary()
		format: 	144
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ImageEscargot
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#SimulationBalle
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ImageEscargot class>>new
	Receiver: ImageEscargot
	Arguments and temporary variables: 
		image: 	nil
	Receiver's instance variables: 
		superclass: 	ImageMorph
		methodDict: 	a MethodDictionary()
		format: 	144
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ImageEscargot
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#SimulationBalle
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ImageEscargot class(ImageMorph class)>>withForm:
	Receiver: ImageEscargot
	Arguments and temporary variables: 
		aForm: 	Form(150x102x32)
	Receiver's instance variables: 
		superclass: 	ImageMorph
		methodDict: 	a MethodDictionary()
		format: 	144
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ImageEscargot
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#SimulationBalle
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ImageEscargot class>>new
	Receiver: ImageEscargot
	Arguments and temporary variables: 
		image: 	nil
	Receiver's instance variables: 
		superclass: 	ImageMorph
		methodDict: 	a MethodDictionary()
		format: 	144
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ImageEscargot
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#SimulationBalle
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ImageEscargot class(ImageMorph class)>>withForm:
	Receiver: ImageEscargot
	Arguments and temporary variables: 
		aForm: 	Form(150x102x32)
	Receiver's instance variables: 
		superclass: 	ImageMorph
		methodDict: 	a MethodDictionary()
		format: 	144
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ImageEscargot
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#SimulationBalle
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ImageEscargot class>>new
	Receiver: ImageEscargot
	Arguments and temporary variables: 
		image: 	nil
	Receiver's instance variables: 
		superclass: 	ImageMorph
		methodDict: 	a MethodDictionary()
		format: 	144
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ImageEscargot
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#SimulationBalle
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ImageEscargot class(ImageMorph class)>>withForm:
	Receiver: ImageEscargot
	Arguments and temporary variables: 
		aForm: 	Form(150x102x32)
	Receiver's instance variables: 
		superclass: 	ImageMorph
		methodDict: 	a MethodDictionary()
		format: 	144
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ImageEscargot
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#SimulationBalle
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ImageEscargot class>>new
	Receiver: ImageEscargot
	Arguments and temporary variables: 
		image: 	nil
	Receiver's instance variables: 
		superclass: 	ImageMorph
		methodDict: 	a MethodDictionary()
		format: 	144
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ImageEscargot
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#SimulationBalle
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ImageEscargot class(ImageMorph class)>>withForm:
	Receiver: ImageEscargot
	Arguments and temporary variables: 
		aForm: 	Form(150x102x32)
	Receiver's instance variables: 
		superclass: 	ImageMorph
		methodDict: 	a MethodDictionary()
		format: 	144
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ImageEscargot
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#SimulationBalle
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ImageEscargot class>>new
	Receiver: ImageEscargot
	Arguments and temporary variables: 
		image: 	nil
	Receiver's instance variables: 
		superclass: 	ImageMorph
		methodDict: 	a MethodDictionary()
		format: 	144
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ImageEscargot
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#SimulationBalle
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ImageEscargot class(ImageMorph class)>>withForm:
	Receiver: ImageEscargot
	Arguments and temporary variables: 
		aForm: 	Form(150x102x32)
	Receiver's instance variables: 
		superclass: 	ImageMorph
		methodDict: 	a MethodDictionary()
		format: 	144
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ImageEscargot
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#SimulationBalle
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ImageEscargot class>>new
	Receiver: ImageEscargot
	Arguments and temporary variables: 
		image: 	nil
	Receiver's instance variables: 
		superclass: 	ImageMorph
		methodDict: 	a MethodDictionary()
		format: 	144
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ImageEscargot
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#SimulationBalle
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ImageEscargot class(ImageMorph class)>>withForm:
	Receiver: ImageEscargot
	Arguments and temporary variables: 
		aForm: 	Form(150x102x32)
	Receiver's instance variables: 
		superclass: 	ImageMorph
		methodDict: 	a MethodDictionary()
		format: 	144
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ImageEscargot
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#SimulationBalle
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ImageEscargot class>>new
	Receiver: ImageEscargot
	Arguments and temporary variables: 
		image: 	nil
	Receiver's instance variables: 
		superclass: 	ImageMorph
		methodDict: 	a MethodDictionary()
		format: 	144
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ImageEscargot
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#SimulationBalle
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ImageEscargot class(ImageMorph class)>>withForm:
	Receiver: ImageEscargot
	Arguments and temporary variables: 
		aForm: 	Form(150x102x32)
	Receiver's instance variables: 
		superclass: 	ImageMorph
		methodDict: 	a MethodDictionary()
		format: 	144
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ImageEscargot
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#SimulationBalle
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ImageEscargot class>>new
	Receiver: ImageEscargot
	Arguments and temporary variables: 
		image: 	nil
	Receiver's instance variables: 
		superclass: 	ImageMorph
		methodDict: 	a MethodDictionary()
		format: 	144
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ImageEscargot
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#SimulationBalle
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ImageEscargot class(ImageMorph class)>>withForm:
	Receiver: ImageEscargot
	Arguments and temporary variables: 
		aForm: 	Form(150x102x32)
	Receiver's instance variables: 
		superclass: 	ImageMorph
		methodDict: 	a MethodDictionary()
		format: 	144
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ImageEscargot
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#SimulationBalle
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ImageEscargot class>>new
	Receiver: ImageEscargot
	Arguments and temporary variables: 
		image: 	nil
	Receiver's instance variables: 
		superclass: 	ImageMorph
		methodDict: 	a MethodDictionary()
		format: 	144
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ImageEscargot
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#SimulationBalle
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ImageEscargot class(ImageMorph class)>>withForm:
	Receiver: ImageEscargot
	Arguments and temporary variables: 
		aForm: 	Form(150x102x32)
	Receiver's instance variables: 
		superclass: 	ImageMorph
		methodDict: 	a MethodDictionary()
		format: 	144
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ImageEscargot
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#SimulationBalle
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil



--- The full stack ---
ZLibReadStream(InflateStream)>>bitPosition
ZLibReadStream(InflateStream)>>pastEndRead
ZLibReadStream(InflateStream)>>next
PNGReadWriter>>processNonInterlaced
PNGReadWriter>>processIDATChunk
PNGReadWriter>>nextImage
[ 
form := reader nextImage.
reader close ] in ImageReadWriter class>>formFromStream:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ImageReadWriter class>>formFromStream:
Form class>>fromBinaryStream:
[ :aFile | 
aFile binary.
self fromBinaryStream: aFile ] in Form class>>fromFileNamed:
[ anotherBlock value: file ] in FileStream class>>detectFile:do:
BlockClosure>>ensure:
FileStream class>>detectFile:do:
FileStream class>>readOnlyFileNamed:do:
Form class>>fromFileNamed:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
-- and more not shown ---------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
3 March 2015 4:34:03.775536 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

PNGReadWriter>>filterVertical:
	Receiver: a PNGReadWriter
	Arguments and temporary variables: 
		count: 	600
	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/noury/Cours/Objet/07-Concurrence/TpSolutio...etc...
		chunk: 	#[]
		form: 	Form(150x102x32)
		width: 	150
		height: 	102
		depth: 	32
		backColor: 	nil
		bitsPerChannel: 	8
		colorType: 	6
		interlaceMethod: 	0
		bitsPerPixel: 	32
		bytesPerScanline: 	600
		thisScanline: 	#[0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 9 110 72 23 221 247 160 5...etc...
		prevScanline: 	#[0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 4 102 66 21 214 246 159 5...etc...
		rowSize: 	150
		idatChunkStream: 	a WriteStream
		unknownChunks: 	a Set('iCCP' 'iTXt')
		palette: 	nil
		transparentPixelValue: 	nil
		filtersSeen: 	a Bag()
		cachedDecoderMap: 	a ColorMap
		bigEndian: 	false


PNGReadWriter>>filterScanline:count:
	Receiver: a PNGReadWriter
	Arguments and temporary variables: 
		filterType: 	2
		count: 	600
	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/noury/Cours/Objet/07-Concurrence/TpSolutio...etc...
		chunk: 	#[]
		form: 	Form(150x102x32)
		width: 	150
		height: 	102
		depth: 	32
		backColor: 	nil
		bitsPerChannel: 	8
		colorType: 	6
		interlaceMethod: 	0
		bitsPerPixel: 	32
		bytesPerScanline: 	600
		thisScanline: 	#[0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 9 110 72 23 221 247 160 5...etc...
		prevScanline: 	#[0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 4 102 66 21 214 246 159 5...etc...
		rowSize: 	150
		idatChunkStream: 	a WriteStream
		unknownChunks: 	a Set('iCCP' 'iTXt')
		palette: 	nil
		transparentPixelValue: 	nil
		filtersSeen: 	a Bag()
		cachedDecoderMap: 	a ColorMap
		bigEndian: 	false


PNGReadWriter>>processNonInterlaced
	Receiver: a PNGReadWriter
	Arguments and temporary variables: 
		z: 	a ZLibReadStream
		filter: 	2
		temp: 	#[0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 9 110 72 23 221 247 160 57 255 24...etc...
		copyMethod: 	#copyPixelsRGBA:
		debug: 	false
		y: 	45
	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/noury/Cours/Objet/07-Concurrence/TpSolutio...etc...
		chunk: 	#[]
		form: 	Form(150x102x32)
		width: 	150
		height: 	102
		depth: 	32
		backColor: 	nil
		bitsPerChannel: 	8
		colorType: 	6
		interlaceMethod: 	0
		bitsPerPixel: 	32
		bytesPerScanline: 	600
		thisScanline: 	#[0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 9 110 72 23 221 247 160 5...etc...
		prevScanline: 	#[0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 4 102 66 21 214 246 159 5...etc...
		rowSize: 	150
		idatChunkStream: 	a WriteStream
		unknownChunks: 	a Set('iCCP' 'iTXt')
		palette: 	nil
		transparentPixelValue: 	nil
		filtersSeen: 	a Bag()
		cachedDecoderMap: 	a ColorMap
		bigEndian: 	false


PNGReadWriter>>processIDATChunk
	Receiver: a PNGReadWriter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/noury/Cours/Objet/07-Concurrence/TpSolutio...etc...
		chunk: 	#[]
		form: 	Form(150x102x32)
		width: 	150
		height: 	102
		depth: 	32
		backColor: 	nil
		bitsPerChannel: 	8
		colorType: 	6
		interlaceMethod: 	0
		bitsPerPixel: 	32
		bytesPerScanline: 	600
		thisScanline: 	#[0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 9 110 72 23 221 247 160 5...etc...
		prevScanline: 	#[0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 4 102 66 21 214 246 159 5...etc...
		rowSize: 	150
		idatChunkStream: 	a WriteStream
		unknownChunks: 	a Set('iCCP' 'iTXt')
		palette: 	nil
		transparentPixelValue: 	nil
		filtersSeen: 	a Bag()
		cachedDecoderMap: 	a ColorMap
		bigEndian: 	false


PNGReadWriter>>nextImage
	Receiver: a PNGReadWriter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/noury/Cours/Objet/07-Concurrence/TpSolutio...etc...
		chunk: 	#[]
		form: 	Form(150x102x32)
		width: 	150
		height: 	102
		depth: 	32
		backColor: 	nil
		bitsPerChannel: 	8
		colorType: 	6
		interlaceMethod: 	0
		bitsPerPixel: 	32
		bytesPerScanline: 	600
		thisScanline: 	#[0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 9 110 72 23 221 247 160 5...etc...
		prevScanline: 	#[0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 4 102 66 21 214 246 159 5...etc...
		rowSize: 	150
		idatChunkStream: 	a WriteStream
		unknownChunks: 	a Set('iCCP' 'iTXt')
		palette: 	nil
		transparentPixelValue: 	nil
		filtersSeen: 	a Bag()
		cachedDecoderMap: 	a ColorMap
		bigEndian: 	false


[ 
form := reader nextImage.
reader close ] in ImageReadWriter class>>formFromStream:
	Receiver: ImageReadWriter
	Arguments and temporary variables: 
		aBinaryStream: 	MultiByteFileStream: '/Users/noury/Cours/Objet/07-Concurrence/Tp...etc...
		reader: 	a PNGReadWriter
		readerClass: 	PNGReadWriter
		form: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#atEnd->ImageReadWriter>>#atEnd #changePadOfBits...etc...
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	#('stream')
		organization: 	a ClassOrganization
		subclasses: 	{JPEGReadWriter. BMPReadWriter. GIFReadWriter. PluginBasedJPEGReadW...etc...
		name: 	#ImageReadWriter
		classPool: 	a Dictionary(#ImageNotStoredSignal->nil #MagicNumberErrorSignal->nil...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	nil
		category: 	#'Graphics-Files'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>ensure:
	Receiver: [ 
form := reader nextImage.
reader close ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ImageReadWriter class>>formFromStream:
		startpc: 	103
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r0
		2r0
		2r100000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
form := reader nextImage.
reader close ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ImageReadWriter class>>formFromStream:
	Receiver: ImageReadWriter
	Arguments and temporary variables: 
		form: 	nil
		aBinaryStream: 	MultiByteFileStream: '/Users/noury/Cours/Objet/07-Concurrence/Tp...etc...
		reader: 	a PNGReadWriter
		readerClass: 	PNGReadWriter
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#atEnd->ImageReadWriter>>#atEnd #changePadOfBits...etc...
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	#('stream')
		organization: 	a ClassOrganization
		subclasses: 	{JPEGReadWriter. BMPReadWriter. GIFReadWriter. PluginBasedJPEGReadW...etc...
		name: 	#ImageReadWriter
		classPool: 	a Dictionary(#ImageNotStoredSignal->nil #MagicNumberErrorSignal->nil...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	nil
		category: 	#'Graphics-Files'
		traitComposition: 	{}
		localSelectors: 	nil


Form class>>fromBinaryStream:
	Receiver: Form
	Arguments and temporary variables: 
		aBinaryStream: 	MultiByteFileStream: '/Users/noury/Cours/Objet/07-Concurrence/Tp...etc...
		firstByte: 	137
	Receiver's instance variables: 
		superclass: 	DisplayMedium
		methodDict: 	a MethodDictionary(size 198)
		format: 	140
		layout: 	a FixedLayout
		instanceVariables: 	#('bits' 'width' 'height' 'depth' 'offset')
		organization: 	a ClassOrganization
		subclasses: 	{Cursor. ColorForm. DisplayScreen. GlyphForm}
		name: 	#Form
		classPool: 	a Dictionary(#FloodFillTolerance->nil )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Graphics-Display Objects'
		traitComposition: 	{}
		localSelectors: 	nil


[ :aFile | 
aFile binary.
self fromBinaryStream: aFile ] in Form class>>fromFileNamed:
	Receiver: Form
	Arguments and temporary variables: 
		fileName: 	'escargotClipart.png'
		aFile: 	MultiByteFileStream: '/Users/noury/Cours/Objet/07-Concurrence/TpSolution...etc...
	Receiver's instance variables: 
		superclass: 	DisplayMedium
		methodDict: 	a MethodDictionary(size 198)
		format: 	140
		layout: 	a FixedLayout
		instanceVariables: 	#('bits' 'width' 'height' 'depth' 'offset')
		organization: 	a ClassOrganization
		subclasses: 	{Cursor. ColorForm. DisplayScreen. GlyphForm}
		name: 	#Form
		classPool: 	a Dictionary(#FloodFillTolerance->nil )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Graphics-Display Objects'
		traitComposition: 	{}
		localSelectors: 	nil


[ anotherBlock value: file ] in FileStream class>>detectFile:do:
	Receiver: FileStream
	Arguments and temporary variables: 
		aBlock: 	[ self readOnlyFileNamed: fileName ]
		anotherBlock: 	[ :aFile | 
aFile binary.
self fromBinaryStream: aFile ]
		file: 	MultiByteFileStream: '/Users/noury/Cours/Objet/07-Concurrence/TpSolution/...etc...
	Receiver's instance variables: 
		superclass: 	ReadWriteStream
		methodDict: 	a MethodDictionary(#asBinaryOrTextStream->FileStream>>#asBinaryOrTe...etc...
		format: 	140
		layout: 	a FixedLayout
		instanceVariables: 	#('rwmode')
		organization: 	a ClassOrganization
		subclasses: 	{StandardFileStream}
		name: 	#FileStream
		classPool: 	a Dictionary(#Stderr->MultiByteFileStream: #stderr #Stdin->nil #Stdi...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Files-Kernel'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>ensure:
	Receiver: [ anotherBlock value: file ]
	Arguments and temporary variables: 
		aBlock: 	[ file close ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	FileStream class>>detectFile:do:
		startpc: 	41
		numArgs: 	0


FileStream class>>detectFile:do:
	Receiver: FileStream
	Arguments and temporary variables: 
		aBlock: 	[ self readOnlyFileNamed: fileName ]
		anotherBlock: 	[ :aFile | 
aFile binary.
self fromBinaryStream: aFile ]
	Receiver's instance variables: 
		superclass: 	ReadWriteStream
		methodDict: 	a MethodDictionary(#asBinaryOrTextStream->FileStream>>#asBinaryOrTe...etc...
		format: 	140
		layout: 	a FixedLayout
		instanceVariables: 	#('rwmode')
		organization: 	a ClassOrganization
		subclasses: 	{StandardFileStream}
		name: 	#FileStream
		classPool: 	a Dictionary(#Stderr->MultiByteFileStream: #stderr #Stdin->nil #Stdi...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Files-Kernel'
		traitComposition: 	{}
		localSelectors: 	nil


FileStream class>>readOnlyFileNamed:do:
	Receiver: FileStream
	Arguments and temporary variables: 
		fileName: 	'escargotClipart.png'
		aBlock: 	[ :aFile | 
aFile binary.
self fromBinaryStream: aFile ]
	Receiver's instance variables: 
		superclass: 	ReadWriteStream
		methodDict: 	a MethodDictionary(#asBinaryOrTextStream->FileStream>>#asBinaryOrTe...etc...
		format: 	140
		layout: 	a FixedLayout
		instanceVariables: 	#('rwmode')
		organization: 	a ClassOrganization
		subclasses: 	{StandardFileStream}
		name: 	#FileStream
		classPool: 	a Dictionary(#Stderr->MultiByteFileStream: #stderr #Stdin->nil #Stdi...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Files-Kernel'
		traitComposition: 	{}
		localSelectors: 	nil


Form class>>fromFileNamed:
	Receiver: Form
	Arguments and temporary variables: 
		fileName: 	'escargotClipart.png'
	Receiver's instance variables: 
		superclass: 	DisplayMedium
		methodDict: 	a MethodDictionary(size 198)
		format: 	140
		layout: 	a FixedLayout
		instanceVariables: 	#('bits' 'width' 'height' 'depth' 'offset')
		organization: 	a ClassOrganization
		subclasses: 	{Cursor. ColorForm. DisplayScreen. GlyphForm}
		name: 	#Form
		classPool: 	a Dictionary(#FloodFillTolerance->nil )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Graphics-Display Objects'
		traitComposition: 	{}
		localSelectors: 	nil


ImageEscargot class>>new
	Receiver: ImageEscargot
	Arguments and temporary variables: 
		image: 	nil
	Receiver's instance variables: 
		superclass: 	ImageMorph
		methodDict: 	a MethodDictionary()
		format: 	144
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ImageEscargot
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#SimulationBalle
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ImageEscargot class(ImageMorph class)>>withForm:
	Receiver: ImageEscargot
	Arguments and temporary variables: 
		aForm: 	Form(150x102x32)
	Receiver's instance variables: 
		superclass: 	ImageMorph
		methodDict: 	a MethodDictionary()
		format: 	144
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ImageEscargot
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#SimulationBalle
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ImageEscargot class>>new
	Receiver: ImageEscargot
	Arguments and temporary variables: 
		image: 	nil
	Receiver's instance variables: 
		superclass: 	ImageMorph
		methodDict: 	a MethodDictionary()
		format: 	144
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ImageEscargot
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#SimulationBalle
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ImageEscargot class(ImageMorph class)>>withForm:
	Receiver: ImageEscargot
	Arguments and temporary variables: 
		aForm: 	Form(150x102x32)
	Receiver's instance variables: 
		superclass: 	ImageMorph
		methodDict: 	a MethodDictionary()
		format: 	144
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ImageEscargot
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#SimulationBalle
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ImageEscargot class>>new
	Receiver: ImageEscargot
	Arguments and temporary variables: 
		image: 	nil
	Receiver's instance variables: 
		superclass: 	ImageMorph
		methodDict: 	a MethodDictionary()
		format: 	144
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ImageEscargot
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#SimulationBalle
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ImageEscargot class(ImageMorph class)>>withForm:
	Receiver: ImageEscargot
	Arguments and temporary variables: 
		aForm: 	Form(150x102x32)
	Receiver's instance variables: 
		superclass: 	ImageMorph
		methodDict: 	a MethodDictionary()
		format: 	144
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ImageEscargot
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#SimulationBalle
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ImageEscargot class>>new
	Receiver: ImageEscargot
	Arguments and temporary variables: 
		image: 	nil
	Receiver's instance variables: 
		superclass: 	ImageMorph
		methodDict: 	a MethodDictionary()
		format: 	144
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ImageEscargot
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#SimulationBalle
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ImageEscargot class(ImageMorph class)>>withForm:
	Receiver: ImageEscargot
	Arguments and temporary variables: 
		aForm: 	Form(150x102x32)
	Receiver's instance variables: 
		superclass: 	ImageMorph
		methodDict: 	a MethodDictionary()
		format: 	144
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ImageEscargot
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#SimulationBalle
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ImageEscargot class>>new
	Receiver: ImageEscargot
	Arguments and temporary variables: 
		image: 	nil
	Receiver's instance variables: 
		superclass: 	ImageMorph
		methodDict: 	a MethodDictionary()
		format: 	144
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ImageEscargot
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#SimulationBalle
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ImageEscargot class(ImageMorph class)>>withForm:
	Receiver: ImageEscargot
	Arguments and temporary variables: 
		aForm: 	Form(150x102x32)
	Receiver's instance variables: 
		superclass: 	ImageMorph
		methodDict: 	a MethodDictionary()
		format: 	144
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ImageEscargot
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#SimulationBalle
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ImageEscargot class>>new
	Receiver: ImageEscargot
	Arguments and temporary variables: 
		image: 	nil
	Receiver's instance variables: 
		superclass: 	ImageMorph
		methodDict: 	a MethodDictionary()
		format: 	144
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ImageEscargot
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#SimulationBalle
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ImageEscargot class(ImageMorph class)>>withForm:
	Receiver: ImageEscargot
	Arguments and temporary variables: 
		aForm: 	Form(150x102x32)
	Receiver's instance variables: 
		superclass: 	ImageMorph
		methodDict: 	a MethodDictionary()
		format: 	144
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ImageEscargot
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#SimulationBalle
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ImageEscargot class>>new
	Receiver: ImageEscargot
	Arguments and temporary variables: 
		image: 	nil
	Receiver's instance variables: 
		superclass: 	ImageMorph
		methodDict: 	a MethodDictionary()
		format: 	144
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ImageEscargot
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#SimulationBalle
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ImageEscargot class(ImageMorph class)>>withForm:
	Receiver: ImageEscargot
	Arguments and temporary variables: 
		aForm: 	Form(150x102x32)
	Receiver's instance variables: 
		superclass: 	ImageMorph
		methodDict: 	a MethodDictionary()
		format: 	144
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ImageEscargot
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#SimulationBalle
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ImageEscargot class>>new
	Receiver: ImageEscargot
	Arguments and temporary variables: 
		image: 	nil
	Receiver's instance variables: 
		superclass: 	ImageMorph
		methodDict: 	a MethodDictionary()
		format: 	144
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ImageEscargot
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#SimulationBalle
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ImageEscargot class(ImageMorph class)>>withForm:
	Receiver: ImageEscargot
	Arguments and temporary variables: 
		aForm: 	Form(150x102x32)
	Receiver's instance variables: 
		superclass: 	ImageMorph
		methodDict: 	a MethodDictionary()
		format: 	144
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ImageEscargot
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#SimulationBalle
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ImageEscargot class>>new
	Receiver: ImageEscargot
	Arguments and temporary variables: 
		image: 	nil
	Receiver's instance variables: 
		superclass: 	ImageMorph
		methodDict: 	a MethodDictionary()
		format: 	144
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ImageEscargot
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#SimulationBalle
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ImageEscargot class(ImageMorph class)>>withForm:
	Receiver: ImageEscargot
	Arguments and temporary variables: 
		aForm: 	Form(150x102x32)
	Receiver's instance variables: 
		superclass: 	ImageMorph
		methodDict: 	a MethodDictionary()
		format: 	144
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ImageEscargot
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#SimulationBalle
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ImageEscargot class>>new
	Receiver: ImageEscargot
	Arguments and temporary variables: 
		image: 	nil
	Receiver's instance variables: 
		superclass: 	ImageMorph
		methodDict: 	a MethodDictionary()
		format: 	144
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ImageEscargot
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#SimulationBalle
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ImageEscargot class(ImageMorph class)>>withForm:
	Receiver: ImageEscargot
	Arguments and temporary variables: 
		aForm: 	Form(150x102x32)
	Receiver's instance variables: 
		superclass: 	ImageMorph
		methodDict: 	a MethodDictionary()
		format: 	144
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ImageEscargot
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#SimulationBalle
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ImageEscargot class>>new
	Receiver: ImageEscargot
	Arguments and temporary variables: 
		image: 	nil
	Receiver's instance variables: 
		superclass: 	ImageMorph
		methodDict: 	a MethodDictionary()
		format: 	144
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ImageEscargot
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#SimulationBalle
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ImageEscargot class(ImageMorph class)>>withForm:
	Receiver: ImageEscargot
	Arguments and temporary variables: 
		aForm: 	Form(150x102x32)
	Receiver's instance variables: 
		superclass: 	ImageMorph
		methodDict: 	a MethodDictionary()
		format: 	144
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ImageEscargot
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#SimulationBalle
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ImageEscargot class>>new
	Receiver: ImageEscargot
	Arguments and temporary variables: 
		image: 	nil
	Receiver's instance variables: 
		superclass: 	ImageMorph
		methodDict: 	a MethodDictionary()
		format: 	144
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ImageEscargot
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#SimulationBalle
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil



--- The full stack ---
PNGReadWriter>>filterVertical:
PNGReadWriter>>filterScanline:count:
PNGReadWriter>>processNonInterlaced
PNGReadWriter>>processIDATChunk
PNGReadWriter>>nextImage
[ 
form := reader nextImage.
reader close ] in ImageReadWriter class>>formFromStream:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ImageReadWriter class>>formFromStream:
Form class>>fromBinaryStream:
[ :aFile | 
aFile binary.
self fromBinaryStream: aFile ] in Form class>>fromFileNamed:
[ anotherBlock value: file ] in FileStream class>>detectFile:do:
BlockClosure>>ensure:
FileStream class>>detectFile:do:
FileStream class>>readOnlyFileNamed:do:
Form class>>fromFileNamed:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
ImageEscargot class(ImageMorph class)>>withForm:
ImageEscargot class>>new
-- and more not shown ---------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: AfficheurEscargot>>sort
3 March 2015 4:56:23.284716 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

AfficheurEscargot(Object)>>doesNotUnderstand: #sort
	Receiver: an AfficheurEscargot
	Arguments and temporary variables: 
		aMessage: 	sort
		exception: 	MessageNotUnderstood: AfficheurEscargot>>sort
		resumeValue: 	nil
	Receiver's instance variables: 
		position: 	(0@0)
		estSorti: 	nil
		estAffiche: 	nil
		imageCourante: 	nil
		imageEscargot: 	an ImageMorph(341049344)
		imageCoquille: 	an ImageMorph(823132160)


AfficheurEscargot>>initialize
	Receiver: an AfficheurEscargot
	Arguments and temporary variables: 

	Receiver's instance variables: 
		position: 	(0@0)
		estSorti: 	nil
		estAffiche: 	nil
		imageCourante: 	nil
		imageEscargot: 	an ImageMorph(341049344)
		imageCoquille: 	an ImageMorph(823132160)


AfficheurEscargot class(Behavior)>>new
	Receiver: AfficheurEscargot
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#arreterAffichage->AfficheurEscargot>>#arreterAf...etc...
		format: 	142
		layout: 	a FixedLayout
		instanceVariables: 	#(#position #estSorti #estAffiche #imageCourante #imageEscar...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#AfficheurEscargot
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#CourseEscargots
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'i := AfficheurEscargot new.'
		itsSelection: 	a Text for 'i := AfficheurEscargot new.'
		itsSelectionString: 	'i := AfficheurEscargot new.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ i := AfficheurEscargot new
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(240386048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(240386048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[ textMorph editor evaluateSelection ] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(598736896)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1150.0@144.0) corner: (1590.0@311.0)
		owner: 	a SystemWindow(495714304)
		submorphs: 	an Array(a TransformMorph(531103744))
		fullBounds: 	(1150@144) corner: (1590@311)
		color: 	Color white
		extension: 	a MorphExtension (219152384) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(638582784)
		scroller: 	a TransformMorph(531103744)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(554696704)
		textMorph: 	a TextMorphForEditView(240386048)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(92 to: 91)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


[ result := editBlock value ] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(598736896)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph editor evaluateSelection ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1150.0@144.0) corner: (1590.0@311.0)
		owner: 	a SystemWindow(495714304)
		submorphs: 	an Array(a TransformMorph(531103744))
		fullBounds: 	(1150@144) corner: (1590@311)
		color: 	Color white
		extension: 	a MorphExtension (219152384) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(638582784)
		scroller: 	a TransformMorph(531103744)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(554696704)
		textMorph: 	a TextMorphForEditView(240386048)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(92 to: 91)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(240386048)
	Arguments and temporary variables: 
		editBlock: 	[ result := editBlock value ]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@66)
		owner: 	a TransformMorph(531103744)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@66)
		color: 	Color black
		extension: 	a MorphExtension (295174144) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'sim := SimulationBalleRebondissante new.
sim lancerSimulation...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(598736896)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(598736896)
	Arguments and temporary variables: 
		result: 	nil
		editBlock: 	[ textMorph editor evaluateSelection ]
	Receiver's instance variables: 
		bounds: 	(1150.0@144.0) corner: (1590.0@311.0)
		owner: 	a SystemWindow(495714304)
		submorphs: 	an Array(a TransformMorph(531103744))
		fullBounds: 	(1150@144) corner: (1590@311)
		color: 	Color white
		extension: 	a MorphExtension (219152384) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(638582784)
		scroller: 	a TransformMorph(531103744)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(554696704)
		textMorph: 	a TextMorphForEditView(240386048)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(92 to: 91)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(598736896)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1150.0@144.0) corner: (1590.0@311.0)
		owner: 	a SystemWindow(495714304)
		submorphs: 	an Array(a TransformMorph(531103744))
		fullBounds: 	(1150@144) corner: (1590@311)
		color: 	Color white
		extension: 	a MorphExtension (219152384) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(638582784)
		scroller: 	a TransformMorph(531103744)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(554696704)
		textMorph: 	a TextMorphForEditView(240386048)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(92 to: 91)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


[ :morph | morph doIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: SmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		morph: 	a PluggableTextMorph(598736896)
	Receiver's instance variables: 
		superclass: 	TextEditor
		methodDict: 	a MethodDictionary(#argAdvance:->SmalltalkEditor>>#argAdvance: #bro...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SmalltalkEditor
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Text-Edition'
		traitComposition: 	{}
		localSelectors: 	nil
		cmdActions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop...etc...
		shiftCmdActions: 	#(#noop: #argAdvance: #noop: #compareToClipboard: #debugIt: #m...etc...


BlockClosure>>cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(598736896)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	157
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(598736896)
		secondArg: 	a PluggableTextMorph(598736896)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	157
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(598736896)
		secondArg: 	a PluggableTextMorph(598736896)
		thirdArg: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	157
		numArgs: 	1


KMCategoryBinding>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#doIt on Cmd + D do [ :morph | morph doIt ]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(598736896)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(598736896)


[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Cmd + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		l: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[ :l | l completeMatch: self buffer: aBuffer ]
		index: 	1
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Cmd + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #doIt on Cmd + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
		entry: 	#doIt on Cmd + D do [ :morph | morph doIt ]

	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


Set>>do:
	Receiver: a Set(#inspectIt on Cmd + I do [ :morph | morph inspectIt ]
 #sendersOfIt on Cmd + N do [ ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andD...etc...
		index: 	9
		each: 	#doIt on Cmd + D do [ :morph | morph doIt ]

	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(#inspectIt on Cmd + I do [ :morph | morph inspectIt ]
 #senders...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aListener: 	a KMDispatcher
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(598736896)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(598736896)


[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#TextMorphTab) ...etc...
		morph: 	a PluggableTextMorph(598736896)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCategoryTarg...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyM...etc...
		index: 	4
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCatego...etc...
		firstIndex: 	1
		lastIndex: 	7


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#TextMorphTab) ...etc...
		morph: 	a PluggableTextMorph(598736896)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a PluggableTextMorph(598736896)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		targetToDispatch: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>do:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aBlock: 	[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstan...etc...
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
		chain: 	a KMDispatchChain
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a TextMorphForEditView(240386048)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(240386048)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@66)
		owner: 	a TransformMorph(531103744)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@66)
		color: 	Color black
		extension: 	a MorphExtension (295174144) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'sim := SimulationBalleRebondissante new.
sim lancerSimulation...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(598736896)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(240386048)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@66)
		owner: 	a TransformMorph(531103744)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@66)
		color: 	Color black
		extension: 	a MorphExtension (295174144) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'sim := SimulationBalleRebondissante new.
sim lancerSimulation...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(598736896)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-d>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(240386048)
	Receiver's instance variables: 
		timeStamp: 	3484874
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	(66.0@108.0)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	100
		charCode: 	100
		scanCode: 	2


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(240386048)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@66)
		owner: 	a TransformMorph(531103744)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@66)
		color: 	Color black
		extension: 	a MorphExtension (295174144) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'sim := SimulationBalleRebondissante new.
sim lancerSimulation...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(598736896)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(240386048)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@66)
		owner: 	a TransformMorph(531103744)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@66)
		color: 	Color black
		extension: 	a MorphExtension (295174144) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'sim := SimulationBalleRebondissante new.
sim lancerSimulation...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(598736896)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(240386048)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1220@253.0) corner: (1236@269.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(240386048)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1220@253) mouseOver nil nil]
		targetOffset: 	(28.0@57.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3479677 1220 253 0 0 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8



--- The full stack ---
AfficheurEscargot(Object)>>doesNotUnderstand: #sort
AfficheurEscargot>>initialize
AfficheurEscargot class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[ textMorph editor evaluateSelection ] in PluggableTextMorph>>doIt
[ result := editBlock value ] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
[ :morph | morph doIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
NonBooleanReceiver: proceed for truth.
3 March 2015 4:56:47.97304 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

UndefinedObject(Object)>>mustBeBooleanIn:
	Receiver: nil
	Arguments and temporary variables: 
		context: 	AfficheurEscargot>>imageCourante:
		proceedValue: 	nil
	Receiver's instance variables: 
nil

UndefinedObject(Object)>>mustBeBoolean
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

AfficheurEscargot>>imageCourante:
	Receiver: an AfficheurEscargot
	Arguments and temporary variables: 
		nouvelleImage: 	an ImageMorph(341049344)
		doitEtreAffiche: 	nil
	Receiver's instance variables: 
		position: 	(0@0)
		estSorti: 	nil
		estAffiche: 	nil
		imageCourante: 	nil
		imageEscargot: 	an ImageMorph(341049344)
		imageCoquille: 	an ImageMorph(823132160)


AfficheurEscargot>>sort
	Receiver: an AfficheurEscargot
	Arguments and temporary variables: 

	Receiver's instance variables: 
		position: 	(0@0)
		estSorti: 	nil
		estAffiche: 	nil
		imageCourante: 	nil
		imageEscargot: 	an ImageMorph(341049344)
		imageCoquille: 	an ImageMorph(823132160)


AfficheurEscargot>>initialize
	Receiver: an AfficheurEscargot
	Arguments and temporary variables: 

	Receiver's instance variables: 
		position: 	(0@0)
		estSorti: 	nil
		estAffiche: 	nil
		imageCourante: 	nil
		imageEscargot: 	an ImageMorph(341049344)
		imageCoquille: 	an ImageMorph(823132160)


AfficheurEscargot class(Behavior)>>new
	Receiver: AfficheurEscargot
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#arreterAffichage->AfficheurEscargot>>#arreterAf...etc...
		format: 	142
		layout: 	a FixedLayout
		instanceVariables: 	#(#position #estSorti #estAffiche #imageCourante #imageEscar...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#AfficheurEscargot
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#CourseEscargots
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'i := AfficheurEscargot new.'
		itsSelection: 	a Text for 'i := AfficheurEscargot new.'
		itsSelectionString: 	'i := AfficheurEscargot new.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ i := AfficheurEscargot new
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(240386048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(240386048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[ textMorph editor evaluateSelection ] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(598736896)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1150.0@144.0) corner: (1590.0@311.0)
		owner: 	a SystemWindow(495714304)
		submorphs: 	an Array(a TransformMorph(531103744))
		fullBounds: 	(1150@144) corner: (1590@311)
		color: 	Color white
		extension: 	a MorphExtension (219152384) [locked]  [other:  (kmDispatcher -> a K...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(638582784)
		scroller: 	a TransformMorph(531103744)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(554696704)
		textMorph: 	a TextMorphForEditView(240386048)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(65 to: 91)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


[ result := editBlock value ] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(598736896)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph editor evaluateSelection ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1150.0@144.0) corner: (1590.0@311.0)
		owner: 	a SystemWindow(495714304)
		submorphs: 	an Array(a TransformMorph(531103744))
		fullBounds: 	(1150@144) corner: (1590@311)
		color: 	Color white
		extension: 	a MorphExtension (219152384) [locked]  [other:  (kmDispatcher -> a K...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(638582784)
		scroller: 	a TransformMorph(531103744)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(554696704)
		textMorph: 	a TextMorphForEditView(240386048)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(65 to: 91)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(240386048)
	Arguments and temporary variables: 
		editBlock: 	[ result := editBlock value ]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@66)
		owner: 	a TransformMorph(531103744)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@66)
		color: 	Color black
		extension: 	a MorphExtension (295174144) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'sim := SimulationBalleRebondissante new.
sim lancerSimulation...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(598736896)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(598736896)
	Arguments and temporary variables: 
		result: 	nil
		editBlock: 	[ textMorph editor evaluateSelection ]
	Receiver's instance variables: 
		bounds: 	(1150.0@144.0) corner: (1590.0@311.0)
		owner: 	a SystemWindow(495714304)
		submorphs: 	an Array(a TransformMorph(531103744))
		fullBounds: 	(1150@144) corner: (1590@311)
		color: 	Color white
		extension: 	a MorphExtension (219152384) [locked]  [other:  (kmDispatcher -> a K...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(638582784)
		scroller: 	a TransformMorph(531103744)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(554696704)
		textMorph: 	a TextMorphForEditView(240386048)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(65 to: 91)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(598736896)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1150.0@144.0) corner: (1590.0@311.0)
		owner: 	a SystemWindow(495714304)
		submorphs: 	an Array(a TransformMorph(531103744))
		fullBounds: 	(1150@144) corner: (1590@311)
		color: 	Color white
		extension: 	a MorphExtension (219152384) [locked]  [other:  (kmDispatcher -> a K...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(638582784)
		scroller: 	a TransformMorph(531103744)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(554696704)
		textMorph: 	a TextMorphForEditView(240386048)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(65 to: 91)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


[ :morph | morph doIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: SmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		morph: 	a PluggableTextMorph(598736896)
	Receiver's instance variables: 
		superclass: 	TextEditor
		methodDict: 	a MethodDictionary(#argAdvance:->SmalltalkEditor>>#argAdvance: #bro...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SmalltalkEditor
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Text-Edition'
		traitComposition: 	{}
		localSelectors: 	nil
		cmdActions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop...etc...
		shiftCmdActions: 	#(#noop: #argAdvance: #noop: #compareToClipboard: #debugIt: #m...etc...


BlockClosure>>cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(598736896)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	157
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(598736896)
		secondArg: 	a PluggableTextMorph(598736896)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	157
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(598736896)
		secondArg: 	a PluggableTextMorph(598736896)
		thirdArg: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	157
		numArgs: 	1


KMCategoryBinding>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#doIt on Cmd + D do [ :morph | morph doIt ]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(598736896)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(598736896)


[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Cmd + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		l: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[ :l | l completeMatch: self buffer: aBuffer ]
		index: 	1
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Cmd + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #doIt on Cmd + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
		entry: 	#doIt on Cmd + D do [ :morph | morph doIt ]

	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


Set>>do:
	Receiver: a Set(#inspectIt on Cmd + I do [ :morph | morph inspectIt ]
 #sendersOfIt on Cmd + N do [ ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andD...etc...
		index: 	9
		each: 	#doIt on Cmd + D do [ :morph | morph doIt ]

	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(#inspectIt on Cmd + I do [ :morph | morph inspectIt ]
 #senders...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aListener: 	a KMDispatcher
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(598736896)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(598736896)


[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#TextMorphTab) ...etc...
		morph: 	a PluggableTextMorph(598736896)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCategoryTarg...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyM...etc...
		index: 	4
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCatego...etc...
		firstIndex: 	1
		lastIndex: 	7


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#TextMorphTab) ...etc...
		morph: 	a PluggableTextMorph(598736896)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a PluggableTextMorph(598736896)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		targetToDispatch: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>do:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aBlock: 	[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstan...etc...
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
		chain: 	a KMDispatchChain
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a TextMorphForEditView(240386048)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(240386048)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@66)
		owner: 	a TransformMorph(531103744)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@66)
		color: 	Color black
		extension: 	a MorphExtension (295174144) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'sim := SimulationBalleRebondissante new.
sim lancerSimulation...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(598736896)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(240386048)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@66)
		owner: 	a TransformMorph(531103744)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@66)
		color: 	Color black
		extension: 	a MorphExtension (295174144) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'sim := SimulationBalleRebondissante new.
sim lancerSimulation...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(598736896)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-d>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(240386048)
	Receiver's instance variables: 
		timeStamp: 	3484874
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	(66.0@108.0)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	100
		charCode: 	100
		scanCode: 	2



--- The full stack ---
UndefinedObject(Object)>>mustBeBooleanIn:
UndefinedObject(Object)>>mustBeBoolean
AfficheurEscargot>>imageCourante:
AfficheurEscargot>>sort
AfficheurEscargot>>initialize
AfficheurEscargot class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[ textMorph editor evaluateSelection ] in PluggableTextMorph>>doIt
[ result := editBlock value ] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
[ :morph | morph doIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Integer class>>atRandom
3 March 2015 5:14:08.586799 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

Integer class(Object)>>doesNotUnderstand: #atRandom
	Receiver: Integer
	Arguments and temporary variables: 
		aMessage: 	atRandom
		exception: 	MessageNotUnderstood: Integer class>>atRandom
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Number
		methodDict: 	a MethodDictionary(size 181)
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{SmallInteger. LargeInteger}
		name: 	#Integer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	nil
		category: 	#'Kernel-Numbers'
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'Integer atRandom'
		itsSelection: 	a Text for 'Integer atRandom'
		itsSelectionString: 	'Integer atRandom'
	Receiver's instance variables: 
		ast: 	DoIt
	^ Integer atRandom
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
printString := [ result printString ]
	on: Error
	do: [ '<...etc...
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(240386048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[ 
(oldEditor := textMorph editor)
	evaluateSelectionAndDo: [ :result | 
		printString := [ result printString ]
			on: Error
			do: [ '<error in printString: try ''Inspect it'' to debug>' ].
		selectionInterval := oldEditor selectionInterval.
		textMorph installEditorToReplace: oldEditor.
		textMorph handleEdit: [ oldEditor afterSelectionInsertAndSelect: printString ].
		selectionInterval := oldEditor selectionInterval.
		textMorph editor selectFrom: selectionInterval first to: selectionInterval last.
		self scrollSelectionIntoView ] ] in PluggableTextMorph>>printIt
	Receiver: a PluggableTextMorph(598736896)
	Arguments and temporary variables: 
		oldEditor: 	a SmalltalkEditor
		printString: 	nil
	Receiver's instance variables: 
		bounds: 	(1150.0@144.0) corner: (1590.0@311.0)
		owner: 	a SystemWindow(495714304)
		submorphs: 	an Array(a ScrollBar(638582784) a TransformMorph(531103744))
		fullBounds: 	(1150@144) corner: (1590@311)
		color: 	Color white
		extension: 	a MorphExtension (219152384) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(638582784)
		scroller: 	a TransformMorph(531103744)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(554696704)
		textMorph: 	a TextMorphForEditView(240386048)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(169 to: 168)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(240386048)
	Arguments and temporary variables: 
		editBlock: 	[ 
(oldEditor := textMorph editor)
	evaluateSelectionAndDo: [ :resul...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (419@162)
		owner: 	a TransformMorph(531103744)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (419@162)
		color: 	Color black
		extension: 	a MorphExtension (295174144) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'sim := SimulationBalleRebondissante new.
sim lancerSimulation...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(598736896)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>printIt
	Receiver: a PluggableTextMorph(598736896)
	Arguments and temporary variables: 
		oldEditor: 	a SmalltalkEditor
		printString: 	nil
	Receiver's instance variables: 
		bounds: 	(1150.0@144.0) corner: (1590.0@311.0)
		owner: 	a SystemWindow(495714304)
		submorphs: 	an Array(a ScrollBar(638582784) a TransformMorph(531103744))
		fullBounds: 	(1150@144) corner: (1590@311)
		color: 	Color white
		extension: 	a MorphExtension (219152384) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(638582784)
		scroller: 	a TransformMorph(531103744)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(554696704)
		textMorph: 	a TextMorphForEditView(240386048)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(169 to: 168)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


[ :morph | morph printIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: SmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		morph: 	a PluggableTextMorph(598736896)
	Receiver's instance variables: 
		superclass: 	TextEditor
		methodDict: 	a MethodDictionary(#argAdvance:->SmalltalkEditor>>#argAdvance: #bro...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SmalltalkEditor
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Text-Edition'
		traitComposition: 	{}
		localSelectors: 	nil
		cmdActions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop...etc...
		shiftCmdActions: 	#(#noop: #argAdvance: #noop: #compareToClipboard: #debugIt: #m...etc...


BlockClosure>>cull:
	Receiver: [ :morph | morph printIt ]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(598736896)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	277
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :morph | morph printIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(598736896)
		secondArg: 	a PluggableTextMorph(598736896)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	277
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [ :morph | morph printIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(598736896)
		secondArg: 	a PluggableTextMorph(598736896)
		thirdArg: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	277
		numArgs: 	1


KMCategoryBinding>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#printIt on Cmd + P do [ :morph | morph printIt ]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(598736896)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(598736896)


[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #printIt on Cmd + P do [ :morph | morph printIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		l: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		action: 	[ :morph | morph printIt ]
		name: 	#printIt
		shortcut: 	Cmd + P
		defaultShortcut: 	Cmd + P
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[ :l | l completeMatch: self buffer: aBuffer ]
		index: 	1
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #printIt on Cmd + P do [ :morph | morph printIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[ :morph | morph printIt ]
		name: 	#printIt
		shortcut: 	Cmd + P
		defaultShortcut: 	Cmd + P
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #printIt on Cmd + P do [ :morph | morph printIt ]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		action: 	[ :morph | morph printIt ]
		name: 	#printIt
		shortcut: 	Cmd + P
		defaultShortcut: 	Cmd + P
		description: 	''


[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
		entry: 	#printIt on Cmd + P do [ :morph | morph printIt ]

	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


Set>>do:
	Receiver: a Set(#inspectIt on Cmd + I do [ :morph | morph inspectIt ]
 #sendersOfIt on Cmd + N do [ ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andD...etc...
		index: 	5
		each: 	#printIt on Cmd + P do [ :morph | morph printIt ]

	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(#inspectIt on Cmd + I do [ :morph | morph inspectIt ]
 #senders...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		aListener: 	a KMDispatcher
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(598736896)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(598736896)


[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#TextMorphTab) ...etc...
		morph: 	a PluggableTextMorph(598736896)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCategoryTarg...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyM...etc...
		index: 	4
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCatego...etc...
		firstIndex: 	1
		lastIndex: 	7


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#TextMorphTab) ...etc...
		morph: 	a PluggableTextMorph(598736896)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a PluggableTextMorph(598736896)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
		targetToDispatch: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>do:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aBlock: 	[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstan...etc...
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-p>']
		chain: 	a KMDispatchChain
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a TextMorphForEditView(240386048)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(240386048)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (419@162)
		owner: 	a TransformMorph(531103744)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (419@162)
		color: 	Color black
		extension: 	a MorphExtension (295174144) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'sim := SimulationBalleRebondissante new.
sim lancerSimulation...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(598736896)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(240386048)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (419@162)
		owner: 	a TransformMorph(531103744)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (419@162)
		color: 	Color black
		extension: 	a MorphExtension (295174144) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'sim := SimulationBalleRebondissante new.
sim lancerSimulation...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(598736896)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-p>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(240386048)
	Receiver's instance variables: 
		timeStamp: 	4550177
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	(93@149.0)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	112
		scanCode: 	35


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(240386048)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (419@162)
		owner: 	a TransformMorph(531103744)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (419@162)
		color: 	Color black
		extension: 	a MorphExtension (295174144) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'sim := SimulationBalleRebondissante new.
sim lancerSimulation...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(598736896)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(240386048)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (419@162)
		owner: 	a TransformMorph(531103744)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (419@162)
		color: 	Color black
		extension: 	a MorphExtension (295174144) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'sim := SimulationBalleRebondissante new.
sim lancerSimulation...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(598736896)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(240386048)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1239@285.0) corner: (1255@301.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(240386048)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1239@285) mouseOver nil nil]
		targetOffset: 	(89.0@141.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4545117 1239 285 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1150)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(495714304) a Nauti...etc...
		fullBounds: 	(0@0) corner: (1920@1150)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.063 g: 0.063 b: 0.063 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(240386048)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(1239@285.0) corner: (1255@301.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(240386048)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1239@285) mouseOver nil nil]
		targetOffset: 	(89.0@141.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4545117 1239 285 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(240386048)
		aBlock: 	[ self keyboardFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1239@285.0) corner: (1255@301.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(240386048)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1239@285) mouseOver nil nil]
		targetOffset: 	(89.0@141.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4545117 1239 285 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	(1239@285.0) corner: (1255@301.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(240386048)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1239@285) mouseOver nil nil]
		targetOffset: 	(89.0@141.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4545117 1239 285 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8



--- The full stack ---
Integer class(Object)>>doesNotUnderstand: #atRandom
UndefinedObject>>DoIt
OpalCompiler>>evaluate
SmalltalkEditor>>evaluateSelectionAndDo:
[ 
(oldEditor := textMorph editor)
	evaluateSelectionAndDo: [ :result | 
		printString := [ result printString ]
			on: Error
			do: [ '<error in printString: try ''Inspect it'' to debug>' ].
		selectionInterval := oldEditor selectionInterval.
		textMorph installEditorToReplace: oldEditor.
		textMorph handleEdit: [ oldEditor afterSelectionInsertAndSelect: printString ].
		selectionInterval := oldEditor selectionInterval.
		textMorph editor selectFrom: selectionInterval first to: selectionInterval last.
		self scrollSelectionIntoView ] ] in PluggableTextMorph>>printIt
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>printIt
[ :morph | morph printIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
3 March 2015 5:43:01.95788 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

SimulationBalleRebondissante(Simulation)>>fautilArreterLaSimulation
	Receiver: a SimulationBalleRebondissante
	Arguments and temporary variables: 
		rectangleFenetrePharo: 	nil
	Receiver's instance variables: 
		balle: 	a BalleRebondissante
		afficheur: 	an AfficheurGraphiqueDeBalle
		courbe: 	nil
		thread: 	a Process in Process>>terminate


SimulationBalleRebondissante(Simulation)>>boucleSimulation
	Receiver: a SimulationBalleRebondissante
	Arguments and temporary variables: 
		attente: 	a Delay(100 msecs)
	Receiver's instance variables: 
		balle: 	a BalleRebondissante
		afficheur: 	an AfficheurGraphiqueDeBalle
		courbe: 	nil
		thread: 	a Process in Process>>terminate


[ sim boucleSimulation ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ sim boucleSimulation ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		startpc: 	29
		numArgs: 	0



--- The full stack ---
SimulationBalleRebondissante(Simulation)>>fautilArreterLaSimulation
SimulationBalleRebondissante(Simulation)>>boucleSimulation
[ sim boucleSimulation ] in UndefinedObject>>DoIt
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
3 March 2015 5:50:03.680223 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)



--- The full stack ---
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
-- and more not shown ---------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
3 March 2015 5:50:03.87999 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

ImageMorph(Morph)>>initialize
	Receiver: an ImageMorph(857735168)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	nil
		owner: 	nil
		submorphs: 	nil
		fullBounds: 	nil
		color: 	nil
		extension: 	nil
		image: 	nil


ImageMorph>>initialize
	Receiver: an ImageMorph(857735168)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	nil
		owner: 	nil
		submorphs: 	nil
		fullBounds: 	nil
		color: 	nil
		extension: 	nil
		image: 	nil


ImageMorph class(Behavior)>>new
	Receiver: ImageMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Morph
		methodDict: 	a MethodDictionary(#addCustomMenuItems:hand:->ImageMorph>>#addCusto...etc...
		format: 	144
		layout: 	a FixedLayout
		instanceVariables: 	#('image')
		organization: 	a ClassOrganization
		subclasses: 	{ThreePhaseButtonMorph. AlphaImageMorph. LoadingMorph. ImageEscargo...etc...
		name: 	#ImageMorph
		classPool: 	a Dictionary(#DefaultForm->Form(1x1x1) )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Base-Basic'
		traitComposition: 	TAbleToRotate
		localSelectors: 	a Set(#extent: #readFromFile #changeOpacity #borderStyle: #rele...etc...
		announcer: 	nil


ScrollBar>>updateDownButtonImage
	Receiver: a ScrollBar(699138048)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(646.0@906.0) corner: (852.0@919.0)
		owner: 	nil
		submorphs: 	an Array(a BorderedMorph(992477184))
		fullBounds: 	nil
		color: 	(Color r: 0.96 g: 0.96 b: 0.96 alpha: 1.0)
		extension: 	a MorphExtension (743440384) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a NewList(882114560)
		open: 	false
		accessor: 	#hScrollBarValue
		slider: 	a BorderedMorph(730333184)
		value: 	0.0
		setValueSelector: 	nil
		sliderShadow: 	a BorderedMorph(765984768)
		sliderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		descending: 	false
		upButton: 	a BorderedMorph(992477184)
		downButton: 	a BorderedMorph(735313920)
		pagingArea: 	a Morph(315097088)
		scrollDelta: 	0.3333333333333333
		pageDelta: 	0.26666666666666666
		interval: 	0.391304347826087
		timeOfMouseDown: 	nil
		timeOfLastScroll: 	nil
		nextPageDirection: 	nil
		currentScrollDelay: 	nil


ScrollBar>>initializeDownButton
	Receiver: a ScrollBar(699138048)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(646.0@906.0) corner: (852.0@919.0)
		owner: 	nil
		submorphs: 	an Array(a BorderedMorph(992477184))
		fullBounds: 	nil
		color: 	(Color r: 0.96 g: 0.96 b: 0.96 alpha: 1.0)
		extension: 	a MorphExtension (743440384) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a NewList(882114560)
		open: 	false
		accessor: 	#hScrollBarValue
		slider: 	a BorderedMorph(730333184)
		value: 	0.0
		setValueSelector: 	nil
		sliderShadow: 	a BorderedMorph(765984768)
		sliderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		descending: 	false
		upButton: 	a BorderedMorph(992477184)
		downButton: 	a BorderedMorph(735313920)
		pagingArea: 	a Morph(315097088)
		scrollDelta: 	0.3333333333333333
		pageDelta: 	0.26666666666666666
		interval: 	0.391304347826087
		timeOfMouseDown: 	nil
		timeOfLastScroll: 	nil
		nextPageDirection: 	nil
		currentScrollDelay: 	nil


ScrollBar>>initializeSlider
	Receiver: a ScrollBar(699138048)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(646.0@906.0) corner: (852.0@919.0)
		owner: 	nil
		submorphs: 	an Array(a BorderedMorph(992477184))
		fullBounds: 	nil
		color: 	(Color r: 0.96 g: 0.96 b: 0.96 alpha: 1.0)
		extension: 	a MorphExtension (743440384) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a NewList(882114560)
		open: 	false
		accessor: 	#hScrollBarValue
		slider: 	a BorderedMorph(730333184)
		value: 	0.0
		setValueSelector: 	nil
		sliderShadow: 	a BorderedMorph(765984768)
		sliderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		descending: 	false
		upButton: 	a BorderedMorph(992477184)
		downButton: 	a BorderedMorph(735313920)
		pagingArea: 	a Morph(315097088)
		scrollDelta: 	0.3333333333333333
		pageDelta: 	0.26666666666666666
		interval: 	0.391304347826087
		timeOfMouseDown: 	nil
		timeOfLastScroll: 	nil
		nextPageDirection: 	nil
		currentScrollDelay: 	nil


ScrollBar(Slider)>>extent:
	Receiver: a ScrollBar(699138048)
	Arguments and temporary variables: 
		newExtent: 	(206.0@13.0)
	Receiver's instance variables: 
		bounds: 	(646.0@906.0) corner: (852.0@919.0)
		owner: 	nil
		submorphs: 	an Array(a BorderedMorph(992477184))
		fullBounds: 	nil
		color: 	(Color r: 0.96 g: 0.96 b: 0.96 alpha: 1.0)
		extension: 	a MorphExtension (743440384) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a NewList(882114560)
		open: 	false
		accessor: 	#hScrollBarValue
		slider: 	a BorderedMorph(730333184)
		value: 	0.0
		setValueSelector: 	nil
		sliderShadow: 	a BorderedMorph(765984768)
		sliderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		descending: 	false
		upButton: 	a BorderedMorph(992477184)
		downButton: 	a BorderedMorph(735313920)
		pagingArea: 	a Morph(315097088)
		scrollDelta: 	0.3333333333333333
		pageDelta: 	0.26666666666666666
		interval: 	0.391304347826087
		timeOfMouseDown: 	nil
		timeOfLastScroll: 	nil
		nextPageDirection: 	nil
		currentScrollDelay: 	nil


ScrollBar>>extent:
	Receiver: a ScrollBar(699138048)
	Arguments and temporary variables: 
		p: 	(206.0@13.0)
	Receiver's instance variables: 
		bounds: 	(646.0@906.0) corner: (852.0@919.0)
		owner: 	nil
		submorphs: 	an Array(a BorderedMorph(992477184))
		fullBounds: 	nil
		color: 	(Color r: 0.96 g: 0.96 b: 0.96 alpha: 1.0)
		extension: 	a MorphExtension (743440384) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a NewList(882114560)
		open: 	false
		accessor: 	#hScrollBarValue
		slider: 	a BorderedMorph(730333184)
		value: 	0.0
		setValueSelector: 	nil
		sliderShadow: 	a BorderedMorph(765984768)
		sliderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		descending: 	false
		upButton: 	a BorderedMorph(992477184)
		downButton: 	a BorderedMorph(735313920)
		pagingArea: 	a Morph(315097088)
		scrollDelta: 	0.3333333333333333
		pageDelta: 	0.26666666666666666
		interval: 	0.391304347826087
		timeOfMouseDown: 	nil
		timeOfLastScroll: 	nil
		nextPageDirection: 	nil
		currentScrollDelay: 	nil


ScrollBar(Morph)>>bounds:
	Receiver: a ScrollBar(699138048)
	Arguments and temporary variables: 
		newBounds: 	(646.0@899.0) corner: (852.0@912.0)
		oldExtent: 	(208.0@13.0)
		newExtent: 	(206.0@13.0)
	Receiver's instance variables: 
		bounds: 	(646.0@906.0) corner: (852.0@919.0)
		owner: 	nil
		submorphs: 	an Array(a BorderedMorph(992477184))
		fullBounds: 	nil
		color: 	(Color r: 0.96 g: 0.96 b: 0.96 alpha: 1.0)
		extension: 	a MorphExtension (743440384) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a NewList(882114560)
		open: 	false
		accessor: 	#hScrollBarValue
		slider: 	a BorderedMorph(730333184)
		value: 	0.0
		setValueSelector: 	nil
		sliderShadow: 	a BorderedMorph(765984768)
		sliderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		descending: 	false
		upButton: 	a BorderedMorph(992477184)
		downButton: 	a BorderedMorph(735313920)
		pagingArea: 	a Morph(315097088)
		scrollDelta: 	0.3333333333333333
		pageDelta: 	0.26666666666666666
		interval: 	0.391304347826087
		timeOfMouseDown: 	nil
		timeOfLastScroll: 	nil
		nextPageDirection: 	nil
		currentScrollDelay: 	nil


NewList(ScrollPane)>>hResizeScrollBar
	Receiver: a NewList(882114560)
	Arguments and temporary variables: 
		topLeft: 	(646.0@899.0)
		h: 	13
	Receiver's instance variables: 
		bounds: 	(645.0@740.0) corner: (853.0@913.0)
		owner: 	a PanelMorph(294387712)
		submorphs: 	an Array(a TransformMorph(223346688))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (81002496) [other:  (dragEnabled -> false) (dropEna...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a NewValueHolder[ a MorphicNewListAdapter ]
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(933756928)
		scroller: 	a TransformMorph(223346688)
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(699138048)
		listCache: 	a CollectionValueHolder[ an OrderedCollection('thisContext'->BalleRe...etc...
		listSize: 	a NewValueHolder[ 6 ]
		isInitialized: 	a NewValueHolder[ true ]
		isMultipleSelection: 	a NewValueHolder[ false ]
		selectedIndex: 	a NewValueHolder[ 1 ]
		selectedIndexes: 	a DictionaryValueHolder[ a Dictionary(1->true ) ]
		renderer: 	a NewValueHolder[ a NewListRenderer(929824768) ]
		headerHeight: 	a NewValueHolder[ 0 ]
		headerTitle: 	a CollectionValueHolder[ nil ]
		clickOnHeader: 	a NewValueHolder[ nil ]
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		secondSelection: 	a NewValueHolder[ 0 ]
		displayListCache: 	a CollectionValueHolder[ #(nil nil nil nil nil nil) ]
		deSelectOnReclick: 	a NewValueHolder[ false ]
		runningProcesses: 	a CollectionValueHolder[ #(nil nil nil nil nil nil) ]
		selectionWithKeys: 	a NewValueHolder[ true ]
		drawColor: 	a NewValueHolder[ Color white ]
		selectedItem: 	a NewValueHolder[ 'thisContext'->BalleRebondissante(BalleSimple)>...etc...
		selectedItems: 	a CollectionValueHolder[ an Array('thisContext'->BalleRebondissa...etc...
		unselectOnChange: 	a NewValueHolder[ false ]
		iconCache: 	a DictionaryValueHolder[ a Dictionary() ]
		iconMaxSize: 	a NewValueHolder[ (0@0) ]
		enabled: 	a NewValueHolder[ true ]
		allowToSelect: 	a NewValueHolder[ true ]


NewList(ScrollPane)>>resizeScrollBars
	Receiver: a NewList(882114560)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(645.0@740.0) corner: (853.0@913.0)
		owner: 	a PanelMorph(294387712)
		submorphs: 	an Array(a TransformMorph(223346688))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (81002496) [other:  (dragEnabled -> false) (dropEna...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a NewValueHolder[ a MorphicNewListAdapter ]
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(933756928)
		scroller: 	a TransformMorph(223346688)
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(699138048)
		listCache: 	a CollectionValueHolder[ an OrderedCollection('thisContext'->BalleRe...etc...
		listSize: 	a NewValueHolder[ 6 ]
		isInitialized: 	a NewValueHolder[ true ]
		isMultipleSelection: 	a NewValueHolder[ false ]
		selectedIndex: 	a NewValueHolder[ 1 ]
		selectedIndexes: 	a DictionaryValueHolder[ a Dictionary(1->true ) ]
		renderer: 	a NewValueHolder[ a NewListRenderer(929824768) ]
		headerHeight: 	a NewValueHolder[ 0 ]
		headerTitle: 	a CollectionValueHolder[ nil ]
		clickOnHeader: 	a NewValueHolder[ nil ]
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		secondSelection: 	a NewValueHolder[ 0 ]
		displayListCache: 	a CollectionValueHolder[ #(nil nil nil nil nil nil) ]
		deSelectOnReclick: 	a NewValueHolder[ false ]
		runningProcesses: 	a CollectionValueHolder[ #(nil nil nil nil nil nil) ]
		selectionWithKeys: 	a NewValueHolder[ true ]
		drawColor: 	a NewValueHolder[ Color white ]
		selectedItem: 	a NewValueHolder[ 'thisContext'->BalleRebondissante(BalleSimple)>...etc...
		selectedItems: 	a CollectionValueHolder[ an Array('thisContext'->BalleRebondissa...etc...
		unselectOnChange: 	a NewValueHolder[ false ]
		iconCache: 	a DictionaryValueHolder[ a Dictionary() ]
		iconMaxSize: 	a NewValueHolder[ (0@0) ]
		enabled: 	a NewValueHolder[ true ]
		allowToSelect: 	a NewValueHolder[ true ]


NewList(ScrollPane)>>extent:
	Receiver: a NewList(882114560)
	Arguments and temporary variables: 
		newExtent: 	(208.0@173.0)
		oldW: 	210.0
		oldH: 	180.0
		wasHShowing: 	false
		wasVShowing: 	false
		noVPlease: 	false
		noHPlease: 	false
		minH: 	29
		minW: 	33
	Receiver's instance variables: 
		bounds: 	(645.0@740.0) corner: (853.0@913.0)
		owner: 	a PanelMorph(294387712)
		submorphs: 	an Array(a TransformMorph(223346688))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (81002496) [other:  (dragEnabled -> false) (dropEna...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a NewValueHolder[ a MorphicNewListAdapter ]
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(933756928)
		scroller: 	a TransformMorph(223346688)
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(699138048)
		listCache: 	a CollectionValueHolder[ an OrderedCollection('thisContext'->BalleRe...etc...
		listSize: 	a NewValueHolder[ 6 ]
		isInitialized: 	a NewValueHolder[ true ]
		isMultipleSelection: 	a NewValueHolder[ false ]
		selectedIndex: 	a NewValueHolder[ 1 ]
		selectedIndexes: 	a DictionaryValueHolder[ a Dictionary(1->true ) ]
		renderer: 	a NewValueHolder[ a NewListRenderer(929824768) ]
		headerHeight: 	a NewValueHolder[ 0 ]
		headerTitle: 	a CollectionValueHolder[ nil ]
		clickOnHeader: 	a NewValueHolder[ nil ]
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		secondSelection: 	a NewValueHolder[ 0 ]
		displayListCache: 	a CollectionValueHolder[ #(nil nil nil nil nil nil) ]
		deSelectOnReclick: 	a NewValueHolder[ false ]
		runningProcesses: 	a CollectionValueHolder[ #(nil nil nil nil nil nil) ]
		selectionWithKeys: 	a NewValueHolder[ true ]
		drawColor: 	a NewValueHolder[ Color white ]
		selectedItem: 	a NewValueHolder[ 'thisContext'->BalleRebondissante(BalleSimple)>...etc...
		selectedItems: 	a CollectionValueHolder[ an Array('thisContext'->BalleRebondissa...etc...
		unselectOnChange: 	a NewValueHolder[ false ]
		iconCache: 	a DictionaryValueHolder[ a Dictionary() ]
		iconMaxSize: 	a NewValueHolder[ (0@0) ]
		enabled: 	a NewValueHolder[ true ]
		allowToSelect: 	a NewValueHolder[ true ]


NewList>>extent:
	Receiver: a NewList(882114560)
	Arguments and temporary variables: 
		newExtent: 	(208.0@173.0)
	Receiver's instance variables: 
		bounds: 	(645.0@740.0) corner: (853.0@913.0)
		owner: 	a PanelMorph(294387712)
		submorphs: 	an Array(a TransformMorph(223346688))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (81002496) [other:  (dragEnabled -> false) (dropEna...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a NewValueHolder[ a MorphicNewListAdapter ]
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(933756928)
		scroller: 	a TransformMorph(223346688)
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(699138048)
		listCache: 	a CollectionValueHolder[ an OrderedCollection('thisContext'->BalleRe...etc...
		listSize: 	a NewValueHolder[ 6 ]
		isInitialized: 	a NewValueHolder[ true ]
		isMultipleSelection: 	a NewValueHolder[ false ]
		selectedIndex: 	a NewValueHolder[ 1 ]
		selectedIndexes: 	a DictionaryValueHolder[ a Dictionary(1->true ) ]
		renderer: 	a NewValueHolder[ a NewListRenderer(929824768) ]
		headerHeight: 	a NewValueHolder[ 0 ]
		headerTitle: 	a CollectionValueHolder[ nil ]
		clickOnHeader: 	a NewValueHolder[ nil ]
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		secondSelection: 	a NewValueHolder[ 0 ]
		displayListCache: 	a CollectionValueHolder[ #(nil nil nil nil nil nil) ]
		deSelectOnReclick: 	a NewValueHolder[ false ]
		runningProcesses: 	a CollectionValueHolder[ #(nil nil nil nil nil nil) ]
		selectionWithKeys: 	a NewValueHolder[ true ]
		drawColor: 	a NewValueHolder[ Color white ]
		selectedItem: 	a NewValueHolder[ 'thisContext'->BalleRebondissante(BalleSimple)>...etc...
		selectedItems: 	a CollectionValueHolder[ an Array('thisContext'->BalleRebondissa...etc...
		unselectOnChange: 	a NewValueHolder[ false ]
		iconCache: 	a DictionaryValueHolder[ a Dictionary() ]
		iconMaxSize: 	a NewValueHolder[ (0@0) ]
		enabled: 	a NewValueHolder[ true ]
		allowToSelect: 	a NewValueHolder[ true ]


NewList(Morph)>>bounds:
	Receiver: a NewList(882114560)
	Arguments and temporary variables: 
		newBounds: 	(645.0@740.0) corner: (853.0@913.0)
		oldExtent: 	(210.0@180.0)
		newExtent: 	(208.0@173.0)
	Receiver's instance variables: 
		bounds: 	(645.0@740.0) corner: (853.0@913.0)
		owner: 	a PanelMorph(294387712)
		submorphs: 	an Array(a TransformMorph(223346688))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (81002496) [other:  (dragEnabled -> false) (dropEna...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a NewValueHolder[ a MorphicNewListAdapter ]
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(933756928)
		scroller: 	a TransformMorph(223346688)
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(699138048)
		listCache: 	a CollectionValueHolder[ an OrderedCollection('thisContext'->BalleRe...etc...
		listSize: 	a NewValueHolder[ 6 ]
		isInitialized: 	a NewValueHolder[ true ]
		isMultipleSelection: 	a NewValueHolder[ false ]
		selectedIndex: 	a NewValueHolder[ 1 ]
		selectedIndexes: 	a DictionaryValueHolder[ a Dictionary(1->true ) ]
		renderer: 	a NewValueHolder[ a NewListRenderer(929824768) ]
		headerHeight: 	a NewValueHolder[ 0 ]
		headerTitle: 	a CollectionValueHolder[ nil ]
		clickOnHeader: 	a NewValueHolder[ nil ]
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		secondSelection: 	a NewValueHolder[ 0 ]
		displayListCache: 	a CollectionValueHolder[ #(nil nil nil nil nil nil) ]
		deSelectOnReclick: 	a NewValueHolder[ false ]
		runningProcesses: 	a CollectionValueHolder[ #(nil nil nil nil nil nil) ]
		selectionWithKeys: 	a NewValueHolder[ true ]
		drawColor: 	a NewValueHolder[ Color white ]
		selectedItem: 	a NewValueHolder[ 'thisContext'->BalleRebondissante(BalleSimple)>...etc...
		selectedItems: 	a CollectionValueHolder[ an Array('thisContext'->BalleRebondissa...etc...
		unselectOnChange: 	a NewValueHolder[ false ]
		iconCache: 	a DictionaryValueHolder[ a Dictionary() ]
		iconMaxSize: 	a NewValueHolder[ (0@0) ]
		enabled: 	a NewValueHolder[ true ]
		allowToSelect: 	a NewValueHolder[ true ]


NewList(Morph)>>layoutInBounds:
	Receiver: a NewList(882114560)
	Arguments and temporary variables: 
		cellBounds: 	(645@740) corner: (853@913)
		box: 	(645.0@740.0) corner: (853.0@913.0)
		aSymbol: 	#center
		delta: 	nil
	Receiver's instance variables: 
		bounds: 	(645.0@740.0) corner: (853.0@913.0)
		owner: 	a PanelMorph(294387712)
		submorphs: 	an Array(a TransformMorph(223346688))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (81002496) [other:  (dragEnabled -> false) (dropEna...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a NewValueHolder[ a MorphicNewListAdapter ]
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(933756928)
		scroller: 	a TransformMorph(223346688)
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(699138048)
		listCache: 	a CollectionValueHolder[ an OrderedCollection('thisContext'->BalleRe...etc...
		listSize: 	a NewValueHolder[ 6 ]
		isInitialized: 	a NewValueHolder[ true ]
		isMultipleSelection: 	a NewValueHolder[ false ]
		selectedIndex: 	a NewValueHolder[ 1 ]
		selectedIndexes: 	a DictionaryValueHolder[ a Dictionary(1->true ) ]
		renderer: 	a NewValueHolder[ a NewListRenderer(929824768) ]
		headerHeight: 	a NewValueHolder[ 0 ]
		headerTitle: 	a CollectionValueHolder[ nil ]
		clickOnHeader: 	a NewValueHolder[ nil ]
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		secondSelection: 	a NewValueHolder[ 0 ]
		displayListCache: 	a CollectionValueHolder[ #(nil nil nil nil nil nil) ]
		deSelectOnReclick: 	a NewValueHolder[ false ]
		runningProcesses: 	a CollectionValueHolder[ #(nil nil nil nil nil nil) ]
		selectionWithKeys: 	a NewValueHolder[ true ]
		drawColor: 	a NewValueHolder[ Color white ]
		selectedItem: 	a NewValueHolder[ 'thisContext'->BalleRebondissante(BalleSimple)>...etc...
		selectedItems: 	a CollectionValueHolder[ an Array('thisContext'->BalleRebondissa...etc...
		unselectOnChange: 	a NewValueHolder[ false ]
		iconCache: 	a DictionaryValueHolder[ a Dictionary() ]
		iconMaxSize: 	a NewValueHolder[ (0@0) ]
		enabled: 	a NewValueHolder[ true ]
		allowToSelect: 	a NewValueHolder[ true ]


NewList(Morph)>>layoutProportionallyIn:
	Receiver: a NewList(882114560)
	Arguments and temporary variables: 
		newBounds: 	(645.0@740.0) corner: (1275.0@913.0)
		box: 	(645@740) corner: (853@913)
		frame: 	a LayoutFrame ( (0@0) + (0@0)px corner: (0.33@1) + (0@0)px ) 
	Receiver's instance variables: 
		bounds: 	(645.0@740.0) corner: (853.0@913.0)
		owner: 	a PanelMorph(294387712)
		submorphs: 	an Array(a TransformMorph(223346688))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (81002496) [other:  (dragEnabled -> false) (dropEna...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a NewValueHolder[ a MorphicNewListAdapter ]
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(933756928)
		scroller: 	a TransformMorph(223346688)
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(699138048)
		listCache: 	a CollectionValueHolder[ an OrderedCollection('thisContext'->BalleRe...etc...
		listSize: 	a NewValueHolder[ 6 ]
		isInitialized: 	a NewValueHolder[ true ]
		isMultipleSelection: 	a NewValueHolder[ false ]
		selectedIndex: 	a NewValueHolder[ 1 ]
		selectedIndexes: 	a DictionaryValueHolder[ a Dictionary(1->true ) ]
		renderer: 	a NewValueHolder[ a NewListRenderer(929824768) ]
		headerHeight: 	a NewValueHolder[ 0 ]
		headerTitle: 	a CollectionValueHolder[ nil ]
		clickOnHeader: 	a NewValueHolder[ nil ]
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		secondSelection: 	a NewValueHolder[ 0 ]
		displayListCache: 	a CollectionValueHolder[ #(nil nil nil nil nil nil) ]
		deSelectOnReclick: 	a NewValueHolder[ false ]
		runningProcesses: 	a CollectionValueHolder[ #(nil nil nil nil nil nil) ]
		selectionWithKeys: 	a NewValueHolder[ true ]
		drawColor: 	a NewValueHolder[ Color white ]
		selectedItem: 	a NewValueHolder[ 'thisContext'->BalleRebondissante(BalleSimple)>...etc...
		selectedItems: 	a CollectionValueHolder[ an Array('thisContext'->BalleRebondissa...etc...
		unselectOnChange: 	a NewValueHolder[ false ]
		iconCache: 	a DictionaryValueHolder[ a Dictionary() ]
		iconMaxSize: 	a NewValueHolder[ (0@0) ]
		enabled: 	a NewValueHolder[ true ]
		allowToSelect: 	a NewValueHolder[ true ]


[ :m | m layoutProportionallyIn: newBounds ] in ProportionalLayout>>layout:in:
	Receiver: a ProportionalLayout
	Arguments and temporary variables: 
		aMorph: 	a PanelMorph(294387712)
		newBounds: 	(645.0@740.0) corner: (1275.0@913.0)
		m: 	a NewList(882114560)
	Receiver's instance variables: 
a ProportionalLayout

Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableTextMorph(12582912) a ProportionalSplitterMorph(558628864) a NewList(8...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :m | m layoutProportionallyIn: newBounds ]
		index: 	3
	Receiver's instance variables: 
an Array(a PluggableTextMorph(12582912) a ProportionalSplitterMorph(558628864) a NewList(8...etc...

PanelMorph(Morph)>>submorphsDo:
	Receiver: a PanelMorph(294387712)
	Arguments and temporary variables: 
		aBlock: 	[ :m | m layoutProportionallyIn: newBounds ]
	Receiver's instance variables: 
		bounds: 	(645.0@740.0) corner: (1275.0@913.0)
		owner: 	a PanelMorph(991952896)
		submorphs: 	an Array(a PluggableTextMorph(12582912) a ProportionalSplitterMorph(...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (341049344) [sticky]  [other:  (kmDispatcher -> a K...etc...
		borderWidth: 	0
		borderColor: 	Color black


ProportionalLayout>>layout:in:
	Receiver: a ProportionalLayout
	Arguments and temporary variables: 
		aMorph: 	a PanelMorph(294387712)
		newBounds: 	(645.0@740.0) corner: (1275.0@913.0)
	Receiver's instance variables: 
a ProportionalLayout

PanelMorph(Morph)>>doLayoutIn:
	Receiver: a PanelMorph(294387712)
	Arguments and temporary variables: 
		layoutBounds: 	(645.0@740.0) corner: (1275.0@913.0)
		box: 	nil
		priorBounds: 	(645.0@740.0) corner: (1275.0@913.0)
		layout: 	a ProportionalLayout
	Receiver's instance variables: 
		bounds: 	(645.0@740.0) corner: (1275.0@913.0)
		owner: 	a PanelMorph(991952896)
		submorphs: 	an Array(a PluggableTextMorph(12582912) a ProportionalSplitterMorph(...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (341049344) [sticky]  [other:  (kmDispatcher -> a K...etc...
		borderWidth: 	0
		borderColor: 	Color black


[ self doLayoutIn: self layoutBounds ] in PanelMorph(Morph)>>computeFullBounds
	Receiver: a PanelMorph(294387712)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(645.0@740.0) corner: (1275.0@913.0)
		owner: 	a PanelMorph(991952896)
		submorphs: 	an Array(a PluggableTextMorph(12582912) a ProportionalSplitterMorph(...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (341049344) [sticky]  [other:  (kmDispatcher -> a K...etc...
		borderWidth: 	0
		borderColor: 	Color black


BlockClosure>>on:do:
	Receiver: [ self doLayoutIn: self layoutBounds ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
"This should do it unless you don't screw up the bounds...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	PanelMorph(Morph)>>computeFullBounds
		startpc: 	37
		numArgs: 	0


PanelMorph(Morph)>>computeFullBounds
	Receiver: a PanelMorph(294387712)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(645.0@740.0) corner: (1275.0@913.0)
		owner: 	a PanelMorph(991952896)
		submorphs: 	an Array(a PluggableTextMorph(12582912) a ProportionalSplitterMorph(...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (341049344) [sticky]  [other:  (kmDispatcher -> a K...etc...
		borderWidth: 	0
		borderColor: 	Color black


PanelMorph(Morph)>>fullBounds
	Receiver: a PanelMorph(294387712)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(645.0@740.0) corner: (1275.0@913.0)
		owner: 	a PanelMorph(991952896)
		submorphs: 	an Array(a PluggableTextMorph(12582912) a ProportionalSplitterMorph(...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (341049344) [sticky]  [other:  (kmDispatcher -> a K...etc...
		borderWidth: 	0
		borderColor: 	Color black


PanelMorph(Morph)>>position:
	Receiver: a PanelMorph(294387712)
	Arguments and temporary variables: 
		aPoint: 	(640.0@740.0)
		delta: 	(-5.0@0.0)
		box: 	nil
	Receiver's instance variables: 
		bounds: 	(645.0@740.0) corner: (1275.0@913.0)
		owner: 	a PanelMorph(991952896)
		submorphs: 	an Array(a PluggableTextMorph(12582912) a ProportionalSplitterMorph(...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (341049344) [sticky]  [other:  (kmDispatcher -> a K...etc...
		borderWidth: 	0
		borderColor: 	Color black


PanelMorph(Morph)>>bounds:
	Receiver: a PanelMorph(294387712)
	Arguments and temporary variables: 
		newBounds: 	(640.0@740.0) corner: (1270.0@913.0)
		oldExtent: 	(635.0@180.0)
		newExtent: 	(630.0@173.0)
	Receiver's instance variables: 
		bounds: 	(645.0@740.0) corner: (1275.0@913.0)
		owner: 	a PanelMorph(991952896)
		submorphs: 	an Array(a PluggableTextMorph(12582912) a ProportionalSplitterMorph(...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (341049344) [sticky]  [other:  (kmDispatcher -> a K...etc...
		borderWidth: 	0
		borderColor: 	Color black


PanelMorph(Morph)>>layoutInBounds:
	Receiver: a PanelMorph(294387712)
	Arguments and temporary variables: 
		cellBounds: 	(640@740) corner: (1270@913)
		box: 	(640.0@740.0) corner: (1270.0@913.0)
		aSymbol: 	#center
		delta: 	nil
	Receiver's instance variables: 
		bounds: 	(645.0@740.0) corner: (1275.0@913.0)
		owner: 	a PanelMorph(991952896)
		submorphs: 	an Array(a PluggableTextMorph(12582912) a ProportionalSplitterMorph(...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (341049344) [sticky]  [other:  (kmDispatcher -> a K...etc...
		borderWidth: 	0
		borderColor: 	Color black


PanelMorph(Morph)>>layoutProportionallyIn:
	Receiver: a PanelMorph(294387712)
	Arguments and temporary variables: 
		newBounds: 	(0.0@740.0) corner: (1270.0@913.0)
		box: 	(640@740) corner: (1270@913)
		frame: 	a LayoutFrame ( ((1/2)@0) + (5@0)px corner: (1@1) + (0@0)px ) 
	Receiver's instance variables: 
		bounds: 	(645.0@740.0) corner: (1275.0@913.0)
		owner: 	a PanelMorph(991952896)
		submorphs: 	an Array(a PluggableTextMorph(12582912) a ProportionalSplitterMorph(...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (341049344) [sticky]  [other:  (kmDispatcher -> a K...etc...
		borderWidth: 	0
		borderColor: 	Color black


[ :m | m layoutProportionallyIn: newBounds ] in ProportionalLayout>>layout:in:
	Receiver: a ProportionalLayout
	Arguments and temporary variables: 
		aMorph: 	a PanelMorph(991952896)
		newBounds: 	(0.0@740.0) corner: (1270.0@913.0)
		m: 	a PanelMorph(294387712)
	Receiver's instance variables: 
a ProportionalLayout

Array(SequenceableCollection)>>do:
	Receiver: an Array(a PanelMorph(294387712) a ProportionalSplitterMorph(332398592) a PanelMorph(20342...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :m | m layoutProportionallyIn: newBounds ]
		index: 	1
	Receiver's instance variables: 
an Array(a PanelMorph(294387712) a ProportionalSplitterMorph(332398592) a PanelMorph(20342...etc...

PanelMorph(Morph)>>submorphsDo:
	Receiver: a PanelMorph(991952896)
	Arguments and temporary variables: 
		aBlock: 	[ :m | m layoutProportionallyIn: newBounds ]
	Receiver's instance variables: 
		bounds: 	(0.0@740.0) corner: (1270.0@913.0)
		owner: 	a PanelMorph(329777152)
		submorphs: 	an Array(a PanelMorph(294387712) a ProportionalSplitterMorph(3323985...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (1050673152) [sticky]  [other:  (kmDispatcher -> a ...etc...
		borderWidth: 	0
		borderColor: 	Color black


ProportionalLayout>>layout:in:
	Receiver: a ProportionalLayout
	Arguments and temporary variables: 
		aMorph: 	a PanelMorph(991952896)
		newBounds: 	(0.0@740.0) corner: (1270.0@913.0)
	Receiver's instance variables: 
a ProportionalLayout

PanelMorph(Morph)>>doLayoutIn:
	Receiver: a PanelMorph(991952896)
	Arguments and temporary variables: 
		layoutBounds: 	(0.0@740.0) corner: (1270.0@913.0)
		box: 	nil
		priorBounds: 	(0.0@740.0) corner: (1270.0@913.0)
		layout: 	a ProportionalLayout
	Receiver's instance variables: 
		bounds: 	(0.0@740.0) corner: (1270.0@913.0)
		owner: 	a PanelMorph(329777152)
		submorphs: 	an Array(a PanelMorph(294387712) a ProportionalSplitterMorph(3323985...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (1050673152) [sticky]  [other:  (kmDispatcher -> a ...etc...
		borderWidth: 	0
		borderColor: 	Color black


[ self doLayoutIn: self layoutBounds ] in PanelMorph(Morph)>>computeFullBounds
	Receiver: a PanelMorph(991952896)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0.0@740.0) corner: (1270.0@913.0)
		owner: 	a PanelMorph(329777152)
		submorphs: 	an Array(a PanelMorph(294387712) a ProportionalSplitterMorph(3323985...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (1050673152) [sticky]  [other:  (kmDispatcher -> a ...etc...
		borderWidth: 	0
		borderColor: 	Color black


BlockClosure>>on:do:
	Receiver: [ self doLayoutIn: self layoutBounds ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
"This should do it unless you don't screw up the bounds...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	PanelMorph(Morph)>>computeFullBounds
		startpc: 	37
		numArgs: 	0


PanelMorph(Morph)>>computeFullBounds
	Receiver: a PanelMorph(991952896)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0.0@740.0) corner: (1270.0@913.0)
		owner: 	a PanelMorph(329777152)
		submorphs: 	an Array(a PanelMorph(294387712) a ProportionalSplitterMorph(3323985...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (1050673152) [sticky]  [other:  (kmDispatcher -> a ...etc...
		borderWidth: 	0
		borderColor: 	Color black


PanelMorph(Morph)>>fullBounds
	Receiver: a PanelMorph(991952896)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0.0@740.0) corner: (1270.0@913.0)
		owner: 	a PanelMorph(329777152)
		submorphs: 	an Array(a PanelMorph(294387712) a ProportionalSplitterMorph(3323985...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (1050673152) [sticky]  [other:  (kmDispatcher -> a ...etc...
		borderWidth: 	0
		borderColor: 	Color black


PanelMorph(Morph)>>position:
	Receiver: a PanelMorph(991952896)
	Arguments and temporary variables: 
		aPoint: 	(0.0@714.0)
		delta: 	(0.0@ -26.0)
		box: 	nil
	Receiver's instance variables: 
		bounds: 	(0.0@740.0) corner: (1270.0@913.0)
		owner: 	a PanelMorph(329777152)
		submorphs: 	an Array(a PanelMorph(294387712) a ProportionalSplitterMorph(3323985...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (1050673152) [sticky]  [other:  (kmDispatcher -> a ...etc...
		borderWidth: 	0
		borderColor: 	Color black



--- The full stack ---
ImageMorph(Morph)>>initialize
ImageMorph>>initialize
ImageMorph class(Behavior)>>new
ScrollBar>>updateDownButtonImage
ScrollBar>>initializeDownButton
ScrollBar>>initializeSlider
ScrollBar(Slider)>>extent:
ScrollBar>>extent:
ScrollBar(Morph)>>bounds:
NewList(ScrollPane)>>hResizeScrollBar
NewList(ScrollPane)>>resizeScrollBars
NewList(ScrollPane)>>extent:
NewList>>extent:
NewList(Morph)>>bounds:
NewList(Morph)>>layoutInBounds:
NewList(Morph)>>layoutProportionallyIn:
[ :m | m layoutProportionallyIn: newBounds ] in ProportionalLayout>>layout:in:
Array(SequenceableCollection)>>do:
PanelMorph(Morph)>>submorphsDo:
ProportionalLayout>>layout:in:
PanelMorph(Morph)>>doLayoutIn:
[ self doLayoutIn: self layoutBounds ] in PanelMorph(Morph)>>computeFullBounds
BlockClosure>>on:do:
PanelMorph(Morph)>>computeFullBounds
PanelMorph(Morph)>>fullBounds
PanelMorph(Morph)>>position:
PanelMorph(Morph)>>bounds:
PanelMorph(Morph)>>layoutInBounds:
PanelMorph(Morph)>>layoutProportionallyIn:
[ :m | m layoutProportionallyIn: newBounds ] in ProportionalLayout>>layout:in:
Array(SequenceableCollection)>>do:
PanelMorph(Morph)>>submorphsDo:
ProportionalLayout>>layout:in:
PanelMorph(Morph)>>doLayoutIn:
[ self doLayoutIn: self layoutBounds ] in PanelMorph(Morph)>>computeFullBounds
BlockClosure>>on:do:
PanelMorph(Morph)>>computeFullBounds
PanelMorph(Morph)>>fullBounds
PanelMorph(Morph)>>position:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PanelMorph(Morph)>>bounds:
PanelMorph(Morph)>>layoutInBounds:
PanelMorph(Morph)>>layoutProportionallyIn:
[ :m | m layoutProportionallyIn: newBounds ] in ProportionalLayout>>layout:in:
Array(SequenceableCollection)>>do:
PanelMorph(Morph)>>submorphsDo:
ProportionalLayout>>layout:in:
PanelMorph(Morph)>>doLayoutIn:
[ self doLayoutIn: self layoutBounds ] in PanelMorph(Morph)>>computeFullBounds
BlockClosure>>on:do:
PanelMorph(Morph)>>computeFullBounds
PanelMorph(Morph)>>fullBounds
PanelMorph(Morph)>>position:
PanelMorph(Morph)>>bounds:
PanelMorph(Morph)>>layoutInBounds:
PanelMorph(Morph)>>layoutProportionallyIn:
[ :m | m layoutProportionallyIn: newBounds ] in ProportionalLayout>>layout:in:
Array(SequenceableCollection)>>do:
SpecWindow(Morph)>>submorphsDo:
ProportionalLayout>>layout:in:
SpecWindow(Morph)>>doLayoutIn:
[ self doLayoutIn: self layoutBounds ] in SpecWindow(Morph)>>computeFullBounds
BlockClosure>>on:do:
SpecWindow(Morph)>>computeFullBounds
SpecWindow(Morph)>>fullBounds
SpecWindow(Morph)>>position:
SpecWindow(SystemWindow)>>position:
SpecWindow(Morph)>>bounds:
SpecWindow(SystemWindow)>>openInWorld:
SpecWindow(Morph)>>openInWorld
MorphicWindowAdapter>>open
MorphicWindowAdapter(AbstractAdapter)>>update:with:
[ :aDependent | aDependent update: anAspect with: anObject ] in WindowModel(Object)>>changed:with:
DependentsArray>>do:
WindowModel(Object)>>changed:with:
WindowModel>>openWithSpecLayout:
SpecDebugger(ComposableModel)>>openWithSpecLayout:
SpecDebugger(ComposableModel)>>openWithSpec:
SpecDebugger(ComposableModel)>>openWithSpec
SpecDebugger>>openFullNoSuspendLabel:
[ 
debugger process: process controller: nil context: context.	"schedule debugger in deferred UI message to address
			redraw problems after opening a debugger e.g. from
			the testrunner."	"self defer: ["
bool
	ifTrue: [ debugger openFullNoSuspendLabel: title ]
	ifFalse: [ debugger openNotifierContents: contentsStringOrNil label: title ].
debugger errorWasInUIProcess: errorWasInUIProcess ] in [ 
[ 
debugger process: process controller: nil context: context.	"schedule debugger in deferred UI message to address
			redraw problems after opening a debugger e.g. from
			the testrunner."	"self defer: ["
bool
	ifTrue: [ debugger openFullNoSuspendLabel: title ]
	ifFalse: [ debugger openNotifierContents: contentsStringOrNil label: title ].
debugger errorWasInUIProcess: errorWasInUIProcess ]
	on: Error
	do: [ :ex | 
		Smalltalk tools debugger
			primitiveError:
				'Orginal error: ' , title asString
					,
						'.
	Smalltalk tools debugger error: '
					,
						([ ex description ]
							on: Error
							do: [ 'a ' , ex class printString ]) , ':' ] ] in MorphicUIManager>>openDebuggerOn:context:label:contents:fullView:
BlockClosure>>on:do:
[ 
[ 
debugger process: process controller: nil context: context.	"schedule debugger in deferred UI message to address
			redraw problems after opening a debugger e.g. from
			the testrunner."	"self defer: ["
bool
	ifTrue: [ debugger openFullNoSuspendLabel: title ]
	ifFalse: [ debugger openNotifierContents: contentsStringOrNil label: title ].
debugger errorWasInUIProcess: errorWasInUIProcess ]
	on: Error
	do: [ :ex | 
		Smalltalk tools debugger
			primitiveError:
				'Orginal error: ' , title asString
					,
						'.
	Smalltalk tools debugger error: '
					,
						([ ex description ]
							on: Error
							do: [ 'a ' , ex class printString ]) , ':' ] ] in MorphicUIManager>>openDebuggerOn:context:label:contents:fullView:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
3 March 2015 5:50:04.037134 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

ByteSymbol(Symbol)>>=
	Receiver: #mouseUp
	Arguments and temporary variables: 
		aSymbol: 	#mouseUp
	Receiver's instance variables: 
#mouseUp

Dictionary>>scanFor:
	Receiver: a Dictionary(#mouseDown->a Set(a MorphEventSubscription) #mouseUp->a Set(a MorphEventSubsc...etc...
	Arguments and temporary variables: 
		anObject: 	#mouseUp
		element: 	#mouseUp->a Set(a MorphEventSubscription)
		start: 	4
		finish: 	5
		index: 	4
	Receiver's instance variables: 
		tally: 	2
		array: 	an Array(nil nil nil #mouseUp->a Set(a MorphEventSubscription) #mouseDow...etc...


Dictionary(HashedCollection)>>findElementOrNil:
	Receiver: a Dictionary(#mouseDown->a Set(a MorphEventSubscription) #mouseUp->a Set(a MorphEventSubsc...etc...
	Arguments and temporary variables: 
		anObject: 	#mouseUp
		index: 	nil
	Receiver's instance variables: 
		tally: 	2
		array: 	an Array(nil nil nil #mouseUp->a Set(a MorphEventSubscription) #mouseDow...etc...


Dictionary>>at:ifAbsent:
	Receiver: a Dictionary(#mouseDown->a Set(a MorphEventSubscription) #mouseUp->a Set(a MorphEventSubsc...etc...
	Arguments and temporary variables: 
		key: 	#mouseUp
		aBlock: 	[ self errorKeyNotFound: key ]
	Receiver's instance variables: 
		tally: 	2
		array: 	an Array(nil nil nil #mouseUp->a Set(a MorphEventSubscription) #mouseDow...etc...


Dictionary>>at:
	Receiver: a Dictionary(#mouseDown->a Set(a MorphEventSubscription) #mouseUp->a Set(a MorphEventSubsc...etc...
	Arguments and temporary variables: 
		key: 	#mouseUp
	Receiver's instance variables: 
		tally: 	2
		array: 	an Array(nil nil nil #mouseUp->a Set(a MorphEventSubscription) #mouseDow...etc...


MorphicEventHandler>>addSubscription:toEvent:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		aSubscription: 	a MorphEventSubscription
		eventName: 	#mouseUp
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseDown->a Set(a MorphEventSubscription) #mouseU...etc...


MorphicEventHandler>>on:send:to:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		eventName: 	#mouseUp
		selector: 	#finishedScrolling:
		recipient: 	a ScrollBar(441188352)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseDown->a Set(a MorphEventSubscription) #mouseU...etc...


Morph>>on:send:to:
	Receiver: a Morph(563085312)
	Arguments and temporary variables: 
		eventName: 	#mouseUp
		selector: 	#finishedScrolling:
		recipient: 	a ScrollBar(441188352)
	Receiver's instance variables: 
		bounds: 	(137.0@13.0) corner: (150.0@107.0)
		owner: 	a ScrollBar(441188352)
		submorphs: 	#()
		fullBounds: 	nil
		color: 	(Color r: 0.6 g: 0.6 b: 0.8 alpha: 1.0)
		extension: 	a MorphExtension (590348288) [eventHandler = a MorphicEventHandler] ...etc...


ScrollBar>>initializePagingArea
	Receiver: a ScrollBar(441188352)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(137.0@0.0) corner: (150.0@120.0)
		owner: 	a PluggableTextMorph(413401088)
		submorphs: 	an Array(a Morph(563085312) a BorderedMorph(625475584) a BorderedMor...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.96 g: 0.96 b: 0.96 alpha: 1.0)
		extension: 	a MorphExtension (678428672) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a PluggableTextMorph(413401088)
		open: 	false
		accessor: 	#vScrollBarValue
		slider: 	a BorderedMorph(802947072)
		value: 	0.0
		setValueSelector: 	nil
		sliderShadow: 	a BorderedMorph(826540032)
		sliderColor: 	(Color r: 0.767 g: 0.763 b: 0.763 alpha: 1.0)
		descending: 	false
		upButton: 	a BorderedMorph(526647296)
		downButton: 	a BorderedMorph(625475584)
		pagingArea: 	a Morph(563085312)
		scrollDelta: 	0.07142857142857142
		pageDelta: 	0.6309523809523809
		interval: 	0.4125874125874126
		timeOfMouseDown: 	nil
		timeOfLastScroll: 	nil
		nextPageDirection: 	nil
		currentScrollDelay: 	nil


ScrollBar>>initializeSlider
	Receiver: a ScrollBar(441188352)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(137.0@0.0) corner: (150.0@120.0)
		owner: 	a PluggableTextMorph(413401088)
		submorphs: 	an Array(a Morph(563085312) a BorderedMorph(625475584) a BorderedMor...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.96 g: 0.96 b: 0.96 alpha: 1.0)
		extension: 	a MorphExtension (678428672) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a PluggableTextMorph(413401088)
		open: 	false
		accessor: 	#vScrollBarValue
		slider: 	a BorderedMorph(802947072)
		value: 	0.0
		setValueSelector: 	nil
		sliderShadow: 	a BorderedMorph(826540032)
		sliderColor: 	(Color r: 0.767 g: 0.763 b: 0.763 alpha: 1.0)
		descending: 	false
		upButton: 	a BorderedMorph(526647296)
		downButton: 	a BorderedMorph(625475584)
		pagingArea: 	a Morph(563085312)
		scrollDelta: 	0.07142857142857142
		pageDelta: 	0.6309523809523809
		interval: 	0.4125874125874126
		timeOfMouseDown: 	nil
		timeOfLastScroll: 	nil
		nextPageDirection: 	nil
		currentScrollDelay: 	nil


ScrollBar(Slider)>>extent:
	Receiver: a ScrollBar(441188352)
	Arguments and temporary variables: 
		newExtent: 	(13@120)
	Receiver's instance variables: 
		bounds: 	(137.0@0.0) corner: (150.0@120.0)
		owner: 	a PluggableTextMorph(413401088)
		submorphs: 	an Array(a Morph(563085312) a BorderedMorph(625475584) a BorderedMor...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.96 g: 0.96 b: 0.96 alpha: 1.0)
		extension: 	a MorphExtension (678428672) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a PluggableTextMorph(413401088)
		open: 	false
		accessor: 	#vScrollBarValue
		slider: 	a BorderedMorph(802947072)
		value: 	0.0
		setValueSelector: 	nil
		sliderShadow: 	a BorderedMorph(826540032)
		sliderColor: 	(Color r: 0.767 g: 0.763 b: 0.763 alpha: 1.0)
		descending: 	false
		upButton: 	a BorderedMorph(526647296)
		downButton: 	a BorderedMorph(625475584)
		pagingArea: 	a Morph(563085312)
		scrollDelta: 	0.07142857142857142
		pageDelta: 	0.6309523809523809
		interval: 	0.4125874125874126
		timeOfMouseDown: 	nil
		timeOfLastScroll: 	nil
		nextPageDirection: 	nil
		currentScrollDelay: 	nil


ScrollBar>>extent:
	Receiver: a ScrollBar(441188352)
	Arguments and temporary variables: 
		p: 	(13@120)
	Receiver's instance variables: 
		bounds: 	(137.0@0.0) corner: (150.0@120.0)
		owner: 	a PluggableTextMorph(413401088)
		submorphs: 	an Array(a Morph(563085312) a BorderedMorph(625475584) a BorderedMor...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.96 g: 0.96 b: 0.96 alpha: 1.0)
		extension: 	a MorphExtension (678428672) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a PluggableTextMorph(413401088)
		open: 	false
		accessor: 	#vScrollBarValue
		slider: 	a BorderedMorph(802947072)
		value: 	0.0
		setValueSelector: 	nil
		sliderShadow: 	a BorderedMorph(826540032)
		sliderColor: 	(Color r: 0.767 g: 0.763 b: 0.763 alpha: 1.0)
		descending: 	false
		upButton: 	a BorderedMorph(526647296)
		downButton: 	a BorderedMorph(625475584)
		pagingArea: 	a Morph(563085312)
		scrollDelta: 	0.07142857142857142
		pageDelta: 	0.6309523809523809
		interval: 	0.4125874125874126
		timeOfMouseDown: 	nil
		timeOfLastScroll: 	nil
		nextPageDirection: 	nil
		currentScrollDelay: 	nil


ScrollBar(Morph)>>bounds:
	Receiver: a ScrollBar(441188352)
	Arguments and temporary variables: 
		newBounds: 	(137@0) corner: (150@120)
		oldExtent: 	(13.0@118.0)
		newExtent: 	(13@120)
	Receiver's instance variables: 
		bounds: 	(137.0@0.0) corner: (150.0@120.0)
		owner: 	a PluggableTextMorph(413401088)
		submorphs: 	an Array(a Morph(563085312) a BorderedMorph(625475584) a BorderedMor...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.96 g: 0.96 b: 0.96 alpha: 1.0)
		extension: 	a MorphExtension (678428672) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a PluggableTextMorph(413401088)
		open: 	false
		accessor: 	#vScrollBarValue
		slider: 	a BorderedMorph(802947072)
		value: 	0.0
		setValueSelector: 	nil
		sliderShadow: 	a BorderedMorph(826540032)
		sliderColor: 	(Color r: 0.767 g: 0.763 b: 0.763 alpha: 1.0)
		descending: 	false
		upButton: 	a BorderedMorph(526647296)
		downButton: 	a BorderedMorph(625475584)
		pagingArea: 	a Morph(563085312)
		scrollDelta: 	0.07142857142857142
		pageDelta: 	0.6309523809523809
		interval: 	0.4125874125874126
		timeOfMouseDown: 	nil
		timeOfLastScroll: 	nil
		nextPageDirection: 	nil
		currentScrollDelay: 	nil


PluggableTextMorph(ScrollPane)>>vResizeScrollBar
	Receiver: a PluggableTextMorph(413401088)
	Arguments and temporary variables: 
		w: 	13
		topLeft: 	(137@0)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (150@120)
		owner: 	nil
		submorphs: 	an Array(a ScrollBar(441188352) a TransformMorph(804519936))
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (179830784) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a MorphicTextAdapter
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(441188352)
		scroller: 	a TransformMorph(804519936)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(206569472)
		textMorph: 	a TextMorphForEditView(1043070976)
		getTextSelector: 	#getText
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#readSelection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 0)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	#setSelection:


PluggableTextMorph(ScrollPane)>>resizeScrollBars
	Receiver: a PluggableTextMorph(413401088)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (150@120)
		owner: 	nil
		submorphs: 	an Array(a ScrollBar(441188352) a TransformMorph(804519936))
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (179830784) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a MorphicTextAdapter
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(441188352)
		scroller: 	a TransformMorph(804519936)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(206569472)
		textMorph: 	a TextMorphForEditView(1043070976)
		getTextSelector: 	#getText
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#readSelection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 0)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	#setSelection:


PluggableTextMorph(ScrollPane)>>hideOrShowScrollBars
	Receiver: a PluggableTextMorph(413401088)
	Arguments and temporary variables: 
		wasHShowing: 	false
		wasVShowing: 	true
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (150@120)
		owner: 	nil
		submorphs: 	an Array(a ScrollBar(441188352) a TransformMorph(804519936))
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (179830784) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a MorphicTextAdapter
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(441188352)
		scroller: 	a TransformMorph(804519936)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(206569472)
		textMorph: 	a TextMorphForEditView(1043070976)
		getTextSelector: 	#getText
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#readSelection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 0)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	#setSelection:


PluggableTextMorph(ScrollPane)>>setScrollDeltas
	Receiver: a PluggableTextMorph(413401088)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (150@120)
		owner: 	nil
		submorphs: 	an Array(a ScrollBar(441188352) a TransformMorph(804519936))
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (179830784) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a MorphicTextAdapter
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(441188352)
		scroller: 	a TransformMorph(804519936)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(206569472)
		textMorph: 	a TextMorphForEditView(1043070976)
		getTextSelector: 	#getText
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#readSelection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 0)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	#setSelection:


PluggableTextMorph(ScrollPane)>>borderWidth:
	Receiver: a PluggableTextMorph(413401088)
	Arguments and temporary variables: 
		aNumber: 	0
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (150@120)
		owner: 	nil
		submorphs: 	an Array(a ScrollBar(441188352) a TransformMorph(804519936))
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (179830784) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a MorphicTextAdapter
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(441188352)
		scroller: 	a TransformMorph(804519936)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(206569472)
		textMorph: 	a TextMorphForEditView(1043070976)
		getTextSelector: 	#getText
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#readSelection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 0)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	#setSelection:


SpecInterpreter>>actionToPerformWithSelector:arguments:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		selector: 	#borderWidth:
		args: 	#(0)
	Receiver's instance variables: 
		model: 	a MorphicTextAdapter
		spec: 	a SpecWrapper
		arrayToInterpret: 	#(#PluggableTextMorph #color: #(#model #color) #classOrMetaCl...etc...
		index: 	19


SpecInterpreter>>performNextSelectorAndIncrementIndex
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		args: 	#(0)
		numArgs: 	1
		selector: 	#borderWidth:
	Receiver's instance variables: 
		model: 	a MorphicTextAdapter
		spec: 	a SpecWrapper
		arrayToInterpret: 	#(#PluggableTextMorph #color: #(#model #color) #classOrMetaCl...etc...
		index: 	19


SpecInterpreter>>interpretASpec:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	a SpecLayout
		aSelector: 	nil
		newInstance: 	nil
	Receiver's instance variables: 
		model: 	a MorphicTextAdapter
		spec: 	a SpecWrapper
		arrayToInterpret: 	#(#PluggableTextMorph #color: #(#model #color) #classOrMetaCl...etc...
		index: 	19


SpecInterpreter>>interpretASpec:model:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	a SpecLayout
		aModel: 	a MorphicTextAdapter
		aSelector: 	nil
	Receiver's instance variables: 
		model: 	a MorphicTextAdapter
		spec: 	a SpecWrapper
		arrayToInterpret: 	#(#PluggableTextMorph #color: #(#model #color) #classOrMetaCl...etc...
		index: 	19


SpecInterpreter class>>private_interpretASpec:model:selector:
	Receiver: SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	a SpecLayout
		aModel: 	a MorphicTextAdapter
		aSelector: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#actionToPerformWithSelector:arguments:->SpecInt...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	#(#model #spec #arrayToInterpret #index)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SpecInterpreter
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Spec-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		bindings: 	a MorphicAdapterBindings


MorphicTextAdapter(AbstractAdapter)>>buildWidget
	Receiver: a MorphicTextAdapter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a PluggableTextMorph(413401088))
		model: 	a TextModel
		widget: 	nil
		selector: 	nil


MorphicTextAdapter(AbstractAdapter)>>adapt:
	Receiver: a MorphicTextAdapter
	Arguments and temporary variables: 
		aComposableModel: 	a TextModel
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a PluggableTextMorph(413401088))
		model: 	a TextModel
		widget: 	nil
		selector: 	nil


SpecInterpreter>>actionToPerformWithSelector:arguments:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		selector: 	#adapt:
		args: 	an Array(a TextModel)
	Receiver's instance variables: 
		model: 	a TextModel
		spec: 	a SpecWrapper
		arrayToInterpret: 	#(#TextAdapter #adapt: #(#model))
		index: 	4


SpecInterpreter>>performNextSelectorAndIncrementIndex
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		args: 	an Array(a TextModel)
		numArgs: 	1
		selector: 	#adapt:
	Receiver's instance variables: 
		model: 	a TextModel
		spec: 	a SpecWrapper
		arrayToInterpret: 	#(#TextAdapter #adapt: #(#model))
		index: 	4


SpecInterpreter>>interpretASpec:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	#(#TextAdapter #adapt: #(#model))
		aSelector: 	#defaultSpec
		newInstance: 	nil
	Receiver's instance variables: 
		model: 	a TextModel
		spec: 	a SpecWrapper
		arrayToInterpret: 	#(#TextAdapter #adapt: #(#model))
		index: 	4


SpecInterpreter>>interpretASpec:model:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	#(#TextAdapter #adapt: #(#model))
		aModel: 	a TextModel
		aSelector: 	#defaultSpec
	Receiver's instance variables: 
		model: 	a TextModel
		spec: 	a SpecWrapper
		arrayToInterpret: 	#(#TextAdapter #adapt: #(#model))
		index: 	4


SpecInterpreter class>>private_interpretASpec:model:selector:
	Receiver: SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	#(#TextAdapter #adapt: #(#model))
		aModel: 	a TextModel
		aSelector: 	#defaultSpec
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#actionToPerformWithSelector:arguments:->SpecInt...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	#(#model #spec #arrayToInterpret #index)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SpecInterpreter
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Spec-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		bindings: 	a MorphicAdapterBindings


SpecInterpreter class>>private_buildWidgetFor:withSpec:
	Receiver: SpecInterpreter
	Arguments and temporary variables: 
		aComposableModel: 	a TextModel
		aSymbol: 	#defaultSpec
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#actionToPerformWithSelector:arguments:->SpecInt...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	#(#model #spec #arrayToInterpret #index)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SpecInterpreter
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Spec-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		bindings: 	a MorphicAdapterBindings


TextModel(ComposableModel)>>private_buildWithSpec:
	Receiver: a TextModel
	Arguments and temporary variables: 
		aSpec: 	#defaultSpec
		widget: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicTextAdapter)
		focusOrder: 	nil
		owner: 	a SpecDebugger
		window: 	a NewValueHolder[ nil ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Text' ]
		helpHolder: 	a NewValueHolder[ nil ]
		borderWidth: 	a NewValueHolder[ 0 ]
		borderColor: 	a NewValueHolder[ Color transparent ]
		enabledHolder: 	a NewValueHolder[ true ]
		dragEnabled: 	a NewValueHolder[ false ]
		dropEnabled: 	a NewValueHolder[ false ]
		dragTransformationBlock: 	a NewValueHolder[ [ :item :source | item ] ]
		wantDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source | self dropEnabl...etc...
		acceptDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source |  ] ]
		transferBlock: 	a NewValueHolder[ [ :passenger :source | super transferFor: pass...etc...
		color: 	a NewValueHolder[ Color white ]
		aboutToStyleHolder: 	a NewValueHolder[ [ aBoolean ] ]
		behaviorHolder: 	a NewValueHolder[ ImageMorph ]
		textHolder: 	a CollectionValueHolder[ 'initialize
	"initialize the state of the ...etc...
		actionToPerformHolder: 	a NewValueHolder[ [ :text :notifyer | self recompileMeth...etc...
		readSelectionHolder: 	a NewValueHolder[ [ selection value ] ]
		actionPerformedHolder: 	a CollectionValueHolder[ '' ]
		isCodeCompletionAllowedHolder: 	a NewValueHolder[ true ]
		doItContext: 	a NewValueHolder[ ImageMorph(Morph)>>initialize ]
		doItReceiver: 	a NewValueHolder[ an ImageMorph(857735168) ]
		hasUnacceptedEdits: 	a NewValueHolder[ false ]
		selection: 	a CollectionValueHolder[ (1 to: 0) ]
		scrollValue: 	a NewValueHolder[ (0@0) ]
		menuHolder: 	a NewValueHolder[ [ :menu :shifted | self codeContextMenu: menu shi...etc...
		autoAccept: 	a NewValueHolder[ false ]
		wantsVisualFeedback: 	a NewValueHolder[ true ]
		askBeforeDiscardingEdits: 	a NewValueHolder[ true ]


TextModel(ComposableModel)>>private_buildWithSpec
	Receiver: a TextModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicTextAdapter)
		focusOrder: 	nil
		owner: 	a SpecDebugger
		window: 	a NewValueHolder[ nil ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Text' ]
		helpHolder: 	a NewValueHolder[ nil ]
		borderWidth: 	a NewValueHolder[ 0 ]
		borderColor: 	a NewValueHolder[ Color transparent ]
		enabledHolder: 	a NewValueHolder[ true ]
		dragEnabled: 	a NewValueHolder[ false ]
		dropEnabled: 	a NewValueHolder[ false ]
		dragTransformationBlock: 	a NewValueHolder[ [ :item :source | item ] ]
		wantDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source | self dropEnabl...etc...
		acceptDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source |  ] ]
		transferBlock: 	a NewValueHolder[ [ :passenger :source | super transferFor: pass...etc...
		color: 	a NewValueHolder[ Color white ]
		aboutToStyleHolder: 	a NewValueHolder[ [ aBoolean ] ]
		behaviorHolder: 	a NewValueHolder[ ImageMorph ]
		textHolder: 	a CollectionValueHolder[ 'initialize
	"initialize the state of the ...etc...
		actionToPerformHolder: 	a NewValueHolder[ [ :text :notifyer | self recompileMeth...etc...
		readSelectionHolder: 	a NewValueHolder[ [ selection value ] ]
		actionPerformedHolder: 	a CollectionValueHolder[ '' ]
		isCodeCompletionAllowedHolder: 	a NewValueHolder[ true ]
		doItContext: 	a NewValueHolder[ ImageMorph(Morph)>>initialize ]
		doItReceiver: 	a NewValueHolder[ an ImageMorph(857735168) ]
		hasUnacceptedEdits: 	a NewValueHolder[ false ]
		selection: 	a CollectionValueHolder[ (1 to: 0) ]
		scrollValue: 	a NewValueHolder[ (0@0) ]
		menuHolder: 	a NewValueHolder[ [ :menu :shifted | self codeContextMenu: menu shi...etc...
		autoAccept: 	a NewValueHolder[ false ]
		wantsVisualFeedback: 	a NewValueHolder[ true ]
		askBeforeDiscardingEdits: 	a NewValueHolder[ true ]


SpecInterpreter>>returnInterpretationOf:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		newInstance: 	a TextModel
		result: 	a TextModel
		return: 	nil
	Receiver's instance variables: 
		model: 	a SpecDebugger
		spec: 	a SpecWrapper
		arrayToInterpret: 	#(#model #code)
		index: 	3


SpecInterpreter>>interpretASpec:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	#(#model #code)
		aSelector: 	#specOptimized
		newInstance: 	a TextModel
	Receiver's instance variables: 
		model: 	a SpecDebugger
		spec: 	a SpecWrapper
		arrayToInterpret: 	#(#model #code)
		index: 	3


SpecInterpreter>>interpretASpec:model:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	#(#model #code)
		aModel: 	a SpecDebugger
		aSelector: 	#specOptimized
	Receiver's instance variables: 
		model: 	a SpecDebugger
		spec: 	a SpecWrapper
		arrayToInterpret: 	#(#model #code)
		index: 	3


SpecInterpreter class>>private_interpretASpec:model:selector:
	Receiver: SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	#(#model #code)
		aModel: 	a SpecDebugger
		aSelector: 	#specOptimized
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#actionToPerformWithSelector:arguments:->SpecInt...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	#(#model #spec #arrayToInterpret #index)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SpecInterpreter
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Spec-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		bindings: 	a MorphicAdapterBindings


SpecInterpreter>>computeSpecFrom:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aSymbol: 	#(#model #code)
		aSelector: 	#specOptimized
		instance: 	nil
	Receiver's instance variables: 
		model: 	a SpecDebugger
		spec: 	nil
		arrayToInterpret: 	#(#(#model #code) #layout: #(#SpecLayoutFrame #leftFraction: ...etc...
		index: 	nil


SpecInterpreter>>retrieveSpecFrom:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	#(#(#model #code) #layout: #(#SpecLayoutFrame #leftFraction: 0 #top...etc...
		aSelector: 	#specOptimized
	Receiver's instance variables: 
		model: 	a SpecDebugger
		spec: 	nil
		arrayToInterpret: 	#(#(#model #code) #layout: #(#SpecLayoutFrame #leftFraction: ...etc...
		index: 	nil



--- The full stack ---
ByteSymbol(Symbol)>>=
Dictionary>>scanFor:
Dictionary(HashedCollection)>>findElementOrNil:
Dictionary>>at:ifAbsent:
Dictionary>>at:
MorphicEventHandler>>addSubscription:toEvent:
MorphicEventHandler>>on:send:to:
Morph>>on:send:to:
ScrollBar>>initializePagingArea
ScrollBar>>initializeSlider
ScrollBar(Slider)>>extent:
ScrollBar>>extent:
ScrollBar(Morph)>>bounds:
PluggableTextMorph(ScrollPane)>>vResizeScrollBar
PluggableTextMorph(ScrollPane)>>resizeScrollBars
PluggableTextMorph(ScrollPane)>>hideOrShowScrollBars
PluggableTextMorph(ScrollPane)>>setScrollDeltas
PluggableTextMorph(ScrollPane)>>borderWidth:
SpecInterpreter>>actionToPerformWithSelector:arguments:
SpecInterpreter>>performNextSelectorAndIncrementIndex
SpecInterpreter>>interpretASpec:selector:
SpecInterpreter>>interpretASpec:model:selector:
SpecInterpreter class>>private_interpretASpec:model:selector:
MorphicTextAdapter(AbstractAdapter)>>buildWidget
MorphicTextAdapter(AbstractAdapter)>>adapt:
SpecInterpreter>>actionToPerformWithSelector:arguments:
SpecInterpreter>>performNextSelectorAndIncrementIndex
SpecInterpreter>>interpretASpec:selector:
SpecInterpreter>>interpretASpec:model:selector:
SpecInterpreter class>>private_interpretASpec:model:selector:
SpecInterpreter class>>private_buildWidgetFor:withSpec:
TextModel(ComposableModel)>>private_buildWithSpec:
TextModel(ComposableModel)>>private_buildWithSpec
SpecInterpreter>>returnInterpretationOf:
SpecInterpreter>>interpretASpec:selector:
SpecInterpreter>>interpretASpec:model:selector:
SpecInterpreter class>>private_interpretASpec:model:selector:
SpecInterpreter>>computeSpecFrom:selector:
SpecInterpreter>>retrieveSpecFrom:selector:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
SpecInterpreter>>interpretASpec:selector:
SpecInterpreter>>interpretASpec:model:selector:
SpecInterpreter class>>private_interpretASpec:model:selector:
[ :each | self class private_interpretASpec: each model: model selector: spec selector ] in SpecInterpreter>>performNextSelectorAndIncrementIndex
Array(SequenceableCollection)>>collect:
SpecInterpreter>>performNextSelectorAndIncrementIndex
SpecInterpreter>>interpretASpec:selector:
SpecInterpreter>>interpretASpec:model:selector:
SpecInterpreter class>>private_interpretASpec:model:selector:
[ result := self private_interpretASpec: aPresenter model: aModel selector: aSelector ] in SpecInterpreter class>>interpretASpec:model:selector:
BlockClosure>>ensure:
SpecInterpreter class>>interpretASpec:model:selector:
SpecInterpreter class>>interpretASpec:model:
SpecDebugger(ComposableModel)>>buildWithSpecLayout:
MorphicWindowAdapter>>addModelIn:withSpecLayout:
MorphicWindowAdapter(AbstractAdapter)>>update:with:
[ :aDependent | aDependent update: anAspect with: anObject ] in WindowModel(Object)>>changed:with:
DependentsArray>>do:
WindowModel(Object)>>changed:with:
WindowModel>>addModelIn:withSpecLayout:
WindowModel>>buildWithSpecLayout:
WindowModel>>openWithSpecLayout:
SpecDebugger(ComposableModel)>>openWithSpecLayout:
SpecDebugger(ComposableModel)>>openWithSpec:
SpecDebugger(ComposableModel)>>openWithSpec
SpecDebugger>>openFullNoSuspendLabel:
[ 
debugger process: process controller: nil context: context.	"schedule debugger in deferred UI message to address
			redraw problems after opening a debugger e.g. from
			the testrunner."	"self defer: ["
bool
	ifTrue: [ debugger openFullNoSuspendLabel: title ]
	ifFalse: [ debugger openNotifierContents: contentsStringOrNil label: title ].
debugger errorWasInUIProcess: errorWasInUIProcess ] in [ 
[ 
debugger process: process controller: nil context: context.	"schedule debugger in deferred UI message to address
			redraw problems after opening a debugger e.g. from
			the testrunner."	"self defer: ["
bool
	ifTrue: [ debugger openFullNoSuspendLabel: title ]
	ifFalse: [ debugger openNotifierContents: contentsStringOrNil label: title ].
debugger errorWasInUIProcess: errorWasInUIProcess ]
	on: Error
	do: [ :ex | 
		Smalltalk tools debugger
			primitiveError:
				'Orginal error: ' , title asString
					,
						'.
	Smalltalk tools debugger error: '
					,
						([ ex description ]
							on: Error
							do: [ 'a ' , ex class printString ]) , ':' ] ] in MorphicUIManager>>openDebuggerOn:context:label:contents:fullView:
BlockClosure>>on:do:
[ 
[ 
debugger process: process controller: nil context: context.	"schedule debugger in deferred UI message to address
			redraw problems after opening a debugger e.g. from
			the testrunner."	"self defer: ["
bool
	ifTrue: [ debugger openFullNoSuspendLabel: title ]
	ifFalse: [ debugger openNotifierContents: contentsStringOrNil label: title ].
debugger errorWasInUIProcess: errorWasInUIProcess ]
	on: Error
	do: [ :ex | 
		Smalltalk tools debugger
			primitiveError:
				'Orginal error: ' , title asString
					,
						'.
	Smalltalk tools debugger error: '
					,
						([ ex description ]
							on: Error
							do: [ 'a ' , ex class printString ]) , ':' ] ] in MorphicUIManager>>openDebuggerOn:context:label:contents:fullView:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
3 March 2015 5:50:04.220079 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

PluggableTextMorph(BorderedMorph)>>borderInitialize
	Receiver: a PluggableTextMorph(943718400)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (200@100)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	nil
		borderWidth: 	nil
		borderColor: 	nil
		model: 	nil
		open: 	nil
		accessor: 	nil
		scrollBar: 	nil
		scroller: 	nil
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	nil
		hScrollBar: 	nil
		textMorph: 	nil
		getTextSelector: 	nil
		setTextSelector: 	nil
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	nil
		askBeforeDiscardingEdits: 	nil
		selectionInterval: 	nil
		hasEditingConflicts: 	nil
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	nil
		autoAccept: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil
		highlights: 	nil
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


PluggableTextMorph(BorderedMorph)>>initialize
	Receiver: a PluggableTextMorph(943718400)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (200@100)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	nil
		borderWidth: 	nil
		borderColor: 	nil
		model: 	nil
		open: 	nil
		accessor: 	nil
		scrollBar: 	nil
		scroller: 	nil
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	nil
		hScrollBar: 	nil
		textMorph: 	nil
		getTextSelector: 	nil
		setTextSelector: 	nil
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	nil
		askBeforeDiscardingEdits: 	nil
		selectionInterval: 	nil
		hasEditingConflicts: 	nil
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	nil
		autoAccept: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil
		highlights: 	nil
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


PluggableTextMorph(MorphicModel)>>initialize
	Receiver: a PluggableTextMorph(943718400)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (200@100)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	nil
		borderWidth: 	nil
		borderColor: 	nil
		model: 	nil
		open: 	nil
		accessor: 	nil
		scrollBar: 	nil
		scroller: 	nil
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	nil
		hScrollBar: 	nil
		textMorph: 	nil
		getTextSelector: 	nil
		setTextSelector: 	nil
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	nil
		askBeforeDiscardingEdits: 	nil
		selectionInterval: 	nil
		hasEditingConflicts: 	nil
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	nil
		autoAccept: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil
		highlights: 	nil
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


PluggableTextMorph(ScrollPane)>>initialize
	Receiver: a PluggableTextMorph(943718400)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (200@100)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	nil
		borderWidth: 	nil
		borderColor: 	nil
		model: 	nil
		open: 	nil
		accessor: 	nil
		scrollBar: 	nil
		scroller: 	nil
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	nil
		hScrollBar: 	nil
		textMorph: 	nil
		getTextSelector: 	nil
		setTextSelector: 	nil
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	nil
		askBeforeDiscardingEdits: 	nil
		selectionInterval: 	nil
		hasEditingConflicts: 	nil
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	nil
		autoAccept: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil
		highlights: 	nil
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


PluggableTextMorph>>initialize
	Receiver: a PluggableTextMorph(943718400)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (200@100)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	nil
		borderWidth: 	nil
		borderColor: 	nil
		model: 	nil
		open: 	nil
		accessor: 	nil
		scrollBar: 	nil
		scroller: 	nil
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	nil
		hScrollBar: 	nil
		textMorph: 	nil
		getTextSelector: 	nil
		setTextSelector: 	nil
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	nil
		askBeforeDiscardingEdits: 	nil
		selectionInterval: 	nil
		hasEditingConflicts: 	nil
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	nil
		autoAccept: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil
		highlights: 	nil
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


PluggableTextMorph class(Behavior)>>new
	Receiver: PluggableTextMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	ScrollPane
		methodDict: 	a MethodDictionary(size 186)
		format: 	208
		layout: 	a FixedLayout
		instanceVariables: 	#(#textMorph #getTextSelector #setTextSelector #getSelection...etc...
		organization: 	a ClassOrganization
		subclasses: 	{BrowserCommentTextMorph. PluggableTextEditorMorph. PluggableTextFi...etc...
		name: 	#PluggableTextMorph
		classPool: 	a Dictionary(#ShowTextEditingState->true #StylingClass->SHTextStyler...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Base-Pluggable Widgets'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


SpecInterpreter>>convertSymbolOfClassToInstance:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aSymbol: 	#PluggableTextMorph
		translatedSymbol: 	#PluggableTextMorph
	Receiver's instance variables: 
		model: 	a MorphicTextAdapter
		spec: 	nil
		arrayToInterpret: 	#(#PluggableTextMorph #color: #(#model #color) #classOrMetaCl...etc...
		index: 	nil


SpecInterpreter>>computeSpecFrom:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aSymbol: 	#PluggableTextMorph
		aSelector: 	nil
		instance: 	nil
		result: 	nil
	Receiver's instance variables: 
		model: 	a MorphicTextAdapter
		spec: 	nil
		arrayToInterpret: 	#(#PluggableTextMorph #color: #(#model #color) #classOrMetaCl...etc...
		index: 	nil


SpecInterpreter>>retrieveSpecFrom:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	a SpecLayout
		aSelector: 	nil
	Receiver's instance variables: 
		model: 	a MorphicTextAdapter
		spec: 	nil
		arrayToInterpret: 	#(#PluggableTextMorph #color: #(#model #color) #classOrMetaCl...etc...
		index: 	nil


SpecInterpreter>>interpretASpec:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	a SpecLayout
		aSelector: 	nil
	Receiver's instance variables: 
		model: 	a MorphicTextAdapter
		spec: 	nil
		arrayToInterpret: 	#(#PluggableTextMorph #color: #(#model #color) #classOrMetaCl...etc...
		index: 	nil


SpecInterpreter>>interpretASpec:model:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	a SpecLayout
		aModel: 	a MorphicTextAdapter
		aSelector: 	nil
	Receiver's instance variables: 
		model: 	a MorphicTextAdapter
		spec: 	nil
		arrayToInterpret: 	#(#PluggableTextMorph #color: #(#model #color) #classOrMetaCl...etc...
		index: 	nil


SpecInterpreter class>>private_interpretASpec:model:selector:
	Receiver: SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	a SpecLayout
		aModel: 	a MorphicTextAdapter
		aSelector: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#actionToPerformWithSelector:arguments:->SpecInt...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	#(#model #spec #arrayToInterpret #index)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SpecInterpreter
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Spec-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		bindings: 	a MorphicAdapterBindings


MorphicTextAdapter(AbstractAdapter)>>buildWidget
	Receiver: a MorphicTextAdapter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		model: 	a TextModel
		widget: 	nil
		selector: 	nil


MorphicTextAdapter(AbstractAdapter)>>adapt:
	Receiver: a MorphicTextAdapter
	Arguments and temporary variables: 
		aComposableModel: 	a TextModel
	Receiver's instance variables: 
		dependents: 	nil
		model: 	a TextModel
		widget: 	nil
		selector: 	nil


SpecInterpreter>>actionToPerformWithSelector:arguments:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		selector: 	#adapt:
		args: 	an Array(a TextModel)
	Receiver's instance variables: 
		model: 	a TextModel
		spec: 	a SpecWrapper
		arrayToInterpret: 	#(#TextAdapter #adapt: #(#model))
		index: 	4


SpecInterpreter>>performNextSelectorAndIncrementIndex
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		args: 	an Array(a TextModel)
		numArgs: 	1
		selector: 	#adapt:
	Receiver's instance variables: 
		model: 	a TextModel
		spec: 	a SpecWrapper
		arrayToInterpret: 	#(#TextAdapter #adapt: #(#model))
		index: 	4


SpecInterpreter>>interpretASpec:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	#(#TextAdapter #adapt: #(#model))
		aSelector: 	#defaultSpec
		newInstance: 	nil
	Receiver's instance variables: 
		model: 	a TextModel
		spec: 	a SpecWrapper
		arrayToInterpret: 	#(#TextAdapter #adapt: #(#model))
		index: 	4


SpecInterpreter>>interpretASpec:model:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	#(#TextAdapter #adapt: #(#model))
		aModel: 	a TextModel
		aSelector: 	#defaultSpec
	Receiver's instance variables: 
		model: 	a TextModel
		spec: 	a SpecWrapper
		arrayToInterpret: 	#(#TextAdapter #adapt: #(#model))
		index: 	4


SpecInterpreter class>>private_interpretASpec:model:selector:
	Receiver: SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	#(#TextAdapter #adapt: #(#model))
		aModel: 	a TextModel
		aSelector: 	#defaultSpec
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#actionToPerformWithSelector:arguments:->SpecInt...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	#(#model #spec #arrayToInterpret #index)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SpecInterpreter
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Spec-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		bindings: 	a MorphicAdapterBindings


SpecInterpreter class>>private_buildWidgetFor:withSpec:
	Receiver: SpecInterpreter
	Arguments and temporary variables: 
		aComposableModel: 	a TextModel
		aSymbol: 	#defaultSpec
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#actionToPerformWithSelector:arguments:->SpecInt...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	#(#model #spec #arrayToInterpret #index)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SpecInterpreter
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Spec-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		bindings: 	a MorphicAdapterBindings


TextModel(ComposableModel)>>private_buildWithSpec:
	Receiver: a TextModel
	Arguments and temporary variables: 
		aSpec: 	#defaultSpec
		widget: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicTextAdapter)
		focusOrder: 	nil
		owner: 	an EyeDebuggerContextInspector
		window: 	a NewValueHolder[ nil ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Text' ]
		helpHolder: 	a NewValueHolder[ nil ]
		borderWidth: 	a NewValueHolder[ 0 ]
		borderColor: 	a NewValueHolder[ Color transparent ]
		enabledHolder: 	a NewValueHolder[ true ]
		dragEnabled: 	a NewValueHolder[ false ]
		dropEnabled: 	a NewValueHolder[ false ]
		dragTransformationBlock: 	a NewValueHolder[ [ :item :source | item ] ]
		wantDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source | self dropEnabl...etc...
		acceptDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source |  ] ]
		transferBlock: 	a NewValueHolder[ [ :passenger :source | super transferFor: pass...etc...
		color: 	a NewValueHolder[ Color white ]
		aboutToStyleHolder: 	a NewValueHolder[ [ false ] ]
		behaviorHolder: 	a NewValueHolder[ nil ]
		textHolder: 	a CollectionValueHolder[ 'ByteSymbol(Symbol)>>=' ]
		actionToPerformHolder: 	a NewValueHolder[ [ :text |  ] ]
		readSelectionHolder: 	a NewValueHolder[ [ selection value ] ]
		actionPerformedHolder: 	a CollectionValueHolder[ '' ]
		isCodeCompletionAllowedHolder: 	a NewValueHolder[ true ]
		doItContext: 	a NewValueHolder[ ByteSymbol(Symbol)>>= ]
		doItReceiver: 	a NewValueHolder[ ByteSymbol(Symbol)>>= ]
		hasUnacceptedEdits: 	a NewValueHolder[ false ]
		selection: 	a CollectionValueHolder[ (1 to: 0) ]
		scrollValue: 	a NewValueHolder[ (0@0) ]
		menuHolder: 	a NewValueHolder[ [ :menu :shifted | 
shifted
	ifTrue: [ SmalltalkE...etc...
		autoAccept: 	a NewValueHolder[ false ]
		wantsVisualFeedback: 	a NewValueHolder[ true ]
		askBeforeDiscardingEdits: 	a NewValueHolder[ true ]


TextModel(ComposableModel)>>private_buildWithSpec
	Receiver: a TextModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicTextAdapter)
		focusOrder: 	nil
		owner: 	an EyeDebuggerContextInspector
		window: 	a NewValueHolder[ nil ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Text' ]
		helpHolder: 	a NewValueHolder[ nil ]
		borderWidth: 	a NewValueHolder[ 0 ]
		borderColor: 	a NewValueHolder[ Color transparent ]
		enabledHolder: 	a NewValueHolder[ true ]
		dragEnabled: 	a NewValueHolder[ false ]
		dropEnabled: 	a NewValueHolder[ false ]
		dragTransformationBlock: 	a NewValueHolder[ [ :item :source | item ] ]
		wantDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source | self dropEnabl...etc...
		acceptDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source |  ] ]
		transferBlock: 	a NewValueHolder[ [ :passenger :source | super transferFor: pass...etc...
		color: 	a NewValueHolder[ Color white ]
		aboutToStyleHolder: 	a NewValueHolder[ [ false ] ]
		behaviorHolder: 	a NewValueHolder[ nil ]
		textHolder: 	a CollectionValueHolder[ 'ByteSymbol(Symbol)>>=' ]
		actionToPerformHolder: 	a NewValueHolder[ [ :text |  ] ]
		readSelectionHolder: 	a NewValueHolder[ [ selection value ] ]
		actionPerformedHolder: 	a CollectionValueHolder[ '' ]
		isCodeCompletionAllowedHolder: 	a NewValueHolder[ true ]
		doItContext: 	a NewValueHolder[ ByteSymbol(Symbol)>>= ]
		doItReceiver: 	a NewValueHolder[ ByteSymbol(Symbol)>>= ]
		hasUnacceptedEdits: 	a NewValueHolder[ false ]
		selection: 	a CollectionValueHolder[ (1 to: 0) ]
		scrollValue: 	a NewValueHolder[ (0@0) ]
		menuHolder: 	a NewValueHolder[ [ :menu :shifted | 
shifted
	ifTrue: [ SmalltalkE...etc...
		autoAccept: 	a NewValueHolder[ false ]
		wantsVisualFeedback: 	a NewValueHolder[ true ]
		askBeforeDiscardingEdits: 	a NewValueHolder[ true ]


SpecInterpreter>>returnInterpretationOf:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		newInstance: 	a TextModel
		result: 	a TextModel
		return: 	nil
	Receiver's instance variables: 
		model: 	an EyeDebuggerContextInspector
		spec: 	a SpecWrapper
		arrayToInterpret: 	#(#model #description)
		index: 	3


SpecInterpreter>>interpretASpec:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	#(#model #description)
		aSelector: 	#debuggerSpec
		newInstance: 	a TextModel
	Receiver's instance variables: 
		model: 	an EyeDebuggerContextInspector
		spec: 	a SpecWrapper
		arrayToInterpret: 	#(#model #description)
		index: 	3


SpecInterpreter>>interpretASpec:model:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	#(#model #description)
		aModel: 	an EyeDebuggerContextInspector
		aSelector: 	#debuggerSpec
	Receiver's instance variables: 
		model: 	an EyeDebuggerContextInspector
		spec: 	a SpecWrapper
		arrayToInterpret: 	#(#model #description)
		index: 	3


SpecInterpreter class>>private_interpretASpec:model:selector:
	Receiver: SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	#(#model #description)
		aModel: 	an EyeDebuggerContextInspector
		aSelector: 	#debuggerSpec
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#actionToPerformWithSelector:arguments:->SpecInt...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	#(#model #spec #arrayToInterpret #index)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SpecInterpreter
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Spec-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		bindings: 	a MorphicAdapterBindings


SpecInterpreter>>computeSpecFrom:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aSymbol: 	#(#model #description)
		aSelector: 	#debuggerSpec
		instance: 	nil
	Receiver's instance variables: 
		model: 	an EyeDebuggerContextInspector
		spec: 	nil
		arrayToInterpret: 	#(#(#model #description) #layout: #(#SpecLayoutFrame #leftFra...etc...
		index: 	nil


SpecInterpreter>>retrieveSpecFrom:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	#(#(#model #description) #layout: #(#SpecLayoutFrame #leftFraction:...etc...
		aSelector: 	#debuggerSpec
	Receiver's instance variables: 
		model: 	an EyeDebuggerContextInspector
		spec: 	nil
		arrayToInterpret: 	#(#(#model #description) #layout: #(#SpecLayoutFrame #leftFra...etc...
		index: 	nil


SpecInterpreter>>interpretASpec:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	#(#(#model #description) #layout: #(#SpecLayoutFrame #leftFraction:...etc...
		aSelector: 	#debuggerSpec
	Receiver's instance variables: 
		model: 	an EyeDebuggerContextInspector
		spec: 	nil
		arrayToInterpret: 	#(#(#model #description) #layout: #(#SpecLayoutFrame #leftFra...etc...
		index: 	nil


SpecInterpreter>>interpretASpec:model:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	#(#(#model #description) #layout: #(#SpecLayoutFrame #leftFraction:...etc...
		aModel: 	an EyeDebuggerContextInspector
		aSelector: 	#debuggerSpec
	Receiver's instance variables: 
		model: 	an EyeDebuggerContextInspector
		spec: 	nil
		arrayToInterpret: 	#(#(#model #description) #layout: #(#SpecLayoutFrame #leftFra...etc...
		index: 	nil


SpecInterpreter class>>private_interpretASpec:model:selector:
	Receiver: SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	#(#(#model #description) #layout: #(#SpecLayoutFrame #leftFraction:...etc...
		aModel: 	an EyeDebuggerContextInspector
		aSelector: 	#debuggerSpec
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#actionToPerformWithSelector:arguments:->SpecInt...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	#(#model #spec #arrayToInterpret #index)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SpecInterpreter
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Spec-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		bindings: 	a MorphicAdapterBindings


[ :each | self class private_interpretASpec: each model: model selector: spec selector ] in SpecInterpreter>>performNextSelectorAndIncrementIndex
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		args: 	#(#(#(#model #description) #layout: #(#SpecLayoutFrame #leftFraction: 0.3...etc...
		numArgs: 	1
		selector: 	#add:
		each: 	#(#(#model #description) #layout: #(#SpecLayoutFrame #leftFraction: 0.33 ...etc...
	Receiver's instance variables: 
		model: 	an EyeDebuggerContextInspector
		spec: 	a SpecWrapper
		arrayToInterpret: 	#(#ContainerModel #add: #(#(#model #list) #layout: #(#SpecLay...etc...
		index: 	4


Array(SequenceableCollection)>>collect:
	Receiver: #(#(#(#model #description) #layout: #(#SpecLayoutFrame #leftFraction: 0.33 #topFraction: 0...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self class private_interpretASpec: each model: model selector...etc...
		newCollection: 	#(nil)
		index: 	1
	Receiver's instance variables: 
#(#(#(#model #description) #layout: #(#SpecLayoutFrame #leftFraction: 0.33 #topFraction: 0...etc...

SpecInterpreter>>performNextSelectorAndIncrementIndex
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		args: 	#(#(#(#model #description) #layout: #(#SpecLayoutFrame #leftFraction: 0.3...etc...
		numArgs: 	1
		selector: 	#add:
	Receiver's instance variables: 
		model: 	an EyeDebuggerContextInspector
		spec: 	a SpecWrapper
		arrayToInterpret: 	#(#ContainerModel #add: #(#(#model #list) #layout: #(#SpecLay...etc...
		index: 	4


SpecInterpreter>>interpretASpec:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	a SpecLayout
		aSelector: 	#debuggerSpec
		newInstance: 	nil
	Receiver's instance variables: 
		model: 	an EyeDebuggerContextInspector
		spec: 	a SpecWrapper
		arrayToInterpret: 	#(#ContainerModel #add: #(#(#model #list) #layout: #(#SpecLay...etc...
		index: 	4


SpecInterpreter>>interpretASpec:model:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	a SpecLayout
		aModel: 	an EyeDebuggerContextInspector
		aSelector: 	#debuggerSpec
	Receiver's instance variables: 
		model: 	an EyeDebuggerContextInspector
		spec: 	a SpecWrapper
		arrayToInterpret: 	#(#ContainerModel #add: #(#(#model #list) #layout: #(#SpecLay...etc...
		index: 	4


SpecInterpreter class>>private_interpretASpec:model:selector:
	Receiver: SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	a SpecLayout
		aModel: 	an EyeDebuggerContextInspector
		aSelector: 	#debuggerSpec
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#actionToPerformWithSelector:arguments:->SpecInt...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	#(#model #spec #arrayToInterpret #index)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SpecInterpreter
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Spec-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		bindings: 	a MorphicAdapterBindings


SpecInterpreter class>>private_buildWidgetFor:withSpec:
	Receiver: SpecInterpreter
	Arguments and temporary variables: 
		aComposableModel: 	an EyeDebuggerContextInspector
		aSymbol: 	#debuggerSpec
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#actionToPerformWithSelector:arguments:->SpecInt...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	#(#model #spec #arrayToInterpret #index)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SpecInterpreter
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Spec-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		bindings: 	a MorphicAdapterBindings


EyeDebuggerContextInspector(ComposableModel)>>private_buildWithSpec:
	Receiver: an EyeDebuggerContextInspector
	Arguments and temporary variables: 
		aSpec: 	#debuggerSpec
		widget: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter)
		focusOrder: 	nil
		owner: 	a SpecDebugger
		window: 	a NewValueHolder[ nil ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Untitled window' ]
		object: 	a NewValueHolder[ ByteSymbol(Symbol)>>= ]
		customMenuActions: 	nil
		list: 	a NewListModel
		text: 	a TextModel
		description: 	a TextModel



--- The full stack ---
PluggableTextMorph(BorderedMorph)>>borderInitialize
PluggableTextMorph(BorderedMorph)>>initialize
PluggableTextMorph(MorphicModel)>>initialize
PluggableTextMorph(ScrollPane)>>initialize
PluggableTextMorph>>initialize
PluggableTextMorph class(Behavior)>>new
SpecInterpreter>>convertSymbolOfClassToInstance:
SpecInterpreter>>computeSpecFrom:selector:
SpecInterpreter>>retrieveSpecFrom:selector:
SpecInterpreter>>interpretASpec:selector:
SpecInterpreter>>interpretASpec:model:selector:
SpecInterpreter class>>private_interpretASpec:model:selector:
MorphicTextAdapter(AbstractAdapter)>>buildWidget
MorphicTextAdapter(AbstractAdapter)>>adapt:
SpecInterpreter>>actionToPerformWithSelector:arguments:
SpecInterpreter>>performNextSelectorAndIncrementIndex
SpecInterpreter>>interpretASpec:selector:
SpecInterpreter>>interpretASpec:model:selector:
SpecInterpreter class>>private_interpretASpec:model:selector:
SpecInterpreter class>>private_buildWidgetFor:withSpec:
TextModel(ComposableModel)>>private_buildWithSpec:
TextModel(ComposableModel)>>private_buildWithSpec
SpecInterpreter>>returnInterpretationOf:
SpecInterpreter>>interpretASpec:selector:
SpecInterpreter>>interpretASpec:model:selector:
SpecInterpreter class>>private_interpretASpec:model:selector:
SpecInterpreter>>computeSpecFrom:selector:
SpecInterpreter>>retrieveSpecFrom:selector:
SpecInterpreter>>interpretASpec:selector:
SpecInterpreter>>interpretASpec:model:selector:
SpecInterpreter class>>private_interpretASpec:model:selector:
[ :each | self class private_interpretASpec: each model: model selector: spec selector ] in SpecInterpreter>>performNextSelectorAndIncrementIndex
Array(SequenceableCollection)>>collect:
SpecInterpreter>>performNextSelectorAndIncrementIndex
SpecInterpreter>>interpretASpec:selector:
SpecInterpreter>>interpretASpec:model:selector:
SpecInterpreter class>>private_interpretASpec:model:selector:
SpecInterpreter class>>private_buildWidgetFor:withSpec:
EyeDebuggerContextInspector(ComposableModel)>>private_buildWithSpec:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
EyeDebuggerContextInspector(ComposableModel)>>private_buildWithSpec
SpecInterpreter>>returnInterpretationOf:
SpecInterpreter>>interpretASpec:selector:
SpecInterpreter>>interpretASpec:model:selector:
SpecInterpreter class>>private_interpretASpec:model:selector:
SpecInterpreter>>computeSpecFrom:selector:
SpecInterpreter>>retrieveSpecFrom:selector:
SpecInterpreter>>interpretASpec:selector:
SpecInterpreter>>interpretASpec:model:selector:
SpecInterpreter class>>private_interpretASpec:model:selector:
[ :each | self class private_interpretASpec: each model: model selector: spec selector ] in SpecInterpreter>>performNextSelectorAndIncrementIndex
Array(SequenceableCollection)>>collect:
SpecInterpreter>>performNextSelectorAndIncrementIndex
SpecInterpreter>>interpretASpec:selector:
SpecInterpreter>>interpretASpec:model:selector:
SpecInterpreter class>>private_interpretASpec:model:selector:
SpecInterpreter>>computeSpecFrom:selector:
SpecInterpreter>>retrieveSpecFrom:selector:
SpecInterpreter>>interpretASpec:selector:
SpecInterpreter>>interpretASpec:model:selector:
SpecInterpreter class>>private_interpretASpec:model:selector:
[ :each | self class private_interpretASpec: each model: model selector: spec selector ] in SpecInterpreter>>performNextSelectorAndIncrementIndex
Array(SequenceableCollection)>>collect:
SpecInterpreter>>performNextSelectorAndIncrementIndex
SpecInterpreter>>interpretASpec:selector:
SpecInterpreter>>interpretASpec:model:selector:
SpecInterpreter class>>private_interpretASpec:model:selector:
[ result := self private_interpretASpec: aPresenter model: aModel selector: aSelector ] in SpecInterpreter class>>interpretASpec:model:selector:
BlockClosure>>ensure:
SpecInterpreter class>>interpretASpec:model:selector:
SpecInterpreter class>>interpretASpec:model:
SpecDebugger(ComposableModel)>>buildWithSpecLayout:
MorphicWindowAdapter>>addModelIn:withSpecLayout:
MorphicWindowAdapter(AbstractAdapter)>>update:with:
[ :aDependent | aDependent update: anAspect with: anObject ] in WindowModel(Object)>>changed:with:
DependentsArray>>do:
WindowModel(Object)>>changed:with:
WindowModel>>addModelIn:withSpecLayout:
WindowModel>>buildWithSpecLayout:
WindowModel>>openWithSpecLayout:
SpecDebugger(ComposableModel)>>openWithSpecLayout:
SpecDebugger(ComposableModel)>>openWithSpec:
SpecDebugger(ComposableModel)>>openWithSpec
SpecDebugger>>openFullNoSuspendLabel:
[ 
debugger process: process controller: nil context: context.	"schedule debugger in deferred UI message to address
			redraw problems after opening a debugger e.g. from
			the testrunner."	"self defer: ["
bool
	ifTrue: [ debugger openFullNoSuspendLabel: title ]
	ifFalse: [ debugger openNotifierContents: contentsStringOrNil label: title ].
debugger errorWasInUIProcess: errorWasInUIProcess ] in [ 
[ 
debugger process: process controller: nil context: context.	"schedule debugger in deferred UI message to address
			redraw problems after opening a debugger e.g. from
			the testrunner."	"self defer: ["
bool
	ifTrue: [ debugger openFullNoSuspendLabel: title ]
	ifFalse: [ debugger openNotifierContents: contentsStringOrNil label: title ].
debugger errorWasInUIProcess: errorWasInUIProcess ]
	on: Error
	do: [ :ex | 
		Smalltalk tools debugger
			primitiveError:
				'Orginal error: ' , title asString
					,
						'.
	Smalltalk tools debugger error: '
					,
						([ ex description ]
							on: Error
							do: [ 'a ' , ex class printString ]) , ':' ] ] in MorphicUIManager>>openDebuggerOn:context:label:contents:fullView:
BlockClosure>>on:do:
[ 
[ 
debugger process: process controller: nil context: context.	"schedule debugger in deferred UI message to address
			redraw problems after opening a debugger e.g. from
			the testrunner."	"self defer: ["
bool
	ifTrue: [ debugger openFullNoSuspendLabel: title ]
	ifFalse: [ debugger openNotifierContents: contentsStringOrNil label: title ].
debugger errorWasInUIProcess: errorWasInUIProcess ]
	on: Error
	do: [ :ex | 
		Smalltalk tools debugger
			primitiveError:
				'Orginal error: ' , title asString
					,
						'.
	Smalltalk tools debugger error: '
					,
						([ ex description ]
							on: Error
							do: [ 'a ' , ex class printString ]) , ':' ] ] in MorphicUIManager>>openDebuggerOn:context:label:contents:fullView:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
3 March 2015 5:50:04.407616 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

Float(Magnitude)>>max:
	Receiver: 25.0
	Arguments and temporary variables: 
		aMagnitude: 	0
	Receiver's instance variables: 
25.0

Rectangle class>>origin:extent:
	Receiver: Rectangle
	Arguments and temporary variables: 
		originPoint: 	(0.0@30.0)
		extentPoint: 	(25.0@10.0)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(size 106)
		format: 	20614
		layout: 	a FixedLayout
		instanceVariables: 	#('origin' 'corner')
		organization: 	a ClassOrganization
		subclasses: 	{CharacterBlock}
		name: 	#Rectangle
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-BasicObjects'
		traitComposition: 	{}
		localSelectors: 	nil


Margin>>insetRectangle:
	Receiver: MorphMargin top: 0 left: 0 bottom: 0 right: 0
	Arguments and temporary variables: 
		aRectangle: 	(0.0@30.0) corner: (25.0@40.0)
		l: 	0.0
		r: 	25.0
		t: 	30.0
		b: 	40.0
	Receiver's instance variables: 
		right: 	0
		bottom: 	0
		left: 	0
		top: 	0


Rectangle>>insetBy:
	Receiver: (0.0@30.0) corner: (25.0@40.0)
	Arguments and temporary variables: 
		delta: 	0
	Receiver's instance variables: 
		origin: 	(0.0@30.0)
		corner: 	(25.0@40.0)


PanelMorph(Morph)>>innerBounds
	Receiver: a PanelMorph(862191616)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0.0@30.0) corner: (25.0@40.0)
		owner: 	a PanelMorph(749993984)
		submorphs: 	an Array(a PluggableTextMorph(883163136) a ProportionalSplitterMorph...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (908853248) [sticky]  [other:  (kmDispatcher -> a K...etc...
		borderWidth: 	0
		borderColor: 	Color black


PanelMorph(Morph)>>clippingBounds
	Receiver: a PanelMorph(862191616)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0.0@30.0) corner: (25.0@40.0)
		owner: 	a PanelMorph(749993984)
		submorphs: 	an Array(a PluggableTextMorph(883163136) a ProportionalSplitterMorph...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (908853248) [sticky]  [other:  (kmDispatcher -> a K...etc...
		borderWidth: 	0
		borderColor: 	Color black


PanelMorph(Morph)>>invalidRect:from:
	Receiver: a PanelMorph(862191616)
	Arguments and temporary variables: 
		aRectangle: 	(35@61) corner: (48@74)
		aMorph: 	a NewList(394002432)
		damageRect: 	(35@61) corner: (48@74)
	Receiver's instance variables: 
		bounds: 	(0.0@30.0) corner: (25.0@40.0)
		owner: 	a PanelMorph(749993984)
		submorphs: 	an Array(a PluggableTextMorph(883163136) a ProportionalSplitterMorph...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (908853248) [sticky]  [other:  (kmDispatcher -> a K...etc...
		borderWidth: 	0
		borderColor: 	Color black


NewList(Morph)>>invalidRect:from:
	Receiver: a NewList(394002432)
	Arguments and temporary variables: 
		aRectangle: 	(35@61) corner: (48@74)
		aMorph: 	a ScrollBar(445644800)
		damageRect: 	(35@61) corner: (48@74)
	Receiver's instance variables: 
		bounds: 	(0.0@30.0) corner: (33.0@59.0)
		owner: 	a PanelMorph(862191616)
		submorphs: 	an Array(a ScrollBar(211025920) a ScrollBar(445644800) a TransformMo...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (3407872) [other:  (dragEnabled -> false) (dropEnab...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a NewValueHolder[ a MorphicNewListAdapter ]
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(445644800)
		scroller: 	a TransformMorph(1026031616)
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(211025920)
		listCache: 	a CollectionValueHolder[ an OrderedCollection('self'->a PluggableTex...etc...
		listSize: 	a NewValueHolder[ 40 ]
		isInitialized: 	a NewValueHolder[ true ]
		isMultipleSelection: 	a NewValueHolder[ false ]
		selectedIndex: 	a NewValueHolder[ 1 ]
		selectedIndexes: 	a DictionaryValueHolder[ a Dictionary(1->true ) ]
		renderer: 	a NewValueHolder[ a NewListRenderer(864026624) ]
		headerHeight: 	a NewValueHolder[ 0 ]
		headerTitle: 	a CollectionValueHolder[ nil ]
		clickOnHeader: 	a NewValueHolder[ nil ]
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		secondSelection: 	a NewValueHolder[ 0 ]
		displayListCache: 	a CollectionValueHolder[ #(nil nil nil nil nil nil nil nil ni...etc...
		deSelectOnReclick: 	a NewValueHolder[ false ]
		runningProcesses: 	a CollectionValueHolder[ #(nil nil nil nil nil nil nil nil ni...etc...
		selectionWithKeys: 	a NewValueHolder[ true ]
		drawColor: 	a NewValueHolder[ Color white ]
		selectedItem: 	a NewValueHolder[ 'self'->a PluggableTextMorph(943718400) ]
		selectedItems: 	a CollectionValueHolder[ an Array('self'->a PluggableTextMorph(9...etc...
		unselectOnChange: 	a NewValueHolder[ false ]
		iconCache: 	a DictionaryValueHolder[ a Dictionary() ]
		iconMaxSize: 	a NewValueHolder[ (0@0) ]
		enabled: 	a NewValueHolder[ true ]
		allowToSelect: 	a NewValueHolder[ true ]


ScrollBar(Morph)>>invalidRect:from:
	Receiver: a ScrollBar(445644800)
	Arguments and temporary variables: 
		aRectangle: 	(35@61) corner: (48@74)
		aMorph: 	a BorderedMorph(368574464)
		damageRect: 	(35@61) corner: (48@74)
	Receiver's instance variables: 
		bounds: 	(18.0@32.0) corner: (48.0@74.0)
		owner: 	a NewList(394002432)
		submorphs: 	an Array(a BorderedMorph(869269504) a Morph(567803904) a BorderedMor...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.96 g: 0.96 b: 0.96 alpha: 1.0)
		extension: 	a MorphExtension (682885120) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a NewList(394002432)
		open: 	false
		accessor: 	#vScrollBarValue
		slider: 	a BorderedMorph(869269504)
		value: 	0.0
		setValueSelector: 	nil
		sliderShadow: 	a BorderedMorph(892862464)
		sliderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		descending: 	false
		upButton: 	a BorderedMorph(732430336)
		downButton: 	a BorderedMorph(368574464)
		pagingArea: 	a Morph(567803904)
		scrollDelta: 	0.015625
		pageDelta: 	0.003125
		interval: 	0.018461538461538463
		timeOfMouseDown: 	nil
		timeOfLastScroll: 	nil
		nextPageDirection: 	nil
		currentScrollDelay: 	nil


BorderedMorph(Morph)>>invalidRect:from:
	Receiver: a BorderedMorph(368574464)
	Arguments and temporary variables: 
		aRectangle: 	(35@61) corner: (48@74)
		aMorph: 	a BorderedMorph(368574464)
		damageRect: 	(35@61) corner: (48@74)
	Receiver's instance variables: 
		bounds: 	(35.0@61.0) corner: (48.0@74.0)
		owner: 	a ScrollBar(445644800)
		submorphs: 	an Array(an ImageMorph(478937088))
		fullBounds: 	(35@61) corner: (48@74)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (423886848) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray


BorderedMorph(Morph)>>invalidRect:
	Receiver: a BorderedMorph(368574464)
	Arguments and temporary variables: 
		damageRect: 	(35@61) corner: (48@74)
	Receiver's instance variables: 
		bounds: 	(35.0@61.0) corner: (48.0@74.0)
		owner: 	a ScrollBar(445644800)
		submorphs: 	an Array(an ImageMorph(478937088))
		fullBounds: 	(35@61) corner: (48@74)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (423886848) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray


BorderedMorph(Morph)>>changed
	Receiver: a BorderedMorph(368574464)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(35.0@61.0) corner: (48.0@74.0)
		owner: 	a ScrollBar(445644800)
		submorphs: 	an Array(an ImageMorph(478937088))
		fullBounds: 	(35@61) corner: (48@74)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (423886848) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray


BorderedMorph>>borderStyle:
	Receiver: a BorderedMorph(368574464)
	Arguments and temporary variables: 
		aBorderStyle: 	(SimpleBorder width: 0 color: Color transparent)
	Receiver's instance variables: 
		bounds: 	(35.0@61.0) corner: (48.0@74.0)
		owner: 	a ScrollBar(445644800)
		submorphs: 	an Array(an ImageMorph(478937088))
		fullBounds: 	(35@61) corner: (48@74)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (423886848) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray


ScrollBar>>adoptGradientColor:
	Receiver: a ScrollBar(445644800)
	Arguments and temporary variables: 
		aColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.823000000000000...etc...
		c: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001 alp...etc...
		fs: 	a SolidFillStyle((Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0))
		bfs: 	a SolidFillStyle((Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0))
		bs: 	(SimpleBorder width: 0 color: Color transparent)
		bbs: 	(SimpleBorder width: 0 color: Color transparent)
	Receiver's instance variables: 
		bounds: 	(18.0@32.0) corner: (48.0@74.0)
		owner: 	a NewList(394002432)
		submorphs: 	an Array(a BorderedMorph(869269504) a Morph(567803904) a BorderedMor...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.96 g: 0.96 b: 0.96 alpha: 1.0)
		extension: 	a MorphExtension (682885120) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a NewList(394002432)
		open: 	false
		accessor: 	#vScrollBarValue
		slider: 	a BorderedMorph(869269504)
		value: 	0.0
		setValueSelector: 	nil
		sliderShadow: 	a BorderedMorph(892862464)
		sliderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		descending: 	false
		upButton: 	a BorderedMorph(732430336)
		downButton: 	a BorderedMorph(368574464)
		pagingArea: 	a Morph(567803904)
		scrollDelta: 	0.015625
		pageDelta: 	0.003125
		interval: 	0.018461538461538463
		timeOfMouseDown: 	nil
		timeOfLastScroll: 	nil
		nextPageDirection: 	nil
		currentScrollDelay: 	nil


ScrollBar>>sliderColor:
	Receiver: a ScrollBar(445644800)
	Arguments and temporary variables: 
		aColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.823000000000000...etc...
		buttonColor: 	(Color r: 0.743 g: 0.743 b: 0.743 alpha: 1.0)
	Receiver's instance variables: 
		bounds: 	(18.0@32.0) corner: (48.0@74.0)
		owner: 	a NewList(394002432)
		submorphs: 	an Array(a BorderedMorph(869269504) a Morph(567803904) a BorderedMor...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.96 g: 0.96 b: 0.96 alpha: 1.0)
		extension: 	a MorphExtension (682885120) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a NewList(394002432)
		open: 	false
		accessor: 	#vScrollBarValue
		slider: 	a BorderedMorph(869269504)
		value: 	0.0
		setValueSelector: 	nil
		sliderShadow: 	a BorderedMorph(892862464)
		sliderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		descending: 	false
		upButton: 	a BorderedMorph(732430336)
		downButton: 	a BorderedMorph(368574464)
		pagingArea: 	a Morph(567803904)
		scrollDelta: 	0.015625
		pageDelta: 	0.003125
		interval: 	0.018461538461538463
		timeOfMouseDown: 	nil
		timeOfLastScroll: 	nil
		nextPageDirection: 	nil
		currentScrollDelay: 	nil


ScrollBar>>initializeSlider
	Receiver: a ScrollBar(445644800)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(18.0@32.0) corner: (48.0@74.0)
		owner: 	a NewList(394002432)
		submorphs: 	an Array(a BorderedMorph(869269504) a Morph(567803904) a BorderedMor...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.96 g: 0.96 b: 0.96 alpha: 1.0)
		extension: 	a MorphExtension (682885120) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a NewList(394002432)
		open: 	false
		accessor: 	#vScrollBarValue
		slider: 	a BorderedMorph(869269504)
		value: 	0.0
		setValueSelector: 	nil
		sliderShadow: 	a BorderedMorph(892862464)
		sliderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		descending: 	false
		upButton: 	a BorderedMorph(732430336)
		downButton: 	a BorderedMorph(368574464)
		pagingArea: 	a Morph(567803904)
		scrollDelta: 	0.015625
		pageDelta: 	0.003125
		interval: 	0.018461538461538463
		timeOfMouseDown: 	nil
		timeOfLastScroll: 	nil
		nextPageDirection: 	nil
		currentScrollDelay: 	nil


ScrollBar(Slider)>>extent:
	Receiver: a ScrollBar(445644800)
	Arguments and temporary variables: 
		newExtent: 	(13.0@42)
	Receiver's instance variables: 
		bounds: 	(18.0@32.0) corner: (48.0@74.0)
		owner: 	a NewList(394002432)
		submorphs: 	an Array(a BorderedMorph(869269504) a Morph(567803904) a BorderedMor...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.96 g: 0.96 b: 0.96 alpha: 1.0)
		extension: 	a MorphExtension (682885120) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a NewList(394002432)
		open: 	false
		accessor: 	#vScrollBarValue
		slider: 	a BorderedMorph(869269504)
		value: 	0.0
		setValueSelector: 	nil
		sliderShadow: 	a BorderedMorph(892862464)
		sliderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		descending: 	false
		upButton: 	a BorderedMorph(732430336)
		downButton: 	a BorderedMorph(368574464)
		pagingArea: 	a Morph(567803904)
		scrollDelta: 	0.015625
		pageDelta: 	0.003125
		interval: 	0.018461538461538463
		timeOfMouseDown: 	nil
		timeOfLastScroll: 	nil
		nextPageDirection: 	nil
		currentScrollDelay: 	nil


ScrollBar>>extent:
	Receiver: a ScrollBar(445644800)
	Arguments and temporary variables: 
		p: 	(13.0@14.0)
	Receiver's instance variables: 
		bounds: 	(18.0@32.0) corner: (48.0@74.0)
		owner: 	a NewList(394002432)
		submorphs: 	an Array(a BorderedMorph(869269504) a Morph(567803904) a BorderedMor...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.96 g: 0.96 b: 0.96 alpha: 1.0)
		extension: 	a MorphExtension (682885120) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a NewList(394002432)
		open: 	false
		accessor: 	#vScrollBarValue
		slider: 	a BorderedMorph(869269504)
		value: 	0.0
		setValueSelector: 	nil
		sliderShadow: 	a BorderedMorph(892862464)
		sliderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		descending: 	false
		upButton: 	a BorderedMorph(732430336)
		downButton: 	a BorderedMorph(368574464)
		pagingArea: 	a Morph(567803904)
		scrollDelta: 	0.015625
		pageDelta: 	0.003125
		interval: 	0.018461538461538463
		timeOfMouseDown: 	nil
		timeOfLastScroll: 	nil
		nextPageDirection: 	nil
		currentScrollDelay: 	nil


ScrollBar(Morph)>>bounds:
	Receiver: a ScrollBar(445644800)
	Arguments and temporary variables: 
		newBounds: 	(19.0@31.0) corner: (32.0@45.0)
		oldExtent: 	(42.0@12.0)
		newExtent: 	(13.0@14.0)
	Receiver's instance variables: 
		bounds: 	(18.0@32.0) corner: (48.0@74.0)
		owner: 	a NewList(394002432)
		submorphs: 	an Array(a BorderedMorph(869269504) a Morph(567803904) a BorderedMor...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.96 g: 0.96 b: 0.96 alpha: 1.0)
		extension: 	a MorphExtension (682885120) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a NewList(394002432)
		open: 	false
		accessor: 	#vScrollBarValue
		slider: 	a BorderedMorph(869269504)
		value: 	0.0
		setValueSelector: 	nil
		sliderShadow: 	a BorderedMorph(892862464)
		sliderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		descending: 	false
		upButton: 	a BorderedMorph(732430336)
		downButton: 	a BorderedMorph(368574464)
		pagingArea: 	a Morph(567803904)
		scrollDelta: 	0.015625
		pageDelta: 	0.003125
		interval: 	0.018461538461538463
		timeOfMouseDown: 	nil
		timeOfLastScroll: 	nil
		nextPageDirection: 	nil
		currentScrollDelay: 	nil


NewList(ScrollPane)>>vResizeScrollBar
	Receiver: a NewList(394002432)
	Arguments and temporary variables: 
		w: 	13
		topLeft: 	(19.0@31.0)
	Receiver's instance variables: 
		bounds: 	(0.0@30.0) corner: (33.0@59.0)
		owner: 	a PanelMorph(862191616)
		submorphs: 	an Array(a ScrollBar(211025920) a ScrollBar(445644800) a TransformMo...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (3407872) [other:  (dragEnabled -> false) (dropEnab...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a NewValueHolder[ a MorphicNewListAdapter ]
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(445644800)
		scroller: 	a TransformMorph(1026031616)
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(211025920)
		listCache: 	a CollectionValueHolder[ an OrderedCollection('self'->a PluggableTex...etc...
		listSize: 	a NewValueHolder[ 40 ]
		isInitialized: 	a NewValueHolder[ true ]
		isMultipleSelection: 	a NewValueHolder[ false ]
		selectedIndex: 	a NewValueHolder[ 1 ]
		selectedIndexes: 	a DictionaryValueHolder[ a Dictionary(1->true ) ]
		renderer: 	a NewValueHolder[ a NewListRenderer(864026624) ]
		headerHeight: 	a NewValueHolder[ 0 ]
		headerTitle: 	a CollectionValueHolder[ nil ]
		clickOnHeader: 	a NewValueHolder[ nil ]
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		secondSelection: 	a NewValueHolder[ 0 ]
		displayListCache: 	a CollectionValueHolder[ #(nil nil nil nil nil nil nil nil ni...etc...
		deSelectOnReclick: 	a NewValueHolder[ false ]
		runningProcesses: 	a CollectionValueHolder[ #(nil nil nil nil nil nil nil nil ni...etc...
		selectionWithKeys: 	a NewValueHolder[ true ]
		drawColor: 	a NewValueHolder[ Color white ]
		selectedItem: 	a NewValueHolder[ 'self'->a PluggableTextMorph(943718400) ]
		selectedItems: 	a CollectionValueHolder[ an Array('self'->a PluggableTextMorph(9...etc...
		unselectOnChange: 	a NewValueHolder[ false ]
		iconCache: 	a DictionaryValueHolder[ a Dictionary() ]
		iconMaxSize: 	a NewValueHolder[ (0@0) ]
		enabled: 	a NewValueHolder[ true ]
		allowToSelect: 	a NewValueHolder[ true ]


NewList(ScrollPane)>>resizeScrollBars
	Receiver: a NewList(394002432)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0.0@30.0) corner: (33.0@59.0)
		owner: 	a PanelMorph(862191616)
		submorphs: 	an Array(a ScrollBar(211025920) a ScrollBar(445644800) a TransformMo...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (3407872) [other:  (dragEnabled -> false) (dropEnab...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a NewValueHolder[ a MorphicNewListAdapter ]
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(445644800)
		scroller: 	a TransformMorph(1026031616)
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(211025920)
		listCache: 	a CollectionValueHolder[ an OrderedCollection('self'->a PluggableTex...etc...
		listSize: 	a NewValueHolder[ 40 ]
		isInitialized: 	a NewValueHolder[ true ]
		isMultipleSelection: 	a NewValueHolder[ false ]
		selectedIndex: 	a NewValueHolder[ 1 ]
		selectedIndexes: 	a DictionaryValueHolder[ a Dictionary(1->true ) ]
		renderer: 	a NewValueHolder[ a NewListRenderer(864026624) ]
		headerHeight: 	a NewValueHolder[ 0 ]
		headerTitle: 	a CollectionValueHolder[ nil ]
		clickOnHeader: 	a NewValueHolder[ nil ]
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		secondSelection: 	a NewValueHolder[ 0 ]
		displayListCache: 	a CollectionValueHolder[ #(nil nil nil nil nil nil nil nil ni...etc...
		deSelectOnReclick: 	a NewValueHolder[ false ]
		runningProcesses: 	a CollectionValueHolder[ #(nil nil nil nil nil nil nil nil ni...etc...
		selectionWithKeys: 	a NewValueHolder[ true ]
		drawColor: 	a NewValueHolder[ Color white ]
		selectedItem: 	a NewValueHolder[ 'self'->a PluggableTextMorph(943718400) ]
		selectedItems: 	a CollectionValueHolder[ an Array('self'->a PluggableTextMorph(9...etc...
		unselectOnChange: 	a NewValueHolder[ false ]
		iconCache: 	a DictionaryValueHolder[ a Dictionary() ]
		iconMaxSize: 	a NewValueHolder[ (0@0) ]
		enabled: 	a NewValueHolder[ true ]
		allowToSelect: 	a NewValueHolder[ true ]


NewList(ScrollPane)>>hideOrShowScrollBars
	Receiver: a NewList(394002432)
	Arguments and temporary variables: 
		wasHShowing: 	true
		wasVShowing: 	true
	Receiver's instance variables: 
		bounds: 	(0.0@30.0) corner: (33.0@59.0)
		owner: 	a PanelMorph(862191616)
		submorphs: 	an Array(a ScrollBar(211025920) a ScrollBar(445644800) a TransformMo...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (3407872) [other:  (dragEnabled -> false) (dropEnab...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a NewValueHolder[ a MorphicNewListAdapter ]
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(445644800)
		scroller: 	a TransformMorph(1026031616)
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(211025920)
		listCache: 	a CollectionValueHolder[ an OrderedCollection('self'->a PluggableTex...etc...
		listSize: 	a NewValueHolder[ 40 ]
		isInitialized: 	a NewValueHolder[ true ]
		isMultipleSelection: 	a NewValueHolder[ false ]
		selectedIndex: 	a NewValueHolder[ 1 ]
		selectedIndexes: 	a DictionaryValueHolder[ a Dictionary(1->true ) ]
		renderer: 	a NewValueHolder[ a NewListRenderer(864026624) ]
		headerHeight: 	a NewValueHolder[ 0 ]
		headerTitle: 	a CollectionValueHolder[ nil ]
		clickOnHeader: 	a NewValueHolder[ nil ]
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		secondSelection: 	a NewValueHolder[ 0 ]
		displayListCache: 	a CollectionValueHolder[ #(nil nil nil nil nil nil nil nil ni...etc...
		deSelectOnReclick: 	a NewValueHolder[ false ]
		runningProcesses: 	a CollectionValueHolder[ #(nil nil nil nil nil nil nil nil ni...etc...
		selectionWithKeys: 	a NewValueHolder[ true ]
		drawColor: 	a NewValueHolder[ Color white ]
		selectedItem: 	a NewValueHolder[ 'self'->a PluggableTextMorph(943718400) ]
		selectedItems: 	a CollectionValueHolder[ an Array('self'->a PluggableTextMorph(9...etc...
		unselectOnChange: 	a NewValueHolder[ false ]
		iconCache: 	a DictionaryValueHolder[ a Dictionary() ]
		iconMaxSize: 	a NewValueHolder[ (0@0) ]
		enabled: 	a NewValueHolder[ true ]
		allowToSelect: 	a NewValueHolder[ true ]


NewList(ScrollPane)>>setScrollDeltas
	Receiver: a NewList(394002432)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0.0@30.0) corner: (33.0@59.0)
		owner: 	a PanelMorph(862191616)
		submorphs: 	an Array(a ScrollBar(211025920) a ScrollBar(445644800) a TransformMo...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (3407872) [other:  (dragEnabled -> false) (dropEnab...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a NewValueHolder[ a MorphicNewListAdapter ]
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(445644800)
		scroller: 	a TransformMorph(1026031616)
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(211025920)
		listCache: 	a CollectionValueHolder[ an OrderedCollection('self'->a PluggableTex...etc...
		listSize: 	a NewValueHolder[ 40 ]
		isInitialized: 	a NewValueHolder[ true ]
		isMultipleSelection: 	a NewValueHolder[ false ]
		selectedIndex: 	a NewValueHolder[ 1 ]
		selectedIndexes: 	a DictionaryValueHolder[ a Dictionary(1->true ) ]
		renderer: 	a NewValueHolder[ a NewListRenderer(864026624) ]
		headerHeight: 	a NewValueHolder[ 0 ]
		headerTitle: 	a CollectionValueHolder[ nil ]
		clickOnHeader: 	a NewValueHolder[ nil ]
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		secondSelection: 	a NewValueHolder[ 0 ]
		displayListCache: 	a CollectionValueHolder[ #(nil nil nil nil nil nil nil nil ni...etc...
		deSelectOnReclick: 	a NewValueHolder[ false ]
		runningProcesses: 	a CollectionValueHolder[ #(nil nil nil nil nil nil nil nil ni...etc...
		selectionWithKeys: 	a NewValueHolder[ true ]
		drawColor: 	a NewValueHolder[ Color white ]
		selectedItem: 	a NewValueHolder[ 'self'->a PluggableTextMorph(943718400) ]
		selectedItems: 	a CollectionValueHolder[ an Array('self'->a PluggableTextMorph(9...etc...
		unselectOnChange: 	a NewValueHolder[ false ]
		iconCache: 	a DictionaryValueHolder[ a Dictionary() ]
		iconMaxSize: 	a NewValueHolder[ (0@0) ]
		enabled: 	a NewValueHolder[ true ]
		allowToSelect: 	a NewValueHolder[ true ]


NewList(ScrollPane)>>borderStyle:
	Receiver: a NewList(394002432)
	Arguments and temporary variables: 
		aBorderStyle: 	(SimpleBorder width: 1 color: (Color r: 0.8230000000000001 g: 0.8...etc...
	Receiver's instance variables: 
		bounds: 	(0.0@30.0) corner: (33.0@59.0)
		owner: 	a PanelMorph(862191616)
		submorphs: 	an Array(a ScrollBar(211025920) a ScrollBar(445644800) a TransformMo...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (3407872) [other:  (dragEnabled -> false) (dropEnab...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a NewValueHolder[ a MorphicNewListAdapter ]
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(445644800)
		scroller: 	a TransformMorph(1026031616)
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(211025920)
		listCache: 	a CollectionValueHolder[ an OrderedCollection('self'->a PluggableTex...etc...
		listSize: 	a NewValueHolder[ 40 ]
		isInitialized: 	a NewValueHolder[ true ]
		isMultipleSelection: 	a NewValueHolder[ false ]
		selectedIndex: 	a NewValueHolder[ 1 ]
		selectedIndexes: 	a DictionaryValueHolder[ a Dictionary(1->true ) ]
		renderer: 	a NewValueHolder[ a NewListRenderer(864026624) ]
		headerHeight: 	a NewValueHolder[ 0 ]
		headerTitle: 	a CollectionValueHolder[ nil ]
		clickOnHeader: 	a NewValueHolder[ nil ]
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		secondSelection: 	a NewValueHolder[ 0 ]
		displayListCache: 	a CollectionValueHolder[ #(nil nil nil nil nil nil nil nil ni...etc...
		deSelectOnReclick: 	a NewValueHolder[ false ]
		runningProcesses: 	a CollectionValueHolder[ #(nil nil nil nil nil nil nil nil ni...etc...
		selectionWithKeys: 	a NewValueHolder[ true ]
		drawColor: 	a NewValueHolder[ Color white ]
		selectedItem: 	a NewValueHolder[ 'self'->a PluggableTextMorph(943718400) ]
		selectedItems: 	a CollectionValueHolder[ an Array('self'->a PluggableTextMorph(9...etc...
		unselectOnChange: 	a NewValueHolder[ false ]
		iconCache: 	a DictionaryValueHolder[ a Dictionary() ]
		iconMaxSize: 	a NewValueHolder[ (0@0) ]
		enabled: 	a NewValueHolder[ true ]
		allowToSelect: 	a NewValueHolder[ true ]


NewList(ScrollPane)>>adoptPaneColor:
	Receiver: a NewList(394002432)
	Arguments and temporary variables: 
		paneColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.823000000000...etc...
	Receiver's instance variables: 
		bounds: 	(0.0@30.0) corner: (33.0@59.0)
		owner: 	a PanelMorph(862191616)
		submorphs: 	an Array(a ScrollBar(211025920) a ScrollBar(445644800) a TransformMo...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (3407872) [other:  (dragEnabled -> false) (dropEnab...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a NewValueHolder[ a MorphicNewListAdapter ]
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(445644800)
		scroller: 	a TransformMorph(1026031616)
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(211025920)
		listCache: 	a CollectionValueHolder[ an OrderedCollection('self'->a PluggableTex...etc...
		listSize: 	a NewValueHolder[ 40 ]
		isInitialized: 	a NewValueHolder[ true ]
		isMultipleSelection: 	a NewValueHolder[ false ]
		selectedIndex: 	a NewValueHolder[ 1 ]
		selectedIndexes: 	a DictionaryValueHolder[ a Dictionary(1->true ) ]
		renderer: 	a NewValueHolder[ a NewListRenderer(864026624) ]
		headerHeight: 	a NewValueHolder[ 0 ]
		headerTitle: 	a CollectionValueHolder[ nil ]
		clickOnHeader: 	a NewValueHolder[ nil ]
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		secondSelection: 	a NewValueHolder[ 0 ]
		displayListCache: 	a CollectionValueHolder[ #(nil nil nil nil nil nil nil nil ni...etc...
		deSelectOnReclick: 	a NewValueHolder[ false ]
		runningProcesses: 	a CollectionValueHolder[ #(nil nil nil nil nil nil nil nil ni...etc...
		selectionWithKeys: 	a NewValueHolder[ true ]
		drawColor: 	a NewValueHolder[ Color white ]
		selectedItem: 	a NewValueHolder[ 'self'->a PluggableTextMorph(943718400) ]
		selectedItems: 	a CollectionValueHolder[ an Array('self'->a PluggableTextMorph(9...etc...
		unselectOnChange: 	a NewValueHolder[ false ]
		iconCache: 	a DictionaryValueHolder[ a Dictionary() ]
		iconMaxSize: 	a NewValueHolder[ (0@0) ]
		enabled: 	a NewValueHolder[ true ]
		allowToSelect: 	a NewValueHolder[ true ]


[ :m | m adoptPaneColor: paneColor ] in PanelMorph(Morph)>>adoptPaneColor:
	Receiver: a PanelMorph(862191616)
	Arguments and temporary variables: 
		paneColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.823000000000...etc...
		m: 	a NewList(394002432)
	Receiver's instance variables: 
		bounds: 	(0.0@30.0) corner: (25.0@40.0)
		owner: 	a PanelMorph(749993984)
		submorphs: 	an Array(a PluggableTextMorph(883163136) a ProportionalSplitterMorph...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (908853248) [sticky]  [other:  (kmDispatcher -> a K...etc...
		borderWidth: 	0
		borderColor: 	Color black


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableTextMorph(883163136) a ProportionalSplitterMorph(490471424) a NewList(...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :m | m adoptPaneColor: paneColor ]
		index: 	3
	Receiver's instance variables: 
an Array(a PluggableTextMorph(883163136) a ProportionalSplitterMorph(490471424) a NewList(...etc...

PanelMorph(Morph)>>submorphsDo:
	Receiver: a PanelMorph(862191616)
	Arguments and temporary variables: 
		aBlock: 	[ :m | m adoptPaneColor: paneColor ]
	Receiver's instance variables: 
		bounds: 	(0.0@30.0) corner: (25.0@40.0)
		owner: 	a PanelMorph(749993984)
		submorphs: 	an Array(a PluggableTextMorph(883163136) a ProportionalSplitterMorph...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (908853248) [sticky]  [other:  (kmDispatcher -> a K...etc...
		borderWidth: 	0
		borderColor: 	Color black


PanelMorph(Morph)>>adoptPaneColor:
	Receiver: a PanelMorph(862191616)
	Arguments and temporary variables: 
		paneColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.823000000000...etc...
	Receiver's instance variables: 
		bounds: 	(0.0@30.0) corner: (25.0@40.0)
		owner: 	a PanelMorph(749993984)
		submorphs: 	an Array(a PluggableTextMorph(883163136) a ProportionalSplitterMorph...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (908853248) [sticky]  [other:  (kmDispatcher -> a K...etc...
		borderWidth: 	0
		borderColor: 	Color black


PanelMorph>>adoptPaneColor:
	Receiver: a PanelMorph(862191616)
	Arguments and temporary variables: 
		paneColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.823000000000...etc...
	Receiver's instance variables: 
		bounds: 	(0.0@30.0) corner: (25.0@40.0)
		owner: 	a PanelMorph(749993984)
		submorphs: 	an Array(a PluggableTextMorph(883163136) a ProportionalSplitterMorph...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (908853248) [sticky]  [other:  (kmDispatcher -> a K...etc...
		borderWidth: 	0
		borderColor: 	Color black


[ :m | m adoptPaneColor: paneColor ] in PanelMorph(Morph)>>adoptPaneColor:
	Receiver: a PanelMorph(749993984)
	Arguments and temporary variables: 
		paneColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.823000000000...etc...
		m: 	a PanelMorph(862191616)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (25@40)
		owner: 	a PanelMorph(471334912)
		submorphs: 	an Array(a PanelMorph(862191616) a PanelMorph(54263808))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (826802176) [sticky]  [other:  (kmDispatcher -> a K...etc...
		borderWidth: 	0
		borderColor: 	Color black


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PanelMorph(862191616) a PanelMorph(54263808))
	Arguments and temporary variables: 
		aBlock: 	[ :m | m adoptPaneColor: paneColor ]
		index: 	1
	Receiver's instance variables: 
an Array(a PanelMorph(862191616) a PanelMorph(54263808))

PanelMorph(Morph)>>submorphsDo:
	Receiver: a PanelMorph(749993984)
	Arguments and temporary variables: 
		aBlock: 	[ :m | m adoptPaneColor: paneColor ]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (25@40)
		owner: 	a PanelMorph(471334912)
		submorphs: 	an Array(a PanelMorph(862191616) a PanelMorph(54263808))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (826802176) [sticky]  [other:  (kmDispatcher -> a K...etc...
		borderWidth: 	0
		borderColor: 	Color black


PanelMorph(Morph)>>adoptPaneColor:
	Receiver: a PanelMorph(749993984)
	Arguments and temporary variables: 
		paneColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.823000000000...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (25@40)
		owner: 	a PanelMorph(471334912)
		submorphs: 	an Array(a PanelMorph(862191616) a PanelMorph(54263808))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (826802176) [sticky]  [other:  (kmDispatcher -> a K...etc...
		borderWidth: 	0
		borderColor: 	Color black


PanelMorph>>adoptPaneColor:
	Receiver: a PanelMorph(749993984)
	Arguments and temporary variables: 
		paneColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.823000000000...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (25@40)
		owner: 	a PanelMorph(471334912)
		submorphs: 	an Array(a PanelMorph(862191616) a PanelMorph(54263808))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (826802176) [sticky]  [other:  (kmDispatcher -> a K...etc...
		borderWidth: 	0
		borderColor: 	Color black


[ :m | m adoptPaneColor: paneColor ] in PanelMorph(Morph)>>adoptPaneColor:
	Receiver: a PanelMorph(471334912)
	Arguments and temporary variables: 
		paneColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.823000000000...etc...
		m: 	a PanelMorph(749993984)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a PanelMorph(421789696)
		submorphs: 	an Array(a PanelMorph(159907840) a ProportionalSplitterMorph(7182745...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (530055168) [sticky]  [other:  (kmDispatcher -> a K...etc...
		borderWidth: 	0
		borderColor: 	Color black


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PanelMorph(159907840) a ProportionalSplitterMorph(71827456) a PanelMorph(749993...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :m | m adoptPaneColor: paneColor ]
		index: 	3
	Receiver's instance variables: 
an Array(a PanelMorph(159907840) a ProportionalSplitterMorph(71827456) a PanelMorph(749993...etc...

PanelMorph(Morph)>>submorphsDo:
	Receiver: a PanelMorph(471334912)
	Arguments and temporary variables: 
		aBlock: 	[ :m | m adoptPaneColor: paneColor ]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a PanelMorph(421789696)
		submorphs: 	an Array(a PanelMorph(159907840) a ProportionalSplitterMorph(7182745...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (530055168) [sticky]  [other:  (kmDispatcher -> a K...etc...
		borderWidth: 	0
		borderColor: 	Color black


PanelMorph(Morph)>>adoptPaneColor:
	Receiver: a PanelMorph(471334912)
	Arguments and temporary variables: 
		paneColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.823000000000...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a PanelMorph(421789696)
		submorphs: 	an Array(a PanelMorph(159907840) a ProportionalSplitterMorph(7182745...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (530055168) [sticky]  [other:  (kmDispatcher -> a K...etc...
		borderWidth: 	0
		borderColor: 	Color black



--- The full stack ---
Float(Magnitude)>>max:
Rectangle class>>origin:extent:
Margin>>insetRectangle:
Rectangle>>insetBy:
PanelMorph(Morph)>>innerBounds
PanelMorph(Morph)>>clippingBounds
PanelMorph(Morph)>>invalidRect:from:
NewList(Morph)>>invalidRect:from:
ScrollBar(Morph)>>invalidRect:from:
BorderedMorph(Morph)>>invalidRect:from:
BorderedMorph(Morph)>>invalidRect:
BorderedMorph(Morph)>>changed
BorderedMorph>>borderStyle:
ScrollBar>>adoptGradientColor:
ScrollBar>>sliderColor:
ScrollBar>>initializeSlider
ScrollBar(Slider)>>extent:
ScrollBar>>extent:
ScrollBar(Morph)>>bounds:
NewList(ScrollPane)>>vResizeScrollBar
NewList(ScrollPane)>>resizeScrollBars
NewList(ScrollPane)>>hideOrShowScrollBars
NewList(ScrollPane)>>setScrollDeltas
NewList(ScrollPane)>>borderStyle:
NewList(ScrollPane)>>adoptPaneColor:
[ :m | m adoptPaneColor: paneColor ] in PanelMorph(Morph)>>adoptPaneColor:
Array(SequenceableCollection)>>do:
PanelMorph(Morph)>>submorphsDo:
PanelMorph(Morph)>>adoptPaneColor:
PanelMorph>>adoptPaneColor:
[ :m | m adoptPaneColor: paneColor ] in PanelMorph(Morph)>>adoptPaneColor:
Array(SequenceableCollection)>>do:
PanelMorph(Morph)>>submorphsDo:
PanelMorph(Morph)>>adoptPaneColor:
PanelMorph>>adoptPaneColor:
[ :m | m adoptPaneColor: paneColor ] in PanelMorph(Morph)>>adoptPaneColor:
Array(SequenceableCollection)>>do:
PanelMorph(Morph)>>submorphsDo:
PanelMorph(Morph)>>adoptPaneColor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PanelMorph>>adoptPaneColor:
[ :m | m adoptPaneColor: paneColor ] in PanelMorph(Morph)>>adoptPaneColor:
Array(SequenceableCollection)>>do:
PanelMorph(Morph)>>submorphsDo:
PanelMorph(Morph)>>adoptPaneColor:
PanelMorph>>adoptPaneColor:
SpecWindow(SystemWindow)>>addMorph:fullFrame:
SpecWindow(SystemWindow)>>addMorph:frame:
MorphicWindowAdapter>>addModelIn:withSpecLayout:
MorphicWindowAdapter(AbstractAdapter)>>update:with:
[ :aDependent | aDependent update: anAspect with: anObject ] in WindowModel(Object)>>changed:with:
DependentsArray>>do:
WindowModel(Object)>>changed:with:
WindowModel>>addModelIn:withSpecLayout:
WindowModel>>buildWithSpecLayout:
WindowModel>>openWithSpecLayout:
SpecDebugger(ComposableModel)>>openWithSpecLayout:
SpecDebugger(ComposableModel)>>openWithSpec:
SpecDebugger(ComposableModel)>>openWithSpec
SpecDebugger>>openFullNoSuspendLabel:
[ 
debugger process: process controller: nil context: context.	"schedule debugger in deferred UI message to address
			redraw problems after opening a debugger e.g. from
			the testrunner."	"self defer: ["
bool
	ifTrue: [ debugger openFullNoSuspendLabel: title ]
	ifFalse: [ debugger openNotifierContents: contentsStringOrNil label: title ].
debugger errorWasInUIProcess: errorWasInUIProcess ] in [ 
[ 
debugger process: process controller: nil context: context.	"schedule debugger in deferred UI message to address
			redraw problems after opening a debugger e.g. from
			the testrunner."	"self defer: ["
bool
	ifTrue: [ debugger openFullNoSuspendLabel: title ]
	ifFalse: [ debugger openNotifierContents: contentsStringOrNil label: title ].
debugger errorWasInUIProcess: errorWasInUIProcess ]
	on: Error
	do: [ :ex | 
		Smalltalk tools debugger
			primitiveError:
				'Orginal error: ' , title asString
					,
						'.
	Smalltalk tools debugger error: '
					,
						([ ex description ]
							on: Error
							do: [ 'a ' , ex class printString ]) , ':' ] ] in MorphicUIManager>>openDebuggerOn:context:label:contents:fullView:
BlockClosure>>on:do:
[ 
[ 
debugger process: process controller: nil context: context.	"schedule debugger in deferred UI message to address
			redraw problems after opening a debugger e.g. from
			the testrunner."	"self defer: ["
bool
	ifTrue: [ debugger openFullNoSuspendLabel: title ]
	ifFalse: [ debugger openNotifierContents: contentsStringOrNil label: title ].
debugger errorWasInUIProcess: errorWasInUIProcess ]
	on: Error
	do: [ :ex | 
		Smalltalk tools debugger
			primitiveError:
				'Orginal error: ' , title asString
					,
						'.
	Smalltalk tools debugger error: '
					,
						([ ex description ]
							on: Error
							do: [ 'a ' , ex class printString ]) , ':' ] ] in MorphicUIManager>>openDebuggerOn:context:label:contents:fullView:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
3 March 2015 5:50:04.585903 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

SmallInteger(Number)>>negative
	Receiver: 262144
	Arguments and temporary variables: 

	Receiver's instance variables: 
262144

SmallInteger(Integer)>>bitShift:
	Receiver: 262144
	Arguments and temporary variables: 
		shiftCount: 	32
		magnitudeShift: 	1125899906842624
	Receiver's instance variables: 
262144

SmallInteger>>bitShift:
	Receiver: 262144
	Arguments and temporary variables: 
		arg: 	32
	Receiver's instance variables: 
262144

Float>>asTrueFraction
	Receiver: 20.0
	Arguments and temporary variables: 
		signexp: 	1027
		positive: 	true
		expPart: 	1027
		exp: 	nil
		fraction: 	nil
		fractionPart: 	nil
		signedFraction: 	nil
		result: 	nil
		zeroBitsCount: 	nil
	Receiver's instance variables: 
20.0

Float>>adaptToInteger:andCompare:
	Receiver: 20.0
	Arguments and temporary variables: 
		rcvr: 	50
		selector: 	#<
	Receiver's instance variables: 
20.0

SmallInteger(Integer)>><
	Receiver: 50
	Arguments and temporary variables: 
		aNumber: 	20.0
	Receiver's instance variables: 
50

SmallInteger>><
	Receiver: 50
	Arguments and temporary variables: 
		aNumber: 	20.0
	Receiver's instance variables: 
50

Rectangle>>intersect:ifNone:
	Receiver: (4.0@31.0) corner: (20.0@40.0)
	Arguments and temporary variables: 
		aRectangle: 	(0@0) corner: (50@40)
		aBlock: 	[ ^ self ]
		aPoint: 	(50@40)
		left: 	4.0
		right: 	nil
		top: 	31.0
		bottom: 	nil
	Receiver's instance variables: 
		origin: 	(4.0@31.0)
		corner: 	(20.0@40.0)


PanelMorph(Morph)>>invalidRect:from:
	Receiver: a PanelMorph(522715136)
	Arguments and temporary variables: 
		aRectangle: 	(4.0@31.0) corner: (20.0@40.0)
		aMorph: 	a PanelMorph(831520768)
		damageRect: 	(4.0@31.0) corner: (20.0@40.0)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a PanelMorph(296222720)
		submorphs: 	an Array(a PanelMorph(38535168) a ProportionalSplitterMorph(10522460...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (605552640) [sticky]  [other:  (kmDispatcher -> a K...etc...
		borderWidth: 	0
		borderColor: 	Color black


PanelMorph(Morph)>>invalidRect:from:
	Receiver: a PanelMorph(831520768)
	Arguments and temporary variables: 
		aRectangle: 	(4.0@31.0) corner: (20.0@40.0)
		aMorph: 	a PanelMorph(354942976)
		damageRect: 	(4.0@31.0) corner: (20.0@40.0)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (25@40)
		owner: 	a PanelMorph(522715136)
		submorphs: 	an Array(a PanelMorph(354942976) a PanelMorph(135790592))
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (902299648) [sticky]  [other:  (kmDispatcher -> a K...etc...
		borderWidth: 	0
		borderColor: 	Color black


PanelMorph(Morph)>>invalidRect:from:
	Receiver: a PanelMorph(354942976)
	Arguments and temporary variables: 
		aRectangle: 	(4.0@31.0) corner: (20.0@46.0)
		aMorph: 	a NewList(981729280)
		damageRect: 	(4.0@31.0) corner: (20.0@40.0)
	Receiver's instance variables: 
		bounds: 	(0.0@30.0) corner: (25.0@40.0)
		owner: 	a PanelMorph(831520768)
		submorphs: 	an Array(a PluggableTextMorph(456916992) a ProportionalSplitterMorph...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (401604608) [sticky]  [other:  (kmDispatcher -> a K...etc...
		borderWidth: 	0
		borderColor: 	Color black


NewList(Morph)>>invalidRect:from:
	Receiver: a NewList(981729280)
	Arguments and temporary variables: 
		aRectangle: 	(4.0@31.0) corner: (20.0@46.0)
		aMorph: 	a TransformMorph(576192512)
		damageRect: 	(4.0@31.0) corner: (20.0@46.0)
	Receiver's instance variables: 
		bounds: 	(0.0@30.0) corner: (33.0@59.0)
		owner: 	a PanelMorph(354942976)
		submorphs: 	an Array(a ScrollBar(834928640) a ScrollBar(1033371648) a TransformM...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (627310592) [other:  (dragEnabled -> false) (dropEn...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a NewValueHolder[ a MorphicNewListAdapter ]
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1033371648)
		scroller: 	a TransformMorph(576192512)
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(834928640)
		listCache: 	a CollectionValueHolder[ an OrderedCollection('self'->25.0 'sign'->1...etc...
		listSize: 	a NewValueHolder[ 6 ]
		isInitialized: 	a NewValueHolder[ true ]
		isMultipleSelection: 	a NewValueHolder[ false ]
		selectedIndex: 	a NewValueHolder[ 1 ]
		selectedIndexes: 	a DictionaryValueHolder[ a Dictionary(1->true ) ]
		renderer: 	a NewValueHolder[ a NewListRenderer(396361728) ]
		headerHeight: 	a NewValueHolder[ 0 ]
		headerTitle: 	a CollectionValueHolder[ nil ]
		clickOnHeader: 	a NewValueHolder[ nil ]
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		secondSelection: 	a NewValueHolder[ 0 ]
		displayListCache: 	a CollectionValueHolder[ #(nil nil nil nil nil nil) ]
		deSelectOnReclick: 	a NewValueHolder[ false ]
		runningProcesses: 	a CollectionValueHolder[ #(nil nil nil nil nil nil) ]
		selectionWithKeys: 	a NewValueHolder[ true ]
		drawColor: 	a NewValueHolder[ Color white ]
		selectedItem: 	a NewValueHolder[ 'self'->25.0 ]
		selectedItems: 	a CollectionValueHolder[ an Array('self'->25.0) ]
		unselectOnChange: 	a NewValueHolder[ false ]
		iconCache: 	a DictionaryValueHolder[ a Dictionary() ]
		iconMaxSize: 	a NewValueHolder[ (0@0) ]
		enabled: 	a NewValueHolder[ true ]
		allowToSelect: 	a NewValueHolder[ true ]


TransformMorph(Morph)>>invalidRect:from:
	Receiver: a TransformMorph(576192512)
	Arguments and temporary variables: 
		aRectangle: 	(4.0@31.0) corner: (20.0@46.0)
		aMorph: 	a TransformMorph(576192512)
		damageRect: 	(4.0@31.0) corner: (20.0@46.0)
	Receiver's instance variables: 
		bounds: 	(1@31) corner: (19@45)
		owner: 	a NewList(981729280)
		submorphs: 	an Array(a NewListRenderer(396361728))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (610271232)
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = (-4@ -31))
		smoothing: 	1
		localBounds: 	(0@0) corner: (33@96)


TransformMorph>>invalidRect:from:
	Receiver: a TransformMorph(576192512)
	Arguments and temporary variables: 
		damageRect: 	(1.0@1.0) corner: (31@94)
		aMorph: 	a NewListRenderer(396361728)
	Receiver's instance variables: 
		bounds: 	(1@31) corner: (19@45)
		owner: 	a NewList(981729280)
		submorphs: 	an Array(a NewListRenderer(396361728))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (610271232)
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = (-4@ -31))
		smoothing: 	1
		localBounds: 	(0@0) corner: (33@96)


NewListRenderer(Morph)>>invalidRect:from:
	Receiver: a NewListRenderer(396361728)
	Arguments and temporary variables: 
		aRectangle: 	(1.0@1.0) corner: (31@94)
		aMorph: 	a TransformMorph(1073217536)
		damageRect: 	(1.0@1.0) corner: (31@94)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (33@96)
		owner: 	a TransformMorph(576192512)
		submorphs: 	an Array(a TransformMorph(1073217536))
		fullBounds: 	(0@0) corner: (33@96)
		color: 	Color transparent
		extension: 	a MorphExtension (154140672)
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	nil
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(420478976)
		scroller: 	a TransformMorph(1073217536)
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(240123904)
		itemHeight: 	a NewValueHolder[ 16 ]
		listSource: 	a NewValueHolder[ a NewList(981729280) ]
		maxWidth: 	a NewValueHolder[ 0 ]
		hasHeader: 	a NewValueHolder[ false ]
		potentialDropIndex: 	a NewValueHolder[ 0 ]
		steppingTime: 	100
		mouseDownIndex: 	a NewValueHolder[ 0 ]
		wantsSteps: 	false


TransformMorph(Morph)>>invalidRect:from:
	Receiver: a TransformMorph(1073217536)
	Arguments and temporary variables: 
		aRectangle: 	(1.0@1.0) corner: (31@94)
		aMorph: 	a TransformMorph(1073217536)
		damageRect: 	(1.0@1.0) corner: (31@94)
	Receiver's instance variables: 
		bounds: 	(2@2) corner: (31@94)
		owner: 	a NewListRenderer(396361728)
		submorphs: 	#()
		fullBounds: 	(2@2) corner: (31@94)
		color: 	Color transparent
		extension: 	a MorphExtension (33554432)
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = (-5@ -2.0))
		smoothing: 	1
		localBounds: 	nil


TransformMorph>>invalidRect:from:
	Receiver: a TransformMorph(1073217536)
	Arguments and temporary variables: 
		damageRect: 	(1.0@1.0) corner: (31@94)
		aMorph: 	a TransformMorph(1073217536)
	Receiver's instance variables: 
		bounds: 	(2@2) corner: (31@94)
		owner: 	a NewListRenderer(396361728)
		submorphs: 	#()
		fullBounds: 	(2@2) corner: (31@94)
		color: 	Color transparent
		extension: 	a MorphExtension (33554432)
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = (-5@ -2.0))
		smoothing: 	1
		localBounds: 	nil


TransformMorph(Morph)>>invalidRect:
	Receiver: a TransformMorph(1073217536)
	Arguments and temporary variables: 
		damageRect: 	(1.0@1.0) corner: (31@94)
	Receiver's instance variables: 
		bounds: 	(2@2) corner: (31@94)
		owner: 	a NewListRenderer(396361728)
		submorphs: 	#()
		fullBounds: 	(2@2) corner: (31@94)
		color: 	Color transparent
		extension: 	a MorphExtension (33554432)
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = (-5@ -2.0))
		smoothing: 	1
		localBounds: 	nil


TransformMorph(Morph)>>position:
	Receiver: a TransformMorph(1073217536)
	Arguments and temporary variables: 
		aPoint: 	(1@1)
		delta: 	(-1.0@ -1.0)
		box: 	(2@2) corner: (31@94)
	Receiver's instance variables: 
		bounds: 	(2@2) corner: (31@94)
		owner: 	a NewListRenderer(396361728)
		submorphs: 	#()
		fullBounds: 	(2@2) corner: (31@94)
		color: 	Color transparent
		extension: 	a MorphExtension (33554432)
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = (-5@ -2.0))
		smoothing: 	1
		localBounds: 	nil


TransformMorph(Morph)>>bounds:
	Receiver: a TransformMorph(1073217536)
	Arguments and temporary variables: 
		newBounds: 	(1@1) corner: (32@95)
		oldExtent: 	(29@92)
		newExtent: 	(31@94)
	Receiver's instance variables: 
		bounds: 	(2@2) corner: (31@94)
		owner: 	a NewListRenderer(396361728)
		submorphs: 	#()
		fullBounds: 	(2@2) corner: (31@94)
		color: 	Color transparent
		extension: 	a MorphExtension (33554432)
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = (-5@ -2.0))
		smoothing: 	1
		localBounds: 	nil


NewListRenderer(ScrollPane)>>resizeScroller
	Receiver: a NewListRenderer(396361728)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (33@96)
		owner: 	a TransformMorph(576192512)
		submorphs: 	an Array(a TransformMorph(1073217536))
		fullBounds: 	(0@0) corner: (33@96)
		color: 	Color transparent
		extension: 	a MorphExtension (154140672)
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	nil
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(420478976)
		scroller: 	a TransformMorph(1073217536)
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(240123904)
		itemHeight: 	a NewValueHolder[ 16 ]
		listSource: 	a NewValueHolder[ a NewList(981729280) ]
		maxWidth: 	a NewValueHolder[ 0 ]
		hasHeader: 	a NewValueHolder[ false ]
		potentialDropIndex: 	a NewValueHolder[ 0 ]
		steppingTime: 	100
		mouseDownIndex: 	a NewValueHolder[ 0 ]
		wantsSteps: 	false


NewListRenderer(ScrollPane)>>extent:
	Receiver: a NewListRenderer(396361728)
	Arguments and temporary variables: 
		newExtent: 	(0@96)
		oldW: 	33
		oldH: 	96
		wasHShowing: 	false
		wasVShowing: 	false
		noVPlease: 	false
		noHPlease: 	false
		minH: 	29
		minW: 	33
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (33@96)
		owner: 	a TransformMorph(576192512)
		submorphs: 	an Array(a TransformMorph(1073217536))
		fullBounds: 	(0@0) corner: (33@96)
		color: 	Color transparent
		extension: 	a MorphExtension (154140672)
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	nil
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(420478976)
		scroller: 	a TransformMorph(1073217536)
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(240123904)
		itemHeight: 	a NewValueHolder[ 16 ]
		listSource: 	a NewValueHolder[ a NewList(981729280) ]
		maxWidth: 	a NewValueHolder[ 0 ]
		hasHeader: 	a NewValueHolder[ false ]
		potentialDropIndex: 	a NewValueHolder[ 0 ]
		steppingTime: 	100
		mouseDownIndex: 	a NewValueHolder[ 0 ]
		wantsSteps: 	false


NewListRenderer(Morph)>>width:
	Receiver: a NewListRenderer(396361728)
	Arguments and temporary variables: 
		aNumber: 	0
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (33@96)
		owner: 	a TransformMorph(576192512)
		submorphs: 	an Array(a TransformMorph(1073217536))
		fullBounds: 	(0@0) corner: (33@96)
		color: 	Color transparent
		extension: 	a MorphExtension (154140672)
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	nil
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(420478976)
		scroller: 	a TransformMorph(1073217536)
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(240123904)
		itemHeight: 	a NewValueHolder[ 16 ]
		listSource: 	a NewValueHolder[ a NewList(981729280) ]
		maxWidth: 	a NewValueHolder[ 0 ]
		hasHeader: 	a NewValueHolder[ false ]
		potentialDropIndex: 	a NewValueHolder[ 0 ]
		steppingTime: 	100
		mouseDownIndex: 	a NewValueHolder[ 0 ]
		wantsSteps: 	false


NewList>>extent:
	Receiver: a NewList(981729280)
	Arguments and temporary variables: 
		newExtent: 	(8.0@10.0)
	Receiver's instance variables: 
		bounds: 	(0.0@30.0) corner: (33.0@59.0)
		owner: 	a PanelMorph(354942976)
		submorphs: 	an Array(a ScrollBar(834928640) a ScrollBar(1033371648) a TransformM...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (627310592) [other:  (dragEnabled -> false) (dropEn...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a NewValueHolder[ a MorphicNewListAdapter ]
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1033371648)
		scroller: 	a TransformMorph(576192512)
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(834928640)
		listCache: 	a CollectionValueHolder[ an OrderedCollection('self'->25.0 'sign'->1...etc...
		listSize: 	a NewValueHolder[ 6 ]
		isInitialized: 	a NewValueHolder[ true ]
		isMultipleSelection: 	a NewValueHolder[ false ]
		selectedIndex: 	a NewValueHolder[ 1 ]
		selectedIndexes: 	a DictionaryValueHolder[ a Dictionary(1->true ) ]
		renderer: 	a NewValueHolder[ a NewListRenderer(396361728) ]
		headerHeight: 	a NewValueHolder[ 0 ]
		headerTitle: 	a CollectionValueHolder[ nil ]
		clickOnHeader: 	a NewValueHolder[ nil ]
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		secondSelection: 	a NewValueHolder[ 0 ]
		displayListCache: 	a CollectionValueHolder[ #(nil nil nil nil nil nil) ]
		deSelectOnReclick: 	a NewValueHolder[ false ]
		runningProcesses: 	a CollectionValueHolder[ #(nil nil nil nil nil nil) ]
		selectionWithKeys: 	a NewValueHolder[ true ]
		drawColor: 	a NewValueHolder[ Color white ]
		selectedItem: 	a NewValueHolder[ 'self'->25.0 ]
		selectedItems: 	a CollectionValueHolder[ an Array('self'->25.0) ]
		unselectOnChange: 	a NewValueHolder[ false ]
		iconCache: 	a DictionaryValueHolder[ a Dictionary() ]
		iconMaxSize: 	a NewValueHolder[ (0@0) ]
		enabled: 	a NewValueHolder[ true ]
		allowToSelect: 	a NewValueHolder[ true ]


NewList(Morph)>>bounds:
	Receiver: a NewList(981729280)
	Arguments and temporary variables: 
		newBounds: 	(0.0@30.0) corner: (8.0@40.0)
		oldExtent: 	(33.0@29.0)
		newExtent: 	(8.0@10.0)
	Receiver's instance variables: 
		bounds: 	(0.0@30.0) corner: (33.0@59.0)
		owner: 	a PanelMorph(354942976)
		submorphs: 	an Array(a ScrollBar(834928640) a ScrollBar(1033371648) a TransformM...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (627310592) [other:  (dragEnabled -> false) (dropEn...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a NewValueHolder[ a MorphicNewListAdapter ]
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1033371648)
		scroller: 	a TransformMorph(576192512)
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(834928640)
		listCache: 	a CollectionValueHolder[ an OrderedCollection('self'->25.0 'sign'->1...etc...
		listSize: 	a NewValueHolder[ 6 ]
		isInitialized: 	a NewValueHolder[ true ]
		isMultipleSelection: 	a NewValueHolder[ false ]
		selectedIndex: 	a NewValueHolder[ 1 ]
		selectedIndexes: 	a DictionaryValueHolder[ a Dictionary(1->true ) ]
		renderer: 	a NewValueHolder[ a NewListRenderer(396361728) ]
		headerHeight: 	a NewValueHolder[ 0 ]
		headerTitle: 	a CollectionValueHolder[ nil ]
		clickOnHeader: 	a NewValueHolder[ nil ]
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		secondSelection: 	a NewValueHolder[ 0 ]
		displayListCache: 	a CollectionValueHolder[ #(nil nil nil nil nil nil) ]
		deSelectOnReclick: 	a NewValueHolder[ false ]
		runningProcesses: 	a CollectionValueHolder[ #(nil nil nil nil nil nil) ]
		selectionWithKeys: 	a NewValueHolder[ true ]
		drawColor: 	a NewValueHolder[ Color white ]
		selectedItem: 	a NewValueHolder[ 'self'->25.0 ]
		selectedItems: 	a CollectionValueHolder[ an Array('self'->25.0) ]
		unselectOnChange: 	a NewValueHolder[ false ]
		iconCache: 	a DictionaryValueHolder[ a Dictionary() ]
		iconMaxSize: 	a NewValueHolder[ (0@0) ]
		enabled: 	a NewValueHolder[ true ]
		allowToSelect: 	a NewValueHolder[ true ]


NewList(Morph)>>layoutInBounds:
	Receiver: a NewList(981729280)
	Arguments and temporary variables: 
		cellBounds: 	(0@30) corner: (8@40)
		box: 	(0.0@30.0) corner: (8.0@40.0)
		aSymbol: 	#center
		delta: 	nil
	Receiver's instance variables: 
		bounds: 	(0.0@30.0) corner: (33.0@59.0)
		owner: 	a PanelMorph(354942976)
		submorphs: 	an Array(a ScrollBar(834928640) a ScrollBar(1033371648) a TransformM...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (627310592) [other:  (dragEnabled -> false) (dropEn...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a NewValueHolder[ a MorphicNewListAdapter ]
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1033371648)
		scroller: 	a TransformMorph(576192512)
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(834928640)
		listCache: 	a CollectionValueHolder[ an OrderedCollection('self'->25.0 'sign'->1...etc...
		listSize: 	a NewValueHolder[ 6 ]
		isInitialized: 	a NewValueHolder[ true ]
		isMultipleSelection: 	a NewValueHolder[ false ]
		selectedIndex: 	a NewValueHolder[ 1 ]
		selectedIndexes: 	a DictionaryValueHolder[ a Dictionary(1->true ) ]
		renderer: 	a NewValueHolder[ a NewListRenderer(396361728) ]
		headerHeight: 	a NewValueHolder[ 0 ]
		headerTitle: 	a CollectionValueHolder[ nil ]
		clickOnHeader: 	a NewValueHolder[ nil ]
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		secondSelection: 	a NewValueHolder[ 0 ]
		displayListCache: 	a CollectionValueHolder[ #(nil nil nil nil nil nil) ]
		deSelectOnReclick: 	a NewValueHolder[ false ]
		runningProcesses: 	a CollectionValueHolder[ #(nil nil nil nil nil nil) ]
		selectionWithKeys: 	a NewValueHolder[ true ]
		drawColor: 	a NewValueHolder[ Color white ]
		selectedItem: 	a NewValueHolder[ 'self'->25.0 ]
		selectedItems: 	a CollectionValueHolder[ an Array('self'->25.0) ]
		unselectOnChange: 	a NewValueHolder[ false ]
		iconCache: 	a DictionaryValueHolder[ a Dictionary() ]
		iconMaxSize: 	a NewValueHolder[ (0@0) ]
		enabled: 	a NewValueHolder[ true ]
		allowToSelect: 	a NewValueHolder[ true ]


NewList(Morph)>>layoutProportionallyIn:
	Receiver: a NewList(981729280)
	Arguments and temporary variables: 
		newBounds: 	(0.0@30.0) corner: (25.0@40.0)
		box: 	(0@30) corner: (8@40)
		frame: 	a LayoutFrame ( (0@0) + (0@0)px corner: (0.33@1) + (0@0)px ) 
	Receiver's instance variables: 
		bounds: 	(0.0@30.0) corner: (33.0@59.0)
		owner: 	a PanelMorph(354942976)
		submorphs: 	an Array(a ScrollBar(834928640) a ScrollBar(1033371648) a TransformM...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (627310592) [other:  (dragEnabled -> false) (dropEn...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a NewValueHolder[ a MorphicNewListAdapter ]
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1033371648)
		scroller: 	a TransformMorph(576192512)
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(834928640)
		listCache: 	a CollectionValueHolder[ an OrderedCollection('self'->25.0 'sign'->1...etc...
		listSize: 	a NewValueHolder[ 6 ]
		isInitialized: 	a NewValueHolder[ true ]
		isMultipleSelection: 	a NewValueHolder[ false ]
		selectedIndex: 	a NewValueHolder[ 1 ]
		selectedIndexes: 	a DictionaryValueHolder[ a Dictionary(1->true ) ]
		renderer: 	a NewValueHolder[ a NewListRenderer(396361728) ]
		headerHeight: 	a NewValueHolder[ 0 ]
		headerTitle: 	a CollectionValueHolder[ nil ]
		clickOnHeader: 	a NewValueHolder[ nil ]
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		secondSelection: 	a NewValueHolder[ 0 ]
		displayListCache: 	a CollectionValueHolder[ #(nil nil nil nil nil nil) ]
		deSelectOnReclick: 	a NewValueHolder[ false ]
		runningProcesses: 	a CollectionValueHolder[ #(nil nil nil nil nil nil) ]
		selectionWithKeys: 	a NewValueHolder[ true ]
		drawColor: 	a NewValueHolder[ Color white ]
		selectedItem: 	a NewValueHolder[ 'self'->25.0 ]
		selectedItems: 	a CollectionValueHolder[ an Array('self'->25.0) ]
		unselectOnChange: 	a NewValueHolder[ false ]
		iconCache: 	a DictionaryValueHolder[ a Dictionary() ]
		iconMaxSize: 	a NewValueHolder[ (0@0) ]
		enabled: 	a NewValueHolder[ true ]
		allowToSelect: 	a NewValueHolder[ true ]


[ :m | m layoutProportionallyIn: newBounds ] in ProportionalLayout>>layout:in:
	Receiver: a ProportionalLayout
	Arguments and temporary variables: 
		aMorph: 	a PanelMorph(354942976)
		newBounds: 	(0.0@30.0) corner: (25.0@40.0)
		m: 	a NewList(981729280)
	Receiver's instance variables: 
a ProportionalLayout

Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableTextMorph(456916992) a ProportionalSplitterMorph(362020864) a NewList(...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :m | m layoutProportionallyIn: newBounds ]
		index: 	3
	Receiver's instance variables: 
an Array(a PluggableTextMorph(456916992) a ProportionalSplitterMorph(362020864) a NewList(...etc...

PanelMorph(Morph)>>submorphsDo:
	Receiver: a PanelMorph(354942976)
	Arguments and temporary variables: 
		aBlock: 	[ :m | m layoutProportionallyIn: newBounds ]
	Receiver's instance variables: 
		bounds: 	(0.0@30.0) corner: (25.0@40.0)
		owner: 	a PanelMorph(831520768)
		submorphs: 	an Array(a PluggableTextMorph(456916992) a ProportionalSplitterMorph...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (401604608) [sticky]  [other:  (kmDispatcher -> a K...etc...
		borderWidth: 	0
		borderColor: 	Color black


ProportionalLayout>>layout:in:
	Receiver: a ProportionalLayout
	Arguments and temporary variables: 
		aMorph: 	a PanelMorph(354942976)
		newBounds: 	(0.0@30.0) corner: (25.0@40.0)
	Receiver's instance variables: 
a ProportionalLayout

PanelMorph(Morph)>>doLayoutIn:
	Receiver: a PanelMorph(354942976)
	Arguments and temporary variables: 
		layoutBounds: 	(0.0@30.0) corner: (25.0@40.0)
		box: 	nil
		priorBounds: 	(0.0@30.0) corner: (25.0@40.0)
		layout: 	a ProportionalLayout
	Receiver's instance variables: 
		bounds: 	(0.0@30.0) corner: (25.0@40.0)
		owner: 	a PanelMorph(831520768)
		submorphs: 	an Array(a PluggableTextMorph(456916992) a ProportionalSplitterMorph...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (401604608) [sticky]  [other:  (kmDispatcher -> a K...etc...
		borderWidth: 	0
		borderColor: 	Color black


[ self doLayoutIn: self layoutBounds ] in PanelMorph(Morph)>>computeFullBounds
	Receiver: a PanelMorph(354942976)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0.0@30.0) corner: (25.0@40.0)
		owner: 	a PanelMorph(831520768)
		submorphs: 	an Array(a PluggableTextMorph(456916992) a ProportionalSplitterMorph...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (401604608) [sticky]  [other:  (kmDispatcher -> a K...etc...
		borderWidth: 	0
		borderColor: 	Color black


BlockClosure>>on:do:
	Receiver: [ self doLayoutIn: self layoutBounds ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
"This should do it unless you don't screw up the bounds...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	PanelMorph(Morph)>>computeFullBounds
		startpc: 	37
		numArgs: 	0


PanelMorph(Morph)>>computeFullBounds
	Receiver: a PanelMorph(354942976)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0.0@30.0) corner: (25.0@40.0)
		owner: 	a PanelMorph(831520768)
		submorphs: 	an Array(a PluggableTextMorph(456916992) a ProportionalSplitterMorph...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (401604608) [sticky]  [other:  (kmDispatcher -> a K...etc...
		borderWidth: 	0
		borderColor: 	Color black


PanelMorph(Morph)>>fullBounds
	Receiver: a PanelMorph(354942976)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0.0@30.0) corner: (25.0@40.0)
		owner: 	a PanelMorph(831520768)
		submorphs: 	an Array(a PluggableTextMorph(456916992) a ProportionalSplitterMorph...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (401604608) [sticky]  [other:  (kmDispatcher -> a K...etc...
		borderWidth: 	0
		borderColor: 	Color black


[ :m | 
| subBox |
m visible
	ifTrue: [ 
		subBox := m fullBounds.
		box ifNil: [ box := subBox copy ] ifNotNil: [ box := box quickMerge: subBox ] ] ] in PanelMorph(Morph)>>submorphBounds
	Receiver: a PanelMorph(831520768)
	Arguments and temporary variables: 
		m: 	a PanelMorph(354942976)
		subBox: 	nil
		box: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (25@40)
		owner: 	a PanelMorph(522715136)
		submorphs: 	an Array(a PanelMorph(354942976) a PanelMorph(135790592))
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (902299648) [sticky]  [other:  (kmDispatcher -> a K...etc...
		borderWidth: 	0
		borderColor: 	Color black


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PanelMorph(354942976) a PanelMorph(135790592))
	Arguments and temporary variables: 
		aBlock: 	[ :m | 
| subBox |
m visible
	ifTrue: [ 
		subBox := m fullBounds.
		bo...etc...
		index: 	1
	Receiver's instance variables: 
an Array(a PanelMorph(354942976) a PanelMorph(135790592))

PanelMorph(Morph)>>submorphBounds
	Receiver: a PanelMorph(831520768)
	Arguments and temporary variables: 
		box: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (25@40)
		owner: 	a PanelMorph(522715136)
		submorphs: 	an Array(a PanelMorph(354942976) a PanelMorph(135790592))
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (902299648) [sticky]  [other:  (kmDispatcher -> a K...etc...
		borderWidth: 	0
		borderColor: 	Color black



--- The full stack ---
SmallInteger(Number)>>negative
SmallInteger(Integer)>>bitShift:
SmallInteger>>bitShift:
Float>>asTrueFraction
Float>>adaptToInteger:andCompare:
SmallInteger(Integer)>><
SmallInteger>><
Rectangle>>intersect:ifNone:
PanelMorph(Morph)>>invalidRect:from:
PanelMorph(Morph)>>invalidRect:from:
PanelMorph(Morph)>>invalidRect:from:
NewList(Morph)>>invalidRect:from:
TransformMorph(Morph)>>invalidRect:from:
TransformMorph>>invalidRect:from:
NewListRenderer(Morph)>>invalidRect:from:
TransformMorph(Morph)>>invalidRect:from:
TransformMorph>>invalidRect:from:
TransformMorph(Morph)>>invalidRect:
TransformMorph(Morph)>>position:
TransformMorph(Morph)>>bounds:
NewListRenderer(ScrollPane)>>resizeScroller
NewListRenderer(ScrollPane)>>extent:
NewListRenderer(Morph)>>width:
NewList>>extent:
NewList(Morph)>>bounds:
NewList(Morph)>>layoutInBounds:
NewList(Morph)>>layoutProportionallyIn:
[ :m | m layoutProportionallyIn: newBounds ] in ProportionalLayout>>layout:in:
Array(SequenceableCollection)>>do:
PanelMorph(Morph)>>submorphsDo:
ProportionalLayout>>layout:in:
PanelMorph(Morph)>>doLayoutIn:
[ self doLayoutIn: self layoutBounds ] in PanelMorph(Morph)>>computeFullBounds
BlockClosure>>on:do:
PanelMorph(Morph)>>computeFullBounds
PanelMorph(Morph)>>fullBounds
[ :m | 
| subBox |
m visible
	ifTrue: [ 
		subBox := m fullBounds.
		box ifNil: [ box := subBox copy ] ifNotNil: [ box := box quickMerge: subBox ] ] ] in PanelMorph(Morph)>>submorphBounds
Array(SequenceableCollection)>>do:
PanelMorph(Morph)>>submorphBounds
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PanelMorph(Morph)>>privateFullBounds
PanelMorph(Morph)>>changed
PanelMorph(Morph)>>color:
PanelMorph>>adoptPaneColor:
[ :m | m adoptPaneColor: paneColor ] in PanelMorph(Morph)>>adoptPaneColor:
Array(SequenceableCollection)>>do:
PanelMorph(Morph)>>submorphsDo:
PanelMorph(Morph)>>adoptPaneColor:
PanelMorph>>adoptPaneColor:
[ :m | m adoptPaneColor: paneColor ] in PanelMorph(Morph)>>adoptPaneColor:
Array(SequenceableCollection)>>do:
PanelMorph(Morph)>>submorphsDo:
PanelMorph(Morph)>>adoptPaneColor:
PanelMorph>>adoptPaneColor:
SpecWindow(SystemWindow)>>addMorph:fullFrame:
SpecWindow(SystemWindow)>>addMorph:frame:
MorphicWindowAdapter>>addModelIn:withSpecLayout:
MorphicWindowAdapter(AbstractAdapter)>>update:with:
[ :aDependent | aDependent update: anAspect with: anObject ] in WindowModel(Object)>>changed:with:
DependentsArray>>do:
WindowModel(Object)>>changed:with:
WindowModel>>addModelIn:withSpecLayout:
WindowModel>>buildWithSpecLayout:
WindowModel>>openWithSpecLayout:
SpecDebugger(ComposableModel)>>openWithSpecLayout:
SpecDebugger(ComposableModel)>>openWithSpec:
SpecDebugger(ComposableModel)>>openWithSpec
SpecDebugger>>openFullNoSuspendLabel:
[ 
debugger process: process controller: nil context: context.	"schedule debugger in deferred UI message to address
			redraw problems after opening a debugger e.g. from
			the testrunner."	"self defer: ["
bool
	ifTrue: [ debugger openFullNoSuspendLabel: title ]
	ifFalse: [ debugger openNotifierContents: contentsStringOrNil label: title ].
debugger errorWasInUIProcess: errorWasInUIProcess ] in [ 
[ 
debugger process: process controller: nil context: context.	"schedule debugger in deferred UI message to address
			redraw problems after opening a debugger e.g. from
			the testrunner."	"self defer: ["
bool
	ifTrue: [ debugger openFullNoSuspendLabel: title ]
	ifFalse: [ debugger openNotifierContents: contentsStringOrNil label: title ].
debugger errorWasInUIProcess: errorWasInUIProcess ]
	on: Error
	do: [ :ex | 
		Smalltalk tools debugger
			primitiveError:
				'Orginal error: ' , title asString
					,
						'.
	Smalltalk tools debugger error: '
					,
						([ ex description ]
							on: Error
							do: [ 'a ' , ex class printString ]) , ':' ] ] in MorphicUIManager>>openDebuggerOn:context:label:contents:fullView:
BlockClosure>>on:do:
[ 
[ 
debugger process: process controller: nil context: context.	"schedule debugger in deferred UI message to address
			redraw problems after opening a debugger e.g. from
			the testrunner."	"self defer: ["
bool
	ifTrue: [ debugger openFullNoSuspendLabel: title ]
	ifFalse: [ debugger openNotifierContents: contentsStringOrNil label: title ].
debugger errorWasInUIProcess: errorWasInUIProcess ]
	on: Error
	do: [ :ex | 
		Smalltalk tools debugger
			primitiveError:
				'Orginal error: ' , title asString
					,
						'.
	Smalltalk tools debugger error: '
					,
						([ ex description ]
							on: Error
							do: [ 'a ' , ex class printString ]) , ':' ] ] in MorphicUIManager>>openDebuggerOn:context:label:contents:fullView:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
3 March 2015 5:50:21.398861 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(0@0)
		anciennePosition: 	nil
		evenement: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)



--- The full stack ---
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>position:
-- and more not shown ---------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: SmallInteger>>width
3 March 2015 6:07:52.196019 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

SmallInteger(Object)>>doesNotUnderstand: #width
	Receiver: 1920
	Arguments and temporary variables: 
		aMessage: 	width
		exception: 	MessageNotUnderstood: SmallInteger>>width
		resumeValue: 	nil
	Receiver's instance variables: 
1920

BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	(100@500)
		anciennePosition: 	nil
		evenement: 	nil
		positionMaxi: 	(1920@1150)
	Receiver's instance variables: 
		position: 	(840@650)
		annonceur: 	an Announcer
		vitesse: 	(-30@ -50)


SimulationBalleRebondissante(Simulation)>>positionBalle:
	Receiver: a SimulationBalleRebondissante
	Arguments and temporary variables: 
		unPoint: 	(100@500)
	Receiver's instance variables: 
		balle: 	a BalleRebondissante
		afficheur: 	an AfficheurGraphiqueDeBalle
		courbe: 	nil
		thread: 	a Process in nil


SimulationBalleRebondissante(Simulation)>>reinitialiserSimulation
	Receiver: a SimulationBalleRebondissante
	Arguments and temporary variables: 

	Receiver's instance variables: 
		balle: 	a BalleRebondissante
		afficheur: 	an AfficheurGraphiqueDeBalle
		courbe: 	nil
		thread: 	a Process in nil


[ 
self reinitialiserSimulation.
self boucleSimulation ] in SimulationBalleRebondissante(Simulation)>>lancerSimulation
	Receiver: a SimulationBalleRebondissante
	Arguments and temporary variables: 

	Receiver's instance variables: 
		balle: 	a BalleRebondissante
		afficheur: 	an AfficheurGraphiqueDeBalle
		courbe: 	nil
		thread: 	a Process in nil


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
self reinitialiserSimulation.
self boucleSimulation ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SimulationBalleRebondissante(Simulation)>>lancerSimulation
		startpc: 	57
		numArgs: 	0



--- The full stack ---
SmallInteger(Object)>>doesNotUnderstand: #width
BalleRebondissante(BalleSimple)>>position:
SimulationBalleRebondissante(Simulation)>>positionBalle:
SimulationBalleRebondissante(Simulation)>>reinitialiserSimulation
[ 
self reinitialiserSimulation.
self boucleSimulation ] in SimulationBalleRebondissante(Simulation)>>lancerSimulation
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "stop" is nil
3 March 2015 6:08:15.015223 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

UndefinedObject(Object)>>doesNotUnderstand: #stop
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	stop
		exception: 	MessageNotUnderstood: receiver of "stop" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

SimulationBalleRebondissante(Simulation)>>arreterAffichage
	Receiver: a SimulationBalleRebondissante
	Arguments and temporary variables: 

	Receiver's instance variables: 
		balle: 	a BalleRebondissante
		afficheur: 	an AfficheurGraphiqueDeBalle
		courbe: 	nil
		thread: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'sim arreterAffichage.'
		itsSelection: 	a Text for 'sim arreterAffichage.'
		itsSelectionString: 	'sim arreterAffichage.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ sim arreterAffichage
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(240386048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(240386048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[ textMorph editor evaluateSelection ] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(598736896)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1097.0@101.0) corner: (1537.0@302.0)
		owner: 	a SystemWindow(495714304)
		submorphs: 	an Array(a ScrollBar(638582784) a TransformMorph(531103744))
		fullBounds: 	(1097@101) corner: (1537@302)
		color: 	Color white
		extension: 	a MorphExtension (219152384) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(638582784)
		scroller: 	a TransformMorph(531103744)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(554696704)
		textMorph: 	a TextMorphForEditView(240386048)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(22 to: 21)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


[ result := editBlock value ] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(598736896)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph editor evaluateSelection ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1097.0@101.0) corner: (1537.0@302.0)
		owner: 	a SystemWindow(495714304)
		submorphs: 	an Array(a ScrollBar(638582784) a TransformMorph(531103744))
		fullBounds: 	(1097@101) corner: (1537@302)
		color: 	Color white
		extension: 	a MorphExtension (219152384) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(638582784)
		scroller: 	a TransformMorph(531103744)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(554696704)
		textMorph: 	a TextMorphForEditView(240386048)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(22 to: 21)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(240386048)
	Arguments and temporary variables: 
		editBlock: 	[ result := editBlock value ]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (419@258)
		owner: 	a TransformMorph(531103744)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (419@258)
		color: 	Color black
		extension: 	a MorphExtension (295174144) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'sim arreterAffichage.
sim := SimulationBalleRebondissante new...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(598736896)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(598736896)
	Arguments and temporary variables: 
		result: 	nil
		editBlock: 	[ textMorph editor evaluateSelection ]
	Receiver's instance variables: 
		bounds: 	(1097.0@101.0) corner: (1537.0@302.0)
		owner: 	a SystemWindow(495714304)
		submorphs: 	an Array(a ScrollBar(638582784) a TransformMorph(531103744))
		fullBounds: 	(1097@101) corner: (1537@302)
		color: 	Color white
		extension: 	a MorphExtension (219152384) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(638582784)
		scroller: 	a TransformMorph(531103744)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(554696704)
		textMorph: 	a TextMorphForEditView(240386048)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(22 to: 21)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(598736896)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1097.0@101.0) corner: (1537.0@302.0)
		owner: 	a SystemWindow(495714304)
		submorphs: 	an Array(a ScrollBar(638582784) a TransformMorph(531103744))
		fullBounds: 	(1097@101) corner: (1537@302)
		color: 	Color white
		extension: 	a MorphExtension (219152384) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(638582784)
		scroller: 	a TransformMorph(531103744)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(554696704)
		textMorph: 	a TextMorphForEditView(240386048)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(22 to: 21)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


[ :morph | morph doIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: SmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		morph: 	a PluggableTextMorph(598736896)
	Receiver's instance variables: 
		superclass: 	TextEditor
		methodDict: 	a MethodDictionary(#argAdvance:->SmalltalkEditor>>#argAdvance: #bro...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SmalltalkEditor
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Text-Edition'
		traitComposition: 	{}
		localSelectors: 	nil
		cmdActions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop...etc...
		shiftCmdActions: 	#(#noop: #argAdvance: #noop: #compareToClipboard: #debugIt: #m...etc...


BlockClosure>>cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(598736896)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	157
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(598736896)
		secondArg: 	a PluggableTextMorph(598736896)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	157
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(598736896)
		secondArg: 	a PluggableTextMorph(598736896)
		thirdArg: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	157
		numArgs: 	1


KMCategoryBinding>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#doIt on Cmd + D do [ :morph | morph doIt ]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(598736896)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(598736896)


[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Cmd + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		l: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[ :l | l completeMatch: self buffer: aBuffer ]
		index: 	1
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Cmd + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #doIt on Cmd + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
		entry: 	#doIt on Cmd + D do [ :morph | morph doIt ]

	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


Set>>do:
	Receiver: a Set(#inspectIt on Cmd + I do [ :morph | morph inspectIt ]
 #sendersOfIt on Cmd + N do [ ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andD...etc...
		index: 	9
		each: 	#doIt on Cmd + D do [ :morph | morph doIt ]

	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(#inspectIt on Cmd + I do [ :morph | morph inspectIt ]
 #senders...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aListener: 	a KMDispatcher
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(598736896)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(598736896)


[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#TextMorphTab) ...etc...
		morph: 	a PluggableTextMorph(598736896)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCategoryTarg...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyM...etc...
		index: 	4
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCatego...etc...
		firstIndex: 	1
		lastIndex: 	7


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#TextMorphTab) ...etc...
		morph: 	a PluggableTextMorph(598736896)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a PluggableTextMorph(598736896)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		targetToDispatch: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>do:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aBlock: 	[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstan...etc...
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
		chain: 	a KMDispatchChain
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a TextMorphForEditView(240386048)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(240386048)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (419@258)
		owner: 	a TransformMorph(531103744)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (419@258)
		color: 	Color black
		extension: 	a MorphExtension (295174144) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'sim arreterAffichage.
sim := SimulationBalleRebondissante new...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(598736896)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(240386048)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (419@258)
		owner: 	a TransformMorph(531103744)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (419@258)
		color: 	Color black
		extension: 	a MorphExtension (295174144) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'sim arreterAffichage.
sim := SimulationBalleRebondissante new...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(598736896)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-d>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(240386048)
	Receiver's instance variables: 
		timeStamp: 	7796618
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	(142.0@35.0)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	100
		charCode: 	100
		scanCode: 	2


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(240386048)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (419@258)
		owner: 	a TransformMorph(531103744)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (419@258)
		color: 	Color black
		extension: 	a MorphExtension (295174144) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'sim arreterAffichage.
sim := SimulationBalleRebondissante new...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(598736896)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(240386048)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (419@258)
		owner: 	a TransformMorph(531103744)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (419@258)
		color: 	Color black
		extension: 	a MorphExtension (295174144) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'sim arreterAffichage.
sim := SimulationBalleRebondissante new...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(598736896)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(240386048)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1235@128.0) corner: (1251@144.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1235@128.0) corner: (1251@144.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(240386048)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1243@137) mouseOver CTRL nil nil]
		targetOffset: 	(142.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7788951 1243 137 0 0 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #stop
SimulationBalleRebondissante(Simulation)>>arreterAffichage
UndefinedObject>>DoIt
OpalCompiler>>evaluate
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[ textMorph editor evaluateSelection ] in PluggableTextMorph>>doIt
[ result := editBlock value ] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
[ :morph | morph doIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: BalleRebondissante>>y
3 March 2015 6:09:55.484054 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

BalleRebondissante(Object)>>doesNotUnderstand: #y
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		aMessage: 	y
		exception: 	MessageNotUnderstood: BalleRebondissante>>y
		resumeValue: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>position:
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 
		nouvellePosition: 	a BalleRebondissante
		anciennePosition: 	nil
		evenement: 	nil
		positionMaxi: 	nil
	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante(BalleSimple)>>initialize
	Receiver: a BalleRebondissante
	Arguments and temporary variables: 

	Receiver's instance variables: 
		position: 	nil
		annonceur: 	nil
		vitesse: 	(0@ -1)


BalleRebondissante class(Behavior)>>new
	Receiver: BalleRebondissante
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	BalleSimple
		methodDict: 	a MethodDictionary(#rebondir->BalleRebondissante>>#rebondir #unPasD...etc...
		format: 	136
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	{BalleRealiste}
		name: 	#BalleRebondissante
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#SimulationBalle
		traitComposition: 	{}
		localSelectors: 	nil


SimulationBalleRebondissante(Simulation)>>initialize
	Receiver: a SimulationBalleRebondissante
	Arguments and temporary variables: 

	Receiver's instance variables: 
		balle: 	nil
		afficheur: 	nil
		thread: 	nil


SimulationBalleRebondissante class(Behavior)>>new
	Receiver: SimulationBalleRebondissante
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Simulation
		methodDict: 	a MethodDictionary(#classeBalle->SimulationBalleRebondissante>>#cla...etc...
		format: 	136
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SimulationBalleRebondissante
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#SimulationBalle
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'sim := SimulationBalleRebondissante new.'
		itsSelection: 	a Text for 'sim := SimulationBalleRebondissante new.'
		itsSelectionString: 	'sim := SimulationBalleRebondissante new.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ sim := SimulationBalleRebondissante new
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(240386048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(240386048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[ textMorph editor evaluateSelection ] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(598736896)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1097.0@101.0) corner: (1537.0@302.0)
		owner: 	a SystemWindow(495714304)
		submorphs: 	an Array(a ScrollBar(638582784) a TransformMorph(531103744))
		fullBounds: 	(1097@101) corner: (1537@302)
		color: 	Color white
		extension: 	a MorphExtension (219152384) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(638582784)
		scroller: 	a TransformMorph(531103744)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(554696704)
		textMorph: 	a TextMorphForEditView(240386048)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(44 to: 43)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


[ result := editBlock value ] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(598736896)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph editor evaluateSelection ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1097.0@101.0) corner: (1537.0@302.0)
		owner: 	a SystemWindow(495714304)
		submorphs: 	an Array(a ScrollBar(638582784) a TransformMorph(531103744))
		fullBounds: 	(1097@101) corner: (1537@302)
		color: 	Color white
		extension: 	a MorphExtension (219152384) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(638582784)
		scroller: 	a TransformMorph(531103744)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(554696704)
		textMorph: 	a TextMorphForEditView(240386048)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(44 to: 43)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(240386048)
	Arguments and temporary variables: 
		editBlock: 	[ result := editBlock value ]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (419@242)
		owner: 	a TransformMorph(531103744)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (419@242)
		color: 	Color black
		extension: 	a MorphExtension (295174144) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'sim arreterAffichage.
sim := SimulationBalleRebondissante new...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(598736896)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(598736896)
	Arguments and temporary variables: 
		result: 	nil
		editBlock: 	[ textMorph editor evaluateSelection ]
	Receiver's instance variables: 
		bounds: 	(1097.0@101.0) corner: (1537.0@302.0)
		owner: 	a SystemWindow(495714304)
		submorphs: 	an Array(a ScrollBar(638582784) a TransformMorph(531103744))
		fullBounds: 	(1097@101) corner: (1537@302)
		color: 	Color white
		extension: 	a MorphExtension (219152384) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(638582784)
		scroller: 	a TransformMorph(531103744)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(554696704)
		textMorph: 	a TextMorphForEditView(240386048)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(44 to: 43)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(598736896)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1097.0@101.0) corner: (1537.0@302.0)
		owner: 	a SystemWindow(495714304)
		submorphs: 	an Array(a ScrollBar(638582784) a TransformMorph(531103744))
		fullBounds: 	(1097@101) corner: (1537@302)
		color: 	Color white
		extension: 	a MorphExtension (219152384) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(638582784)
		scroller: 	a TransformMorph(531103744)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(554696704)
		textMorph: 	a TextMorphForEditView(240386048)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(44 to: 43)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


[ :morph | morph doIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: SmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		morph: 	a PluggableTextMorph(598736896)
	Receiver's instance variables: 
		superclass: 	TextEditor
		methodDict: 	a MethodDictionary(#argAdvance:->SmalltalkEditor>>#argAdvance: #bro...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SmalltalkEditor
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Text-Edition'
		traitComposition: 	{}
		localSelectors: 	nil
		cmdActions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop...etc...
		shiftCmdActions: 	#(#noop: #argAdvance: #noop: #compareToClipboard: #debugIt: #m...etc...


BlockClosure>>cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(598736896)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	157
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(598736896)
		secondArg: 	a PluggableTextMorph(598736896)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	157
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(598736896)
		secondArg: 	a PluggableTextMorph(598736896)
		thirdArg: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	157
		numArgs: 	1


KMCategoryBinding>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#doIt on Cmd + D do [ :morph | morph doIt ]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(598736896)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(598736896)


[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Cmd + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		l: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[ :l | l completeMatch: self buffer: aBuffer ]
		index: 	1
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Cmd + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #doIt on Cmd + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
		entry: 	#doIt on Cmd + D do [ :morph | morph doIt ]

	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


Set>>do:
	Receiver: a Set(#inspectIt on Cmd + I do [ :morph | morph inspectIt ]
 #sendersOfIt on Cmd + N do [ ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andD...etc...
		index: 	9
		each: 	#doIt on Cmd + D do [ :morph | morph doIt ]

	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(#inspectIt on Cmd + I do [ :morph | morph inspectIt ]
 #senders...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aListener: 	a KMDispatcher
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(598736896)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(598736896)


[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#TextMorphTab) ...etc...
		morph: 	a PluggableTextMorph(598736896)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCategoryTarg...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyM...etc...
		index: 	4
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCatego...etc...
		firstIndex: 	1
		lastIndex: 	7


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#TextMorphTab) ...etc...
		morph: 	a PluggableTextMorph(598736896)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a PluggableTextMorph(598736896)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		targetToDispatch: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>do:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aBlock: 	[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstan...etc...
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
		chain: 	a KMDispatchChain
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a TextMorphForEditView(240386048)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(240386048)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (419@242)
		owner: 	a TransformMorph(531103744)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (419@242)
		color: 	Color black
		extension: 	a MorphExtension (295174144) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'sim arreterAffichage.
sim := SimulationBalleRebondissante new...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(598736896)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(240386048)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (419@242)
		owner: 	a TransformMorph(531103744)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (419@242)
		color: 	Color black
		extension: 	a MorphExtension (295174144) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'sim arreterAffichage.
sim := SimulationBalleRebondissante new...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(598736896)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-d>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(240386048)
	Receiver's instance variables: 
		timeStamp: 	7897090
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	(-6.0@86.0)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	100
		charCode: 	100
		scanCode: 	2



--- The full stack ---
BalleRebondissante(Object)>>doesNotUnderstand: #y
BalleRebondissante(BalleSimple)>>position:
BalleRebondissante(BalleSimple)>>initialize
BalleRebondissante class(Behavior)>>new
SimulationBalleRebondissante(Simulation)>>initialize
SimulationBalleRebondissante class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[ textMorph editor evaluateSelection ] in PluggableTextMorph>>doIt
[ result := editBlock value ] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
[ :morph | morph doIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: SimulationBalleRebondissante>>reinitialiserSimulation
3 March 2015 6:14:40.115182 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

SimulationBalleRebondissante(Object)>>doesNotUnderstand: #reinitialiserSimulation
	Receiver: a SimulationBalleRebondissante
	Arguments and temporary variables: 
		aMessage: 	reinitialiserSimulation
		exception: 	MessageNotUnderstood: SimulationBalleRebondissante>>reinitialiserSim...etc...
		resumeValue: 	nil
	Receiver's instance variables: 
		balle: 	a BalleRebondissante
		afficheur: 	an AfficheurGraphiqueDeBalle
		thread: 	nil


SimulationBalleRebondissante(Simulation)>>initialize
	Receiver: a SimulationBalleRebondissante
	Arguments and temporary variables: 

	Receiver's instance variables: 
		balle: 	a BalleRebondissante
		afficheur: 	an AfficheurGraphiqueDeBalle
		thread: 	nil


SimulationBalleRebondissante class(Behavior)>>new
	Receiver: SimulationBalleRebondissante
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Simulation
		methodDict: 	a MethodDictionary(#classeBalle->SimulationBalleRebondissante>>#cla...etc...
		format: 	136
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SimulationBalleRebondissante
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#SimulationBalle
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'sim := SimulationBalleRebondissante new.'
		itsSelection: 	a Text for 'sim := SimulationBalleRebondissante new.'
		itsSelectionString: 	'sim := SimulationBalleRebondissante new.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ sim := SimulationBalleRebondissante new
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(240386048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(240386048)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[ textMorph editor evaluateSelection ] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(598736896)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1097.0@101.0) corner: (1537.0@302.0)
		owner: 	a SystemWindow(495714304)
		submorphs: 	an Array(a ScrollBar(638582784) a TransformMorph(531103744))
		fullBounds: 	(1097@101) corner: (1537@302)
		color: 	Color white
		extension: 	a MorphExtension (219152384) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(638582784)
		scroller: 	a TransformMorph(531103744)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(554696704)
		textMorph: 	a TextMorphForEditView(240386048)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(49 to: 48)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


[ result := editBlock value ] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(598736896)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph editor evaluateSelection ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1097.0@101.0) corner: (1537.0@302.0)
		owner: 	a SystemWindow(495714304)
		submorphs: 	an Array(a ScrollBar(638582784) a TransformMorph(531103744))
		fullBounds: 	(1097@101) corner: (1537@302)
		color: 	Color white
		extension: 	a MorphExtension (219152384) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(638582784)
		scroller: 	a TransformMorph(531103744)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(554696704)
		textMorph: 	a TextMorphForEditView(240386048)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(49 to: 48)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(240386048)
	Arguments and temporary variables: 
		editBlock: 	[ result := editBlock value ]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (419@242)
		owner: 	a TransformMorph(531103744)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (419@242)
		color: 	Color black
		extension: 	a MorphExtension (295174144) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'sim arreterAffichage.
sim := SimulationBalleRebondissante new...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(598736896)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(598736896)
	Arguments and temporary variables: 
		result: 	nil
		editBlock: 	[ textMorph editor evaluateSelection ]
	Receiver's instance variables: 
		bounds: 	(1097.0@101.0) corner: (1537.0@302.0)
		owner: 	a SystemWindow(495714304)
		submorphs: 	an Array(a ScrollBar(638582784) a TransformMorph(531103744))
		fullBounds: 	(1097@101) corner: (1537@302)
		color: 	Color white
		extension: 	a MorphExtension (219152384) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(638582784)
		scroller: 	a TransformMorph(531103744)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(554696704)
		textMorph: 	a TextMorphForEditView(240386048)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(49 to: 48)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(598736896)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1097.0@101.0) corner: (1537.0@302.0)
		owner: 	a SystemWindow(495714304)
		submorphs: 	an Array(a ScrollBar(638582784) a TransformMorph(531103744))
		fullBounds: 	(1097@101) corner: (1537@302)
		color: 	Color white
		extension: 	a MorphExtension (219152384) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(638582784)
		scroller: 	a TransformMorph(531103744)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(554696704)
		textMorph: 	a TextMorphForEditView(240386048)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(49 to: 48)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


[ :morph | morph doIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: SmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		morph: 	a PluggableTextMorph(598736896)
	Receiver's instance variables: 
		superclass: 	TextEditor
		methodDict: 	a MethodDictionary(#argAdvance:->SmalltalkEditor>>#argAdvance: #bro...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SmalltalkEditor
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Text-Edition'
		traitComposition: 	{}
		localSelectors: 	nil
		cmdActions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop...etc...
		shiftCmdActions: 	#(#noop: #argAdvance: #noop: #compareToClipboard: #debugIt: #m...etc...


BlockClosure>>cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(598736896)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	157
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(598736896)
		secondArg: 	a PluggableTextMorph(598736896)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	157
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(598736896)
		secondArg: 	a PluggableTextMorph(598736896)
		thirdArg: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	157
		numArgs: 	1


KMCategoryBinding>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#doIt on Cmd + D do [ :morph | morph doIt ]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(598736896)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(598736896)


[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Cmd + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		l: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[ :l | l completeMatch: self buffer: aBuffer ]
		index: 	1
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Cmd + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #doIt on Cmd + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
		entry: 	#doIt on Cmd + D do [ :morph | morph doIt ]

	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


Set>>do:
	Receiver: a Set(#inspectIt on Cmd + I do [ :morph | morph inspectIt ]
 #sendersOfIt on Cmd + N do [ ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andD...etc...
		index: 	9
		each: 	#doIt on Cmd + D do [ :morph | morph doIt ]

	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(#inspectIt on Cmd + I do [ :morph | morph inspectIt ]
 #senders...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aListener: 	a KMDispatcher
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(598736896)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(598736896)


[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#TextMorphTab) ...etc...
		morph: 	a PluggableTextMorph(598736896)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCategoryTarg...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyM...etc...
		index: 	4
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCatego...etc...
		firstIndex: 	1
		lastIndex: 	7


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#TextMorphTab) ...etc...
		morph: 	a PluggableTextMorph(598736896)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a PluggableTextMorph(598736896)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		targetToDispatch: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>do:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aBlock: 	[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstan...etc...
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
		chain: 	a KMDispatchChain
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a TextMorphForEditView(240386048)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(240386048)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (419@242)
		owner: 	a TransformMorph(531103744)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (419@242)
		color: 	Color black
		extension: 	a MorphExtension (295174144) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'sim arreterAffichage.
sim := SimulationBalleRebondissante new...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(598736896)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(240386048)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (419@242)
		owner: 	a TransformMorph(531103744)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (419@242)
		color: 	Color black
		extension: 	a MorphExtension (295174144) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'sim arreterAffichage.
sim := SimulationBalleRebondissante new...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(598736896)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-d>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(240386048)
	Receiver's instance variables: 
		timeStamp: 	8181698
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	(165.0@27.0)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	100
		charCode: 	100
		scanCode: 	2


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(240386048)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (419@242)
		owner: 	a TransformMorph(531103744)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (419@242)
		color: 	Color black
		extension: 	a MorphExtension (295174144) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'sim arreterAffichage.
sim := SimulationBalleRebondissante new...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(598736896)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(240386048)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (419@242)
		owner: 	a TransformMorph(531103744)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (419@242)
		color: 	Color black
		extension: 	a MorphExtension (295174144) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'sim arreterAffichage.
sim := SimulationBalleRebondissante new...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(598736896)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(240386048)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1258@120.0) corner: (1274@136.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1258@120.0) corner: (1274@136.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(240386048)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1266@129) mouseOver nil nil]
		targetOffset: 	(165.0@27.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8181347 1266 129 0 0 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8



--- The full stack ---
SimulationBalleRebondissante(Object)>>doesNotUnderstand: #reinitialiserSimulation
SimulationBalleRebondissante(Simulation)>>initialize
SimulationBalleRebondissante class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[ textMorph editor evaluateSelection ] in PluggableTextMorph>>doIt
[ result := editBlock value ] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
[ :morph | morph doIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: SimulationPlusieursBalles class>>nombreBalles
3 March 2015 7:01:56.361406 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

SimulationPlusieursBalles class(Object)>>doesNotUnderstand: #nombreBalles
	Receiver: SimulationPlusieursBalles
	Arguments and temporary variables: 
		aMessage: 	nombreBalles
		exception: 	MessageNotUnderstood: SimulationPlusieursBalles class>>nombreBalles
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#arreterAffichage->SimulationPlusieursBalles>>#a...etc...
		format: 	136
		layout: 	a FixedLayout
		instanceVariables: 	#(#balles #afficheurs #thread)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SimulationPlusieursBalles
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#SimulationBalle
		traitComposition: 	{}
		localSelectors: 	nil


SimulationPlusieursBalles class>>DoIt
	Receiver: SimulationPlusieursBalles
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#arreterAffichage->SimulationPlusieursBalles>>#a...etc...
		format: 	136
		layout: 	a FixedLayout
		instanceVariables: 	#(#balles #afficheurs #thread)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SimulationPlusieursBalles
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#SimulationBalle
		traitComposition: 	{}
		localSelectors: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'100//self nombreBalles'
		itsSelection: 	a Text for '100//self nombreBalles'
		itsSelectionString: 	'100//self nombreBalles'
	Receiver's instance variables: 
		ast: 	DoIt
	^ 100 // self nombreBalles
		source: 	a ReadStream
		context: 	nil
		receiver: 	SimulationPlusieursBalles
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
printString := [ result printString ]
	on: Error
	do: [ '<...etc...
		result: 	nil
		rcvr: 	SimulationPlusieursBalles
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(215482368)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


[ 
(oldEditor := textMorph editor)
	evaluateSelectionAndDo: [ :result | 
		printString := [ result printString ]
			on: Error
			do: [ '<error in printString: try ''Inspect it'' to debug>' ].
		selectionInterval := oldEditor selectionInterval.
		textMorph installEditorToReplace: oldEditor.
		textMorph handleEdit: [ oldEditor afterSelectionInsertAndSelect: printString ].
		selectionInterval := oldEditor selectionInterval.
		textMorph editor selectFrom: selectionInterval first to: selectionInterval last.
		self scrollSelectionIntoView ] ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>printIt
	Receiver: a PluggableTextMorphWithLimits(327155712)
	Arguments and temporary variables: 
		oldEditor: 	a SmalltalkEditor
		printString: 	nil
	Receiver's instance variables: 
		bounds: 	(259.0@474.0) corner: (1075.0@751.0)
		owner: 	a MultipleMethodsEditor(895746048)
		submorphs: 	an Array(an AlphaImageMorph(301989888) a TransformMorph(851181568))
		fullBounds: 	(259@474) corner: (1075@751)
		color: 	Color white
		extension: 	a MorphExtension (182190080) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(374865920)
		scroller: 	a TransformMorph(851181568)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(84410368)
		textMorph: 	a TextMorphForEditView(215482368)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(41 to: 62)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(301989888)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(215482368)
	Arguments and temporary variables: 
		editBlock: 	[ 
(oldEditor := textMorph editor)
	evaluateSelectionAndDo: [ :resul...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (808@98)
		owner: 	a TransformMorph(851181568)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (808@98)
		color: 	Color black
		extension: 	a MorphExtension (282329088) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'boucleSimulation
	|attente|
	attente := 100//self nombreBalle...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	a TextColor code: (Color r: 0.0 g: 0.0 b: 0.5 alpha: 1.0)
		editView: 	a PluggableTextMorphWithLimits(327155712)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorphWithLimits(PluggableTextMorph)>>printIt
	Receiver: a PluggableTextMorphWithLimits(327155712)
	Arguments and temporary variables: 
		oldEditor: 	a SmalltalkEditor
		printString: 	nil
	Receiver's instance variables: 
		bounds: 	(259.0@474.0) corner: (1075.0@751.0)
		owner: 	a MultipleMethodsEditor(895746048)
		submorphs: 	an Array(an AlphaImageMorph(301989888) a TransformMorph(851181568))
		fullBounds: 	(259@474) corner: (1075@751)
		color: 	Color white
		extension: 	a MorphExtension (182190080) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(374865920)
		scroller: 	a TransformMorph(851181568)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(84410368)
		textMorph: 	a TextMorphForEditView(215482368)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(41 to: 62)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(301989888)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


[ :morph | morph printIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: SmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		morph: 	a PluggableTextMorphWithLimits(327155712)
	Receiver's instance variables: 
		superclass: 	TextEditor
		methodDict: 	a MethodDictionary(#argAdvance:->SmalltalkEditor>>#argAdvance: #bro...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SmalltalkEditor
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Text-Edition'
		traitComposition: 	{}
		localSelectors: 	nil
		cmdActions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop...etc...
		shiftCmdActions: 	#(#noop: #argAdvance: #noop: #compareToClipboard: #debugIt: #m...etc...


BlockClosure>>cull:
	Receiver: [ :morph | morph printIt ]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorphWithLimits(327155712)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	277
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :morph | morph printIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorphWithLimits(327155712)
		secondArg: 	a PluggableTextMorphWithLimits(327155712)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	277
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [ :morph | morph printIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorphWithLimits(327155712)
		secondArg: 	a PluggableTextMorphWithLimits(327155712)
		thirdArg: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	277
		numArgs: 	1


KMCategoryBinding>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#printIt on Cmd + P do [ :morph | morph printIt ]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorphWithLimits(327155712)
		category: 	a KMCategory
		morph: 	a PluggableTextMorphWithLimits(327155712)


[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #printIt on Cmd + P do [ :morph | morph printIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		l: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		action: 	[ :morph | morph printIt ]
		name: 	#printIt
		shortcut: 	Cmd + P
		defaultShortcut: 	Cmd + P
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[ :l | l completeMatch: self buffer: aBuffer ]
		index: 	1
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #printIt on Cmd + P do [ :morph | morph printIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[ :morph | morph printIt ]
		name: 	#printIt
		shortcut: 	Cmd + P
		defaultShortcut: 	Cmd + P
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #printIt on Cmd + P do [ :morph | morph printIt ]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		action: 	[ :morph | morph printIt ]
		name: 	#printIt
		shortcut: 	Cmd + P
		defaultShortcut: 	Cmd + P
		description: 	''


[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
		entry: 	#printIt on Cmd + P do [ :morph | morph printIt ]

	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


Set>>do:
	Receiver: a Set(#inspectIt on Cmd + I do [ :morph | morph inspectIt ]
 #sendersOfIt on Cmd + N do [ ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andD...etc...
		index: 	5
		each: 	#printIt on Cmd + P do [ :morph | morph printIt ]

	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(#inspectIt on Cmd + I do [ :morph | morph inspectIt ]
 #senders...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		aListener: 	a KMDispatcher
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		target: 	a PluggableTextMorphWithLimits(327155712)
		category: 	a KMCategory
		morph: 	a PluggableTextMorphWithLimits(327155712)


[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#ScrollPane) aK...etc...
		morph: 	a PluggableTextMorphWithLimits(327155712)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCategoryTarg...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyM...etc...
		index: 	4
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCatego...etc...
		firstIndex: 	1
		lastIndex: 	8


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#ScrollPane) aK...etc...
		morph: 	a PluggableTextMorphWithLimits(327155712)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a PluggableTextMorphWithLimits(327155712)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
		targetToDispatch: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>do:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aBlock: 	[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstan...etc...
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-p>']
		chain: 	a KMDispatchChain
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextMorph) aKMCategoryTarget(#MorphFocusCtrlN...etc...
		morph: 	a TextMorphForEditView(215482368)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(215482368)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (808@98)
		owner: 	a TransformMorph(851181568)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (808@98)
		color: 	Color black
		extension: 	a MorphExtension (282329088) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'boucleSimulation
	|attente|
	attente := 100//self nombreBalle...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	a TextColor code: (Color r: 0.0 g: 0.0 b: 0.5 alpha: 1.0)
		editView: 	a PluggableTextMorphWithLimits(327155712)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(215482368)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (808@98)
		owner: 	a TransformMorph(851181568)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (808@98)
		color: 	Color black
		extension: 	a MorphExtension (282329088) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'boucleSimulation
	|attente|
	attente := 100//self nombreBalle...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	a TextColor code: (Color r: 0.0 g: 0.0 b: 0.5 alpha: 1.0)
		editView: 	a PluggableTextMorphWithLimits(327155712)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-p>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(215482368)
	Receiver's instance variables: 
		timeStamp: 	152007
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	(231.0@43.0)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	112
		scanCode: 	35


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(215482368)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (808@98)
		owner: 	a TransformMorph(851181568)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (808@98)
		color: 	Color black
		extension: 	a MorphExtension (282329088) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'boucleSimulation
	|attente|
	attente := 100//self nombreBalle...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	a TextColor code: (Color r: 0.0 g: 0.0 b: 0.5 alpha: 1.0)
		editView: 	a PluggableTextMorphWithLimits(327155712)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(215482368)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (808@98)
		owner: 	a TransformMorph(851181568)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (808@98)
		color: 	Color black
		extension: 	a MorphExtension (282329088) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'boucleSimulation
	|attente|
	attente := 100//self nombreBalle...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	a TextColor code: (Color r: 0.0 g: 0.0 b: 0.5 alpha: 1.0)
		editView: 	a PluggableTextMorphWithLimits(327155712)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(215482368)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(486@509.0) corner: (502@525.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(486@509.0) corner: (502@525.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(215482368)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(494@518) mouseOver nil nil]
		targetOffset: 	(89.0@40.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 151377 494 518 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1150)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a NautilusWindow(302252032) an El...etc...
		fullBounds: 	(0@0) corner: (1920@1150)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.063 g: 0.063 b: 0.063 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(215482368)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(486@509.0) corner: (502@525.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(486@509.0) corner: (502@525.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(215482368)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(494@518) mouseOver nil nil]
		targetOffset: 	(89.0@40.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 151377 494 518 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(215482368)
		aBlock: 	[ self keyboardFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(486@509.0) corner: (502@525.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(486@509.0) corner: (502@525.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(215482368)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(494@518) mouseOver nil nil]
		targetOffset: 	(89.0@40.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 151377 494 518 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	(486@509.0) corner: (502@525.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(486@509.0) corner: (502@525.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(215482368)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(494@518) mouseOver nil nil]
		targetOffset: 	(89.0@40.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 151377 494 518 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8



--- The full stack ---
SimulationPlusieursBalles class(Object)>>doesNotUnderstand: #nombreBalles
SimulationPlusieursBalles class>>DoIt
OpalCompiler>>evaluate
SmalltalkEditor>>evaluateSelectionAndDo:
[ 
(oldEditor := textMorph editor)
	evaluateSelectionAndDo: [ :result | 
		printString := [ result printString ]
			on: Error
			do: [ '<error in printString: try ''Inspect it'' to debug>' ].
		selectionInterval := oldEditor selectionInterval.
		textMorph installEditorToReplace: oldEditor.
		textMorph handleEdit: [ oldEditor afterSelectionInsertAndSelect: printString ].
		selectionInterval := oldEditor selectionInterval.
		textMorph editor selectFrom: selectionInterval first to: selectionInterval last.
		self scrollSelectionIntoView ] ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>printIt
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorphWithLimits(PluggableTextMorph)>>printIt
[ :morph | morph printIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Delay>>adaptToNumber:andSend:
3 March 2015 7:02:12.26168 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

Delay(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
	Receiver: a Delay(50 msecs)
	Arguments and temporary variables: 
		aMessage: 	adaptToNumber: 100 andSend: #quo:
		exception: 	MessageNotUnderstood: Delay>>adaptToNumber:andSend:
		resumeValue: 	nil
	Receiver's instance variables: 
		delayDuration: 	50
		resumptionTime: 	nil
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	false


Delay(Object)>>adaptToInteger:andSend:
	Receiver: a Delay(50 msecs)
	Arguments and temporary variables: 
		rcvr: 	100
		selector: 	#quo:
	Receiver's instance variables: 
		delayDuration: 	50
		resumptionTime: 	nil
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	false


SmallInteger(Integer)>>quo:
	Receiver: 100
	Arguments and temporary variables: 
		aNumber: 	a Delay(50 msecs)
		ng: 	nil
		quo: 	nil
	Receiver's instance variables: 
100

SmallInteger>>quo:
	Receiver: 100
	Arguments and temporary variables: 
		aNumber: 	a Delay(50 msecs)
	Receiver's instance variables: 
100

SmallInteger(Integer)>>//
	Receiver: 100
	Arguments and temporary variables: 
		aNumber: 	a Delay(50 msecs)
		q: 	nil
	Receiver's instance variables: 
100

SmallInteger>>//
	Receiver: 100
	Arguments and temporary variables: 
		aNumber: 	a Delay(50 msecs)
	Receiver's instance variables: 
100

SimulationPlusieursBalles>>boucleSimulation
	Receiver: a SimulationPlusieursBalles
	Arguments and temporary variables: 
		attente: 	nil
	Receiver's instance variables: 
		balles: 	a Set(a BalleRebondissante a BalleRebondissante a BalleRebondissante a ...etc...
		afficheurs: 	a Set(an AfficheurGraphiqueDeBalle an AfficheurGraphiqueDeBalle an ...etc...
		thread: 	a Process in nil


[ self boucleSimulation ] in SimulationPlusieursBalles>>lancerSimulation
	Receiver: a SimulationPlusieursBalles
	Arguments and temporary variables: 

	Receiver's instance variables: 
		balles: 	a Set(a BalleRebondissante a BalleRebondissante a BalleRebondissante a ...etc...
		afficheurs: 	a Set(an AfficheurGraphiqueDeBalle an AfficheurGraphiqueDeBalle an ...etc...
		thread: 	a Process in nil


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ self boucleSimulation ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SimulationPlusieursBalles>>lancerSimulation
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Delay(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
Delay(Object)>>adaptToInteger:andSend:
SmallInteger(Integer)>>quo:
SmallInteger>>quo:
SmallInteger(Integer)>>//
SmallInteger>>//
SimulationPlusieursBalles>>boucleSimulation
[ self boucleSimulation ] in SimulationPlusieursBalles>>lancerSimulation
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: MaStringDisplay>>content:
6 March 2015 5:37:28.278863 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

MaStringDisplay(Object)>>doesNotUnderstand: #content:
	Receiver: a MaStringDisplay
	Arguments and temporary variables: 
		aMessage: 	content: '00:31'
		exception: 	MessageNotUnderstood: MaStringDisplay>>content:
		resumeValue: 	nil
	Receiver's instance variables: 
		stringMorph: 	a StringMorph(382992384)'Some Text'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'd content: ''00:31'''
		itsSelection: 	a Text for 'd content: ''00:31'''
		itsSelectionString: 	'd content: ''00:31'''
	Receiver's instance variables: 
		ast: 	DoIt
	^ d content: '00:31'
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(728760320)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(728760320)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[ textMorph editor evaluateSelection ] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(448790528)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(493.0@133.0) corner: (933.0@300.0)
		owner: 	a SystemWindow(879493120)
		submorphs: 	an Array(a TransformMorph(206307328))
		fullBounds: 	(493@133) corner: (933@300)
		color: 	Color white
		extension: 	a MorphExtension (707526656) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(488636416)
		scroller: 	a TransformMorph(206307328)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(320339968)
		textMorph: 	a TextMorphForEditView(728760320)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(47 to: 46)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


[ result := editBlock value ] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(448790528)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph editor evaluateSelection ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(493.0@133.0) corner: (933.0@300.0)
		owner: 	a SystemWindow(879493120)
		submorphs: 	an Array(a TransformMorph(206307328))
		fullBounds: 	(493@133) corner: (933@300)
		color: 	Color white
		extension: 	a MorphExtension (707526656) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(488636416)
		scroller: 	a TransformMorph(206307328)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(320339968)
		textMorph: 	a TextMorphForEditView(728760320)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(47 to: 46)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(728760320)
	Arguments and temporary variables: 
		editBlock: 	[ result := editBlock value ]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@34)
		owner: 	a TransformMorph(206307328)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@34)
		color: 	Color black
		extension: 	a MorphExtension (783548416) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'd := MaStringDisplay start.
d content: ''00:31'''
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(448790528)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(448790528)
	Arguments and temporary variables: 
		result: 	nil
		editBlock: 	[ textMorph editor evaluateSelection ]
	Receiver's instance variables: 
		bounds: 	(493.0@133.0) corner: (933.0@300.0)
		owner: 	a SystemWindow(879493120)
		submorphs: 	an Array(a TransformMorph(206307328))
		fullBounds: 	(493@133) corner: (933@300)
		color: 	Color white
		extension: 	a MorphExtension (707526656) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(488636416)
		scroller: 	a TransformMorph(206307328)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(320339968)
		textMorph: 	a TextMorphForEditView(728760320)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(47 to: 46)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(448790528)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(493.0@133.0) corner: (933.0@300.0)
		owner: 	a SystemWindow(879493120)
		submorphs: 	an Array(a TransformMorph(206307328))
		fullBounds: 	(493@133) corner: (933@300)
		color: 	Color white
		extension: 	a MorphExtension (707526656) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(488636416)
		scroller: 	a TransformMorph(206307328)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(320339968)
		textMorph: 	a TextMorphForEditView(728760320)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(47 to: 46)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


[ :morph | morph doIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: SmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		morph: 	a PluggableTextMorph(448790528)
	Receiver's instance variables: 
		superclass: 	TextEditor
		methodDict: 	a MethodDictionary(#argAdvance:->SmalltalkEditor>>#argAdvance: #bro...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SmalltalkEditor
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Text-Edition'
		traitComposition: 	{}
		localSelectors: 	nil
		cmdActions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop...etc...
		shiftCmdActions: 	#(#noop: #argAdvance: #noop: #compareToClipboard: #debugIt: #m...etc...


BlockClosure>>cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(448790528)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	157
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(448790528)
		secondArg: 	a PluggableTextMorph(448790528)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	157
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(448790528)
		secondArg: 	a PluggableTextMorph(448790528)
		thirdArg: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	157
		numArgs: 	1


KMCategoryBinding>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#doIt on Cmd + D do [ :morph | morph doIt ]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(448790528)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(448790528)


[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Cmd + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		l: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[ :l | l completeMatch: self buffer: aBuffer ]
		index: 	1
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Cmd + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #doIt on Cmd + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
		entry: 	#doIt on Cmd + D do [ :morph | morph doIt ]

	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


Set>>do:
	Receiver: a Set(#inspectIt on Cmd + I do [ :morph | morph inspectIt ]
 #sendersOfIt on Cmd + N do [ ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andD...etc...
		index: 	9
		each: 	#doIt on Cmd + D do [ :morph | morph doIt ]

	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(#inspectIt on Cmd + I do [ :morph | morph inspectIt ]
 #senders...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aListener: 	a KMDispatcher
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(448790528)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(448790528)


[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a PluggableTextMorph(448790528)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#MorphFocusCtrlNavigation) a...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyM...etc...
		index: 	7
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#MorphFocusCtrlNavigat...etc...
		firstIndex: 	1
		lastIndex: 	7


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a PluggableTextMorph(448790528)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a PluggableTextMorph(448790528)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		targetToDispatch: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>do:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aBlock: 	[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstan...etc...
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
		chain: 	a KMDispatchChain
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a TextMorphForEditView(728760320)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(728760320)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@34)
		owner: 	a TransformMorph(206307328)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@34)
		color: 	Color black
		extension: 	a MorphExtension (783548416) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'd := MaStringDisplay start.
d content: ''00:31'''
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(448790528)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(728760320)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@34)
		owner: 	a TransformMorph(206307328)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@34)
		color: 	Color black
		extension: 	a MorphExtension (783548416) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'd := MaStringDisplay start.
d content: ''00:31'''
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(448790528)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-d>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(728760320)
	Receiver's instance variables: 
		timeStamp: 	1636195
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	(169@8.0)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	100
		charCode: 	100
		scanCode: 	2


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(728760320)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@34)
		owner: 	a TransformMorph(206307328)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@34)
		color: 	Color black
		extension: 	a MorphExtension (783548416) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'd := MaStringDisplay start.
d content: ''00:31'''
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(448790528)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(728760320)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@34)
		owner: 	a TransformMorph(206307328)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@34)
		color: 	Color black
		extension: 	a MorphExtension (783548416) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'd := MaStringDisplay start.
d content: ''00:31'''
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(448790528)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(728760320)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(658@133.0) corner: (674@149.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(658@133.0) corner: (674@149.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(728760320)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(666@142) mouseOver nil nil]
		targetOffset: 	(169@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1621663 666 142 0 0 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@814)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(879493120) a Syste...etc...
		fullBounds: 	(0@0) corner: (1440@814)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.063 g: 0.063 b: 0.063 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil



--- The full stack ---
MaStringDisplay(Object)>>doesNotUnderstand: #content:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[ textMorph editor evaluateSelection ] in PluggableTextMorph>>doIt
[ result := editBlock value ] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
[ :morph | morph doIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Escargot>>energie
6 March 2015 5:43:23.242094 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

Escargot(Object)>>doesNotUnderstand: #energie
	Receiver: an Escargot
	Arguments and temporary variables: 
		aMessage: 	energie
		exception: 	MessageNotUnderstood: Escargot>>energie
		resumeValue: 	nil
	Receiver's instance variables: 
		position: 	nil
		energie: 	nil
		annonceur: 	nil


[ :ignore | Escargot new energie ] in TestEscargot>>testNiveauEnergieInitialArbitraire
	Receiver: TestEscargot>>#testNiveauEnergieInitialArbitraire
	Arguments and temporary variables: 
		energiesInitiales: 	nil
		ignore: 	1
	Receiver's instance variables: 
		testSelector: 	#testNiveauEnergieInitialArbitraire
		expectedFails: 	nil
		escargot: 	an Escargot


Interval>>collect:
	Receiver: (1 to: 20)
	Arguments and temporary variables: 
		aBlock: 	[ :ignore | Escargot new energie ]
		nextValue: 	1
		result: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil n...etc...
		i: 	1
	Receiver's instance variables: 
		start: 	1
		stop: 	20
		step: 	1


TestEscargot>>testNiveauEnergieInitialArbitraire
	Receiver: TestEscargot>>#testNiveauEnergieInitialArbitraire
	Arguments and temporary variables: 
		energiesInitiales: 	nil
	Receiver's instance variables: 
		testSelector: 	#testNiveauEnergieInitialArbitraire
		expectedFails: 	nil
		escargot: 	an Escargot


TestEscargot(TestCase)>>performTest
	Receiver: TestEscargot>>#testNiveauEnergieInitialArbitraire
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testNiveauEnergieInitialArbitraire
		expectedFails: 	nil
		escargot: 	an Escargot


[ 
self setUp.
self performTest ] in TestEscargot(TestCase)>>runCase
	Receiver: TestEscargot>>#testNiveauEnergieInitialArbitraire
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testNiveauEnergieInitialArbitraire
		expectedFails: 	nil
		escargot: 	an Escargot


BlockClosure>>ensure:
	Receiver: [ 
self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestEscargot(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


TestEscargot(TestCase)>>runCase
	Receiver: TestEscargot>>#testNiveauEnergieInitialArbitraire
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testNiveauEnergieInitialArbitraire
		expectedFails: 	nil
		escargot: 	an Escargot


[ (self class selector: testSelector) runCase ] in TestEscargot(TestCase)>>debug
	Receiver: TestEscargot>>#testNiveauEnergieInitialArbitraire
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testNiveauEnergieInitialArbitraire
		expectedFails: 	nil
		escargot: 	nil


BlockClosure>>ensure:
	Receiver: [ (self class selector: testSelector) runCase ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestEscargot(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


TestEscargot(TestCase)>>debug
	Receiver: TestEscargot>>#testNiveauEnergieInitialArbitraire
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testNiveauEnergieInitialArbitraire
		expectedFails: 	nil
		escargot: 	nil


TestEscargot class(TestCase class)>>debug:
	Receiver: TestEscargot
	Arguments and temporary variables: 
		aSymbol: 	#testNiveauEnergieInitialArbitraire
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#setUp->TestEscargot>>#setUp #testNiveauEnergieI...etc...
		format: 	136
		layout: 	a FixedLayout
		instanceVariables: 	#(#escargot)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#TestEscargot
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#CourseEscargots
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#testNiveauEnergieInitialArbitraire) #fail...etc...
		escargot: 	an Escargot


[ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(369098752)
		hierarchyClass: 	TestEscargot
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(175898624)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(a PackageTreePackageSelection->true a RPackage(...etc...
		classesSelection: 	a Dictionary(TestEscargot->true )
		list: 	a MorphTreeMorph(470024192)
		list2: 	a PluggableIconListMorph(638582784)
		sourceCodePanel: 	a PanelMorph(14155776)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(939786240)
		list2Elements: 	{AfficheurEscargot. Escargot. TestEscargot}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(175898624)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(653262848)
		contentSelection: 	nil
		acceptor: 	a MethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(318504960)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := tes...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:pr...etc...
		startpc: 	236
		numArgs: 	0



--- The full stack ---
Escargot(Object)>>doesNotUnderstand: #energie
[ :ignore | Escargot new energie ] in TestEscargot>>testNiveauEnergieInitialArbitraire
Interval>>collect:
TestEscargot>>testNiveauEnergieInitialArbitraire
TestEscargot(TestCase)>>performTest
[ 
self setUp.
self performTest ] in TestEscargot(TestCase)>>runCase
BlockClosure>>ensure:
TestEscargot(TestCase)>>runCase
[ (self class selector: testSelector) runCase ] in TestEscargot(TestCase)>>debug
BlockClosure>>ensure:
TestEscargot(TestCase)>>debug
TestEscargot class(TestCase class)>>debug:
[ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
6 March 2015 5:43:35.323196 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

TestEscargot(TestAsserter)>>assert:
	Receiver: TestEscargot>>#testNiveauEnergieInitialArbitraire
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#testNiveauEnergieInitialArbitraire
		expectedFails: 	nil
		escargot: 	an Escargot


TestEscargot>>testNiveauEnergieInitialArbitraire
	Receiver: TestEscargot>>#testNiveauEnergieInitialArbitraire
	Arguments and temporary variables: 
		energiesInitiales: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil ni...etc...
	Receiver's instance variables: 
		testSelector: 	#testNiveauEnergieInitialArbitraire
		expectedFails: 	nil
		escargot: 	an Escargot


TestEscargot(TestCase)>>performTest
	Receiver: TestEscargot>>#testNiveauEnergieInitialArbitraire
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testNiveauEnergieInitialArbitraire
		expectedFails: 	nil
		escargot: 	an Escargot


[ 
self setUp.
self performTest ] in TestEscargot(TestCase)>>runCase
	Receiver: TestEscargot>>#testNiveauEnergieInitialArbitraire
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testNiveauEnergieInitialArbitraire
		expectedFails: 	nil
		escargot: 	an Escargot


BlockClosure>>ensure:
	Receiver: [ 
self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestEscargot(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


TestEscargot(TestCase)>>runCase
	Receiver: TestEscargot>>#testNiveauEnergieInitialArbitraire
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testNiveauEnergieInitialArbitraire
		expectedFails: 	nil
		escargot: 	an Escargot


[ (self class selector: testSelector) runCase ] in TestEscargot(TestCase)>>debug
	Receiver: TestEscargot>>#testNiveauEnergieInitialArbitraire
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testNiveauEnergieInitialArbitraire
		expectedFails: 	nil
		escargot: 	nil


BlockClosure>>ensure:
	Receiver: [ (self class selector: testSelector) runCase ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestEscargot(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


TestEscargot(TestCase)>>debug
	Receiver: TestEscargot>>#testNiveauEnergieInitialArbitraire
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testNiveauEnergieInitialArbitraire
		expectedFails: 	nil
		escargot: 	nil


TestEscargot class(TestCase class)>>debug:
	Receiver: TestEscargot
	Arguments and temporary variables: 
		aSymbol: 	#testNiveauEnergieInitialArbitraire
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#setUp->TestEscargot>>#setUp #testNiveauEnergieI...etc...
		format: 	136
		layout: 	a FixedLayout
		instanceVariables: 	#(#escargot)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#TestEscargot
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#CourseEscargots
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#testNiveauEnergieInitialArbitraire) #fail...etc...
		escargot: 	an Escargot


[ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(369098752)
		hierarchyClass: 	TestEscargot
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(175898624)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(a PackageTreePackageSelection->true a RPackage(...etc...
		classesSelection: 	a Dictionary(TestEscargot->true )
		list: 	a MorphTreeMorph(470024192)
		list2: 	a PluggableIconListMorph(638582784)
		sourceCodePanel: 	a PanelMorph(14155776)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(939786240)
		list2Elements: 	{AfficheurEscargot. Escargot. TestEscargot}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(175898624)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(653262848)
		contentSelection: 	nil
		acceptor: 	a MethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(318504960)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := tes...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:pr...etc...
		startpc: 	236
		numArgs: 	0



--- The full stack ---
TestEscargot(TestAsserter)>>assert:
TestEscargot>>testNiveauEnergieInitialArbitraire
TestEscargot(TestCase)>>performTest
[ 
self setUp.
self performTest ] in TestEscargot(TestCase)>>runCase
BlockClosure>>ensure:
TestEscargot(TestCase)>>runCase
[ (self class selector: testSelector) runCase ] in TestEscargot(TestCase)>>debug
BlockClosure>>ensure:
TestEscargot(TestCase)>>debug
TestEscargot class(TestCase class)>>debug:
[ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Escargot>>position:
6 March 2015 5:56:23.176719 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

Escargot(Object)>>doesNotUnderstand: #position:
	Receiver: an Escargot
	Arguments and temporary variables: 
		aMessage: 	position: (0@0)
		exception: 	MessageNotUnderstood: Escargot>>position:
		resumeValue: 	nil
	Receiver's instance variables: 
		position: 	nil
		energie: 	8
		annonceur: 	nil


TestEscargot>>testXPositionIcrementeQuandEscargotAvanceDUnPas
	Receiver: TestEscargot>>#testXPositionIcrementeQuandEscargotAvanceDUnPas
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testXPositionIcrementeQuandEscargotAvanceDUnPas
		expectedFails: 	nil
		escargot: 	an Escargot


TestEscargot(TestCase)>>performTest
	Receiver: TestEscargot>>#testXPositionIcrementeQuandEscargotAvanceDUnPas
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testXPositionIcrementeQuandEscargotAvanceDUnPas
		expectedFails: 	nil
		escargot: 	an Escargot


[ 
self setUp.
self performTest ] in TestEscargot(TestCase)>>runCase
	Receiver: TestEscargot>>#testXPositionIcrementeQuandEscargotAvanceDUnPas
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testXPositionIcrementeQuandEscargotAvanceDUnPas
		expectedFails: 	nil
		escargot: 	an Escargot


BlockClosure>>ensure:
	Receiver: [ 
self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestEscargot(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


TestEscargot(TestCase)>>runCase
	Receiver: TestEscargot>>#testXPositionIcrementeQuandEscargotAvanceDUnPas
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testXPositionIcrementeQuandEscargotAvanceDUnPas
		expectedFails: 	nil
		escargot: 	an Escargot


[ (self class selector: testSelector) runCase ] in TestEscargot(TestCase)>>debug
	Receiver: TestEscargot>>#testXPositionIcrementeQuandEscargotAvanceDUnPas
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testXPositionIcrementeQuandEscargotAvanceDUnPas
		expectedFails: 	nil
		escargot: 	nil


BlockClosure>>ensure:
	Receiver: [ (self class selector: testSelector) runCase ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestEscargot(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


TestEscargot(TestCase)>>debug
	Receiver: TestEscargot>>#testXPositionIcrementeQuandEscargotAvanceDUnPas
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testXPositionIcrementeQuandEscargotAvanceDUnPas
		expectedFails: 	nil
		escargot: 	nil


TestEscargot class(TestCase class)>>debug:
	Receiver: TestEscargot
	Arguments and temporary variables: 
		aSymbol: 	#testXPositionIcrementeQuandEscargotAvanceDUnPas
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#setUp->TestEscargot>>#setUp #testEnergieArbitra...etc...
		format: 	136
		layout: 	a FixedLayout
		instanceVariables: 	#(#escargot)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#TestEscargot
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#CourseEscargots
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#testXPositionIcrementeQuandEscargotAvance...etc...
		escargot: 	an Escargot


[ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(369098752)
		hierarchyClass: 	TestEscargot
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(175898624)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(a PackageTreePackageSelection->true a RPackage(...etc...
		classesSelection: 	a Dictionary(Escargot->false TestEscargot->true )
		list: 	a MorphTreeMorph(470024192)
		list2: 	a PluggableIconListMorph(638582784)
		sourceCodePanel: 	a PanelMorph(14155776)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(939786240)
		list2Elements: 	{AfficheurEscargot. Escargot. TestEscargot}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(175898624)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(653262848)
		contentSelection: 	nil
		acceptor: 	a MethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(318504960)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := tes...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:pr...etc...
		startpc: 	236
		numArgs: 	0



--- The full stack ---
Escargot(Object)>>doesNotUnderstand: #position:
TestEscargot>>testXPositionIcrementeQuandEscargotAvanceDUnPas
TestEscargot(TestCase)>>performTest
[ 
self setUp.
self performTest ] in TestEscargot(TestCase)>>runCase
BlockClosure>>ensure:
TestEscargot(TestCase)>>runCase
[ (self class selector: testSelector) runCase ] in TestEscargot(TestCase)>>debug
BlockClosure>>ensure:
TestEscargot(TestCase)>>debug
TestEscargot class(TestCase class)>>debug:
[ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "+" is nil
6 March 2015 5:57:51.513436 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

UndefinedObject(Object)>>doesNotUnderstand: #+
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	+ (150@0)
		exception: 	MessageNotUnderstood: receiver of "+" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

Escargot>>avanceDUnPas
	Receiver: an Escargot
	Arguments and temporary variables: 

	Receiver's instance variables: 
		position: 	nil
		energie: 	9
		annonceur: 	nil


[ :energieAttendue | 
escargot avanceDUnPas.
self assert: escargot energie equals: energieAttendue ] in TestEscargot>>testEnergieDecrementeeQuandEscargotAvanceDUnPas
	Receiver: TestEscargot>>#testEnergieDecrementeeQuandEscargotAvanceDUnPas
	Arguments and temporary variables: 
		energieAttendue: 	9
	Receiver's instance variables: 
		testSelector: 	#testEnergieDecrementeeQuandEscargotAvanceDUnPas
		expectedFails: 	nil
		escargot: 	an Escargot


Interval>>reverseDo:
	Receiver: (0 to: 9)
	Arguments and temporary variables: 
		aBlock: 	[ :energieAttendue | 
escargot avanceDUnPas.
self assert: escargot ener...etc...
		aValue: 	9
		index: 	9
	Receiver's instance variables: 
		start: 	0
		stop: 	9
		step: 	1


TestEscargot>>testEnergieDecrementeeQuandEscargotAvanceDUnPas
	Receiver: TestEscargot>>#testEnergieDecrementeeQuandEscargotAvanceDUnPas
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testEnergieDecrementeeQuandEscargotAvanceDUnPas
		expectedFails: 	nil
		escargot: 	an Escargot


TestEscargot(TestCase)>>performTest
	Receiver: TestEscargot>>#testEnergieDecrementeeQuandEscargotAvanceDUnPas
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testEnergieDecrementeeQuandEscargotAvanceDUnPas
		expectedFails: 	nil
		escargot: 	an Escargot


[ 
self setUp.
self performTest ] in TestEscargot(TestCase)>>runCase
	Receiver: TestEscargot>>#testEnergieDecrementeeQuandEscargotAvanceDUnPas
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testEnergieDecrementeeQuandEscargotAvanceDUnPas
		expectedFails: 	nil
		escargot: 	an Escargot


BlockClosure>>ensure:
	Receiver: [ 
self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestEscargot(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


TestEscargot(TestCase)>>runCase
	Receiver: TestEscargot>>#testEnergieDecrementeeQuandEscargotAvanceDUnPas
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testEnergieDecrementeeQuandEscargotAvanceDUnPas
		expectedFails: 	nil
		escargot: 	an Escargot


[ (self class selector: testSelector) runCase ] in TestEscargot(TestCase)>>debug
	Receiver: TestEscargot>>#testEnergieDecrementeeQuandEscargotAvanceDUnPas
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testEnergieDecrementeeQuandEscargotAvanceDUnPas
		expectedFails: 	nil
		escargot: 	nil


BlockClosure>>ensure:
	Receiver: [ (self class selector: testSelector) runCase ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestEscargot(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


TestEscargot(TestCase)>>debug
	Receiver: TestEscargot>>#testEnergieDecrementeeQuandEscargotAvanceDUnPas
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testEnergieDecrementeeQuandEscargotAvanceDUnPas
		expectedFails: 	nil
		escargot: 	nil


TestEscargot class(TestCase class)>>debug:
	Receiver: TestEscargot
	Arguments and temporary variables: 
		aSymbol: 	#testEnergieDecrementeeQuandEscargotAvanceDUnPas
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#setUp->TestEscargot>>#setUp #testEnergieArbitra...etc...
		format: 	136
		layout: 	a FixedLayout
		instanceVariables: 	#(#escargot)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#TestEscargot
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#CourseEscargots
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#testEnergieDecrementeeQuandEscargotAvance...etc...
		escargot: 	an Escargot


[ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(369098752)
		hierarchyClass: 	TestEscargot
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(175898624)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(a PackageTreePackageSelection->true a RPackage(...etc...
		classesSelection: 	a Dictionary(Escargot->false TestEscargot->true )
		list: 	a MorphTreeMorph(470024192)
		list2: 	a PluggableIconListMorph(638582784)
		sourceCodePanel: 	a PanelMorph(14155776)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(939786240)
		list2Elements: 	{AfficheurEscargot. Escargot. TestEscargot}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(175898624)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(653262848)
		contentSelection: 	nil
		acceptor: 	a MethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(318504960)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := tes...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:pr...etc...
		startpc: 	236
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #+
Escargot>>avanceDUnPas
[ :energieAttendue | 
escargot avanceDUnPas.
self assert: escargot energie equals: energieAttendue ] in TestEscargot>>testEnergieDecrementeeQuandEscargotAvanceDUnPas
Interval>>reverseDo:
TestEscargot>>testEnergieDecrementeeQuandEscargotAvanceDUnPas
TestEscargot(TestCase)>>performTest
[ 
self setUp.
self performTest ] in TestEscargot(TestCase)>>runCase
BlockClosure>>ensure:
TestEscargot(TestCase)>>runCase
[ (self class selector: testSelector) runCase ] in TestEscargot(TestCase)>>debug
BlockClosure>>ensure:
TestEscargot(TestCase)>>debug
TestEscargot class(TestCase class)>>debug:
[ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Got nil instead of (0@0).
6 March 2015 5:58:28.746213 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

TestEscargot(TestAsserter)>>assert:description:
	Receiver: TestEscargot>>#testPositionInitialeEstX0Y0
	Arguments and temporary variables: 
		aBooleanOrBlock: 	false
		aStringOrBlock: 	[ self comparingStringBetween: actual and: expected ]
		aString: 	'Got nil instead of (0@0).'
	Receiver's instance variables: 
		testSelector: 	#testPositionInitialeEstX0Y0
		expectedFails: 	nil
		escargot: 	an Escargot


TestEscargot(TestAsserter)>>assert:equals:
	Receiver: TestEscargot>>#testPositionInitialeEstX0Y0
	Arguments and temporary variables: 
		actual: 	nil
		expected: 	(0@0)
	Receiver's instance variables: 
		testSelector: 	#testPositionInitialeEstX0Y0
		expectedFails: 	nil
		escargot: 	an Escargot


TestEscargot>>testPositionInitialeEstX0Y0
	Receiver: TestEscargot>>#testPositionInitialeEstX0Y0
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testPositionInitialeEstX0Y0
		expectedFails: 	nil
		escargot: 	an Escargot


TestEscargot(TestCase)>>performTest
	Receiver: TestEscargot>>#testPositionInitialeEstX0Y0
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testPositionInitialeEstX0Y0
		expectedFails: 	nil
		escargot: 	an Escargot


[ 
self setUp.
self performTest ] in TestEscargot(TestCase)>>runCase
	Receiver: TestEscargot>>#testPositionInitialeEstX0Y0
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testPositionInitialeEstX0Y0
		expectedFails: 	nil
		escargot: 	an Escargot


BlockClosure>>ensure:
	Receiver: [ 
self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestEscargot(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


TestEscargot(TestCase)>>runCase
	Receiver: TestEscargot>>#testPositionInitialeEstX0Y0
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testPositionInitialeEstX0Y0
		expectedFails: 	nil
		escargot: 	an Escargot


[ (self class selector: testSelector) runCase ] in TestEscargot(TestCase)>>debug
	Receiver: TestEscargot>>#testPositionInitialeEstX0Y0
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testPositionInitialeEstX0Y0
		expectedFails: 	nil
		escargot: 	nil


BlockClosure>>ensure:
	Receiver: [ (self class selector: testSelector) runCase ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestEscargot(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


TestEscargot(TestCase)>>debug
	Receiver: TestEscargot>>#testPositionInitialeEstX0Y0
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testPositionInitialeEstX0Y0
		expectedFails: 	nil
		escargot: 	nil


TestEscargot class(TestCase class)>>debug:
	Receiver: TestEscargot
	Arguments and temporary variables: 
		aSymbol: 	#testPositionInitialeEstX0Y0
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#setUp->TestEscargot>>#setUp #testEnergieArbitra...etc...
		format: 	136
		layout: 	a FixedLayout
		instanceVariables: 	#(#escargot)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#TestEscargot
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#CourseEscargots
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#testEnergieDecrementeeQuandEscargotAvance...etc...
		escargot: 	an Escargot


[ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(369098752)
		hierarchyClass: 	TestEscargot
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(175898624)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(a PackageTreePackageSelection->true a RPackage(...etc...
		classesSelection: 	a Dictionary(Escargot->false TestEscargot->true )
		list: 	a MorphTreeMorph(470024192)
		list2: 	a PluggableIconListMorph(638582784)
		sourceCodePanel: 	a PanelMorph(14155776)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(939786240)
		list2Elements: 	{AfficheurEscargot. Escargot. TestEscargot}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(175898624)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(653262848)
		contentSelection: 	nil
		acceptor: 	a MethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(318504960)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := tes...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:pr...etc...
		startpc: 	236
		numArgs: 	0



--- The full stack ---
TestEscargot(TestAsserter)>>assert:description:
TestEscargot(TestAsserter)>>assert:equals:
TestEscargot>>testPositionInitialeEstX0Y0
TestEscargot(TestCase)>>performTest
[ 
self setUp.
self performTest ] in TestEscargot(TestCase)>>runCase
BlockClosure>>ensure:
TestEscargot(TestCase)>>runCase
[ (self class selector: testSelector) runCase ] in TestEscargot(TestCase)>>debug
BlockClosure>>ensure:
TestEscargot(TestCase)>>debug
TestEscargot class(TestCase class)>>debug:
[ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Got 150 instead of 10.
6 March 2015 6:10:43.219193 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

TestEscargot(TestAsserter)>>assert:description:
	Receiver: TestEscargot>>#testXPositionIcrementeQuandEscargotAvanceDUnPas
	Arguments and temporary variables: 
		aBooleanOrBlock: 	false
		aStringOrBlock: 	[ self comparingStringBetween: actual and: expected ]
		aString: 	'Got 150 instead of 10.'
	Receiver's instance variables: 
		testSelector: 	#testXPositionIcrementeQuandEscargotAvanceDUnPas
		expectedFails: 	nil
		escargot: 	an Escargot


TestEscargot(TestAsserter)>>assert:equals:
	Receiver: TestEscargot>>#testXPositionIcrementeQuandEscargotAvanceDUnPas
	Arguments and temporary variables: 
		actual: 	150
		expected: 	10
	Receiver's instance variables: 
		testSelector: 	#testXPositionIcrementeQuandEscargotAvanceDUnPas
		expectedFails: 	nil
		escargot: 	an Escargot


[ :xPositionAttendu | 
escargot avanceDUnPas.
self assert: escargot position x equals: xPositionAttendu ] in TestEscargot>>testXPositionIcrementeQuandEscargotAvanceDUnPas
	Receiver: TestEscargot>>#testXPositionIcrementeQuandEscargotAvanceDUnPas
	Arguments and temporary variables: 
		xPositionAttendu: 	10
	Receiver's instance variables: 
		testSelector: 	#testXPositionIcrementeQuandEscargotAvanceDUnPas
		expectedFails: 	nil
		escargot: 	an Escargot


Interval>>do:
	Receiver: (10 to: 60 by: 10)
	Arguments and temporary variables: 
		aBlock: 	[ :xPositionAttendu | 
escargot avanceDUnPas.
self assert: escargot pos...etc...
		aValue: 	10
		index: 	1
		size: 	6
	Receiver's instance variables: 
		start: 	10
		stop: 	60
		step: 	10


TestEscargot>>testXPositionIcrementeQuandEscargotAvanceDUnPas
	Receiver: TestEscargot>>#testXPositionIcrementeQuandEscargotAvanceDUnPas
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testXPositionIcrementeQuandEscargotAvanceDUnPas
		expectedFails: 	nil
		escargot: 	an Escargot


TestEscargot(TestCase)>>performTest
	Receiver: TestEscargot>>#testXPositionIcrementeQuandEscargotAvanceDUnPas
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testXPositionIcrementeQuandEscargotAvanceDUnPas
		expectedFails: 	nil
		escargot: 	an Escargot


[ 
self setUp.
self performTest ] in TestEscargot(TestCase)>>runCase
	Receiver: TestEscargot>>#testXPositionIcrementeQuandEscargotAvanceDUnPas
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testXPositionIcrementeQuandEscargotAvanceDUnPas
		expectedFails: 	nil
		escargot: 	an Escargot


BlockClosure>>ensure:
	Receiver: [ 
self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestEscargot(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


TestEscargot(TestCase)>>runCase
	Receiver: TestEscargot>>#testXPositionIcrementeQuandEscargotAvanceDUnPas
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testXPositionIcrementeQuandEscargotAvanceDUnPas
		expectedFails: 	nil
		escargot: 	an Escargot


[ (self class selector: testSelector) runCase ] in TestEscargot(TestCase)>>debug
	Receiver: TestEscargot>>#testXPositionIcrementeQuandEscargotAvanceDUnPas
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testXPositionIcrementeQuandEscargotAvanceDUnPas
		expectedFails: 	nil
		escargot: 	nil


BlockClosure>>ensure:
	Receiver: [ (self class selector: testSelector) runCase ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestEscargot(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


TestEscargot(TestCase)>>debug
	Receiver: TestEscargot>>#testXPositionIcrementeQuandEscargotAvanceDUnPas
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testXPositionIcrementeQuandEscargotAvanceDUnPas
		expectedFails: 	nil
		escargot: 	nil


TestEscargot class(TestCase class)>>debug:
	Receiver: TestEscargot
	Arguments and temporary variables: 
		aSymbol: 	#testXPositionIcrementeQuandEscargotAvanceDUnPas
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#setUp->TestEscargot>>#setUp #testEnergieArbitra...etc...
		format: 	136
		layout: 	a FixedLayout
		instanceVariables: 	#(#escargot)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#TestEscargot
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#CourseEscargots
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#testXPositionIcremente...etc...
		escargot: 	an Escargot


[ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(369098752)
		hierarchyClass: 	Escargot
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(175898624)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(a PackageTreePackageSelection->true a RPackage(...etc...
		classesSelection: 	a Dictionary(Escargot->false TestEscargot->true )
		list: 	a MorphTreeMorph(470024192)
		list2: 	a PluggableIconListMorph(638582784)
		sourceCodePanel: 	a PanelMorph(14155776)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(939786240)
		list2Elements: 	{AfficheurEscargot. Escargot. TestEscargot}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(175898624)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(653262848)
		contentSelection: 	nil
		acceptor: 	a MethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(318504960)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := tes...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:pr...etc...
		startpc: 	236
		numArgs: 	0



--- The full stack ---
TestEscargot(TestAsserter)>>assert:description:
TestEscargot(TestAsserter)>>assert:equals:
[ :xPositionAttendu | 
escargot avanceDUnPas.
self assert: escargot position x equals: xPositionAttendu ] in TestEscargot>>testXPositionIcrementeQuandEscargotAvanceDUnPas
Interval>>do:
TestEscargot>>testXPositionIcrementeQuandEscargotAvanceDUnPas
TestEscargot(TestCase)>>performTest
[ 
self setUp.
self performTest ] in TestEscargot(TestCase)>>runCase
BlockClosure>>ensure:
TestEscargot(TestCase)>>runCase
[ (self class selector: testSelector) runCase ] in TestEscargot(TestCase)>>debug
BlockClosure>>ensure:
TestEscargot(TestCase)>>debug
TestEscargot class(TestCase class)>>debug:
[ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Escargot class>>courseFinie:
6 March 2015 6:18:35.950316 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

Escargot class(Object)>>doesNotUnderstand: #courseFinie:
	Receiver: Escargot
	Arguments and temporary variables: 
		aMessage: 	courseFinie: false
		exception: 	MessageNotUnderstood: Escargot class>>courseFinie:
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#avanceDUnPas->Escargot>>#avanceDUnPas #dimensio...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	#(#position #energie #annonceur #courseFinie)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Escargot
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#CourseEscargots
		traitComposition: 	{}
		localSelectors: 	nil


Escargot class>>DoIt
	Receiver: Escargot
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#avanceDUnPas->Escargot>>#avanceDUnPas #dimensio...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	#(#position #energie #annonceur #courseFinie)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Escargot
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#CourseEscargots
		traitComposition: 	{}
		localSelectors: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'self courseFinie: false.'
		itsSelection: 	a Text for 'self courseFinie: false.'
		itsSelectionString: 	'self courseFinie: false.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ self courseFinie: false
		source: 	a ReadStream
		context: 	nil
		receiver: 	Escargot
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result ]
		result: 	nil
		rcvr: 	Escargot
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(535035904)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(535035904)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


[ textMorph editor evaluateSelection ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>doIt
	Receiver: a PluggableTextMorphWithLimits(175898624)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(17.0@371.0) corner: (833.0@648.0)
		owner: 	a MultipleMethodsEditor(653262848)
		submorphs: 	an Array(an AlphaImageMorph(72089600) a TransformMorph(790102016))
		fullBounds: 	(17@371) corner: (833@648)
		color: 	Color white
		extension: 	a MorphExtension (513802240) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(217579520)
		scroller: 	a TransformMorph(790102016)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(1012662272)
		textMorph: 	a TextMorphForEditView(535035904)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(6 to: 29)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	nil
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(72089600)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


[ result := editBlock value ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
	Receiver: a PluggableTextMorphWithLimits(175898624)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph editor evaluateSelection ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(17.0@371.0) corner: (833.0@648.0)
		owner: 	a MultipleMethodsEditor(653262848)
		submorphs: 	an Array(an AlphaImageMorph(72089600) a TransformMorph(790102016))
		fullBounds: 	(17@371) corner: (833@648)
		color: 	Color white
		extension: 	a MorphExtension (513802240) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(217579520)
		scroller: 	a TransformMorph(790102016)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(1012662272)
		textMorph: 	a TextMorphForEditView(535035904)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(6 to: 29)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	nil
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(72089600)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(535035904)
	Arguments and temporary variables: 
		editBlock: 	[ result := editBlock value ]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (808@50)
		owner: 	a TransformMorph(790102016)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (808@50)
		color: 	Color black
		extension: 	a MorphExtension (607911936) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'vit
	self courseFinie: false.
	[self courseFinie] whileFalse:...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorphWithLimits(175898624)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
	Receiver: a PluggableTextMorphWithLimits(175898624)
	Arguments and temporary variables: 
		result: 	nil
		editBlock: 	[ textMorph editor evaluateSelection ]
	Receiver's instance variables: 
		bounds: 	(17.0@371.0) corner: (833.0@648.0)
		owner: 	a MultipleMethodsEditor(653262848)
		submorphs: 	an Array(an AlphaImageMorph(72089600) a TransformMorph(790102016))
		fullBounds: 	(17@371) corner: (833@648)
		color: 	Color white
		extension: 	a MorphExtension (513802240) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(217579520)
		scroller: 	a TransformMorph(790102016)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(1012662272)
		textMorph: 	a TextMorphForEditView(535035904)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(6 to: 29)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	nil
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(72089600)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PluggableTextMorphWithLimits(PluggableTextMorph)>>doIt
	Receiver: a PluggableTextMorphWithLimits(175898624)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(17.0@371.0) corner: (833.0@648.0)
		owner: 	a MultipleMethodsEditor(653262848)
		submorphs: 	an Array(an AlphaImageMorph(72089600) a TransformMorph(790102016))
		fullBounds: 	(17@371) corner: (833@648)
		color: 	Color white
		extension: 	a MorphExtension (513802240) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(217579520)
		scroller: 	a TransformMorph(790102016)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(1012662272)
		textMorph: 	a TextMorphForEditView(535035904)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(6 to: 29)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	nil
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(72089600)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


[ :target | target sourceTextArea doIt ] in AbstractNautilusUI class>>buildEditorKeymappingsOn:
	Receiver: AbstractNautilusUI
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		target: 	a PackageTreeNautilusUI
	Receiver's instance variables: 
		superclass: 	AbstractTool
		methodDict: 	a MethodDictionary(size 430)
		format: 	180
		layout: 	a FixedLayout
		instanceVariables: 	#(#model #window #hierarchyClass #cachedHierarchy #sourceTex...etc...
		organization: 	a ClassOrganization
		subclasses: 	{NautilusUI}
		name: 	#AbstractNautilusUI
		classPool: 	a Dictionary(#ClassesIconsCache->a WeakIdentityKeyDictionary(Affiche...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [ :target | target sourceTextArea doIt ]
	Arguments and temporary variables: 
		anArg: 	a PackageTreeNautilusUI
	Receiver's instance variables: 
		outerContext: 	AbstractNautilusUI class>>buildEditorKeymappingsOn:
		startpc: 	468
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :target | target sourceTextArea doIt ]
	Arguments and temporary variables: 
		firstArg: 	a PackageTreeNautilusUI
		secondArg: 	a PluggableTextMorphWithLimits(175898624)
	Receiver's instance variables: 
		outerContext: 	AbstractNautilusUI class>>buildEditorKeymappingsOn:
		startpc: 	468
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [ :target | target sourceTextArea doIt ]
	Arguments and temporary variables: 
		firstArg: 	a PackageTreeNautilusUI
		secondArg: 	a PluggableTextMorphWithLimits(175898624)
		thirdArg: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		outerContext: 	AbstractNautilusUI class>>buildEditorKeymappingsOn:
		startpc: 	468
		numArgs: 	1


KMCategoryBinding>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#NautilusSourceCodeShortcuts)
	Arguments and temporary variables: 
		aKeymap: 	#doIt on Cmd + D do [ :target | target sourceTextArea doIt ]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		target: 	a PackageTreeNautilusUI
		category: 	a KMCategory
		morph: 	a PluggableTextMorphWithLimits(175898624)


[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Cmd + D do [ :target | target sourceTextArea doIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#NautilusSourceCodeShortcuts) a KMDispatc...etc...
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(aKMCategoryTarget(#NautilusSourceCodeShortcuts) a KMDispatc...etc...
		l: 	aKMCategoryTarget(#NautilusSourceCodeShortcuts)
	Receiver's instance variables: 
		action: 	[ :target | target sourceTextArea doIt ]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#NautilusSourceCodeShortcuts) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[ :l | l completeMatch: self buffer: aBuffer ]
		index: 	1
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#NautilusSourceCodeShortcuts) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Cmd + D do [ :target | target sourceTextArea doIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#NautilusSourceCodeShortcuts) a KMDispatc...etc...
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(aKMCategoryTarget(#NautilusSourceCodeShortcuts) a KMDispatc...etc...
	Receiver's instance variables: 
		action: 	[ :target | target sourceTextArea doIt ]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #doIt on Cmd + D do [ :target | target sourceTextArea doIt ]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#NautilusSourceCodeShortcuts) a KMDi...etc...
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		action: 	[ :target | target sourceTextArea doIt ]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#NautilusSourceCodeShortcuts) a KMDi...etc...
		aBlock: 	[ ^ self ]
		entry: 	#doIt on Cmd + D do [ :target | target sourceTextArea doIt ]

	Receiver's instance variables: 
		name: 	#NautilusSourceCodeShortcuts
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


Set>>do:
	Receiver: a Set(#find on Cmd + F , Cmd + F do [ :target | target sourceTextArea find ]
 #inspectIt o...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andD...etc...
		index: 	29
		each: 	#doIt on Cmd + D do [ :target | target sourceTextArea doIt ]

	Receiver's instance variables: 
		tally: 	23
		array: 	an Array(nil nil nil #find on Cmd + F , Cmd + F do [ :target | target so...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#NautilusSourceCodeShortcuts) a KMDi...etc...
		aBlock: 	[ ^ self ]
	Receiver's instance variables: 
		name: 	#NautilusSourceCodeShortcuts
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#NautilusSourceCodeShortcuts)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aListener: 	a KMDispatcher
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		target: 	a PackageTreeNautilusUI
		category: 	a KMCategory
		morph: 	a PluggableTextMorphWithLimits(175898624)


[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#NautilusSourceCodeShortcuts)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a PluggableTextMorphWithLimits(175898624)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#MorphFocusCtrlNavigation) a...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyM...etc...
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#MorphFocusCtrlNavigat...etc...
		firstIndex: 	1
		lastIndex: 	8


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a PluggableTextMorphWithLimits(175898624)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a PluggableTextMorphWithLimits(175898624)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		targetToDispatch: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>do:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aBlock: 	[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstan...etc...
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
		chain: 	a KMDispatchChain
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextMorph) aKMCategoryTarget(#MorphFocusCtrlN...etc...
		morph: 	a TextMorphForEditView(535035904)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(535035904)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (808@50)
		owner: 	a TransformMorph(790102016)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (808@50)
		color: 	Color black
		extension: 	a MorphExtension (607911936) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'vit
	self courseFinie: false.
	[self courseFinie] whileFalse:...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorphWithLimits(175898624)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(535035904)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (808@50)
		owner: 	a TransformMorph(790102016)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (808@50)
		color: 	Color black
		extension: 	a MorphExtension (607911936) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'vit
	self courseFinie: false.
	[self courseFinie] whileFalse:...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorphWithLimits(175898624)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-d>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(535035904)
	Receiver's instance variables: 
		timeStamp: 	4100962
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	(161.0@11.0)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	100
		charCode: 	100
		scanCode: 	2


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(535035904)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (808@50)
		owner: 	a TransformMorph(790102016)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (808@50)
		color: 	Color black
		extension: 	a MorphExtension (607911936) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'vit
	self courseFinie: false.
	[self courseFinie] whileFalse:...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorphWithLimits(175898624)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(535035904)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (808@50)
		owner: 	a TransformMorph(790102016)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (808@50)
		color: 	Color black
		extension: 	a MorphExtension (607911936) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'vit
	self courseFinie: false.
	[self courseFinie] whileFalse:...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorphWithLimits(175898624)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(535035904)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(169@289.0) corner: (185@305.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(169@289.0) corner: (185@305.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(535035904)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(169@289) mouseOver nil nil]
		targetOffset: 	(148.0@5.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4103983 169 289 0 0 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@814)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a NautilusWindow(369098752) a Sys...etc...
		fullBounds: 	(0@0) corner: (1440@814)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.063 g: 0.063 b: 0.063 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil



--- The full stack ---
Escargot class(Object)>>doesNotUnderstand: #courseFinie:
Escargot class>>DoIt
OpalCompiler>>evaluate
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[ textMorph editor evaluateSelection ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>doIt
[ result := editBlock value ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
PluggableTextMorphWithLimits(PluggableTextMorph)>>doIt
[ :target | target sourceTextArea doIt ] in AbstractNautilusUI class>>buildEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Escargot>>annonceur
6 March 2015 6:50:04.909355 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

Escargot(Object)>>doesNotUnderstand: #annonceur
	Receiver: an Escargot
	Arguments and temporary variables: 
		aMessage: 	annonceur
		exception: 	MessageNotUnderstood: Escargot>>annonceur
		resumeValue: 	nil
	Receiver's instance variables: 
		position: 	(0@0)
		energie: 	8
		annonceur: 	an Announcer
		course: 	nil


CourseDEscargots>>nouvelAfficheurPour:
	Receiver: a CourseDEscargots
	Arguments and temporary variables: 
		unEscargot: 	an Escargot
		afficheur: 	an AfficheurEscargot
	Receiver's instance variables: 
		courseFinie: 	nil
		escargots: 	a Set(an Escargot an Escargot an Escargot)
		afficheursEscargots: 	nil


[ :unEscargot | self nouvelAfficheurPour: unEscargot ] in CourseDEscargots>>initialize
	Receiver: a CourseDEscargots
	Arguments and temporary variables: 
		unEscargot: 	an Escargot
	Receiver's instance variables: 
		courseFinie: 	nil
		escargots: 	a Set(an Escargot an Escargot an Escargot)
		afficheursEscargots: 	nil


[ :each | each ifNotNil: [ newSet add: (aBlock value: each enclosedSetElement) ] ] in Set>>collect:
	Receiver: a Set(an Escargot an Escargot an Escargot)
	Arguments and temporary variables: 
		aBlock: 	[ :unEscargot | self nouvelAfficheurPour: unEscargot ]
		newSet: 	a Set()
		each: 	an Escargot
	Receiver's instance variables: 
		tally: 	3
		array: 	an Array(nil nil an Escargot an Escargot an Escargot)


Array(SequenceableCollection)>>do:
	Receiver: an Array(nil nil an Escargot an Escargot an Escargot)
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ newSet add: (aBlock value: each enclosedSetE...etc...
		index: 	3
	Receiver's instance variables: 
an Array(nil nil an Escargot an Escargot an Escargot)

Set>>collect:
	Receiver: a Set(an Escargot an Escargot an Escargot)
	Arguments and temporary variables: 
		aBlock: 	[ :unEscargot | self nouvelAfficheurPour: unEscargot ]
		newSet: 	a Set()
	Receiver's instance variables: 
		tally: 	3
		array: 	an Array(nil nil an Escargot an Escargot an Escargot)


CourseDEscargots>>initialize
	Receiver: a CourseDEscargots
	Arguments and temporary variables: 

	Receiver's instance variables: 
		courseFinie: 	nil
		escargots: 	a Set(an Escargot an Escargot an Escargot)
		afficheursEscargots: 	nil


CourseDEscargots class(Behavior)>>new
	Receiver: CourseDEscargots
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#arreterAffichage->CourseDEscargots>>#arreterAff...etc...
		format: 	136
		layout: 	a FixedLayout
		instanceVariables: 	#(#courseFinie #escargots #afficheursEscargots)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CourseDEscargots
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#CourseEscargots
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'course := CourseDEscargots new.'
		itsSelection: 	a Text for 'course := CourseDEscargots new.'
		itsSelectionString: 	'course := CourseDEscargots new.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ course := CourseDEscargots new
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(298057728)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(298057728)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[ textMorph editor evaluateSelection ] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(643563520)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(482.0@70.0) corner: (922.0@237.0)
		owner: 	a SystemWindow(995885056)
		submorphs: 	an Array(a TransformMorph(587988992))
		fullBounds: 	(482@70) corner: (922@237)
		color: 	Color white
		extension: 	a MorphExtension (276824064) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(683409408)
		scroller: 	a TransformMorph(587988992)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(599523328)
		textMorph: 	a TextMorphForEditView(298057728)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(32 to: 31)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


[ result := editBlock value ] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(643563520)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph editor evaluateSelection ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(482.0@70.0) corner: (922.0@237.0)
		owner: 	a SystemWindow(995885056)
		submorphs: 	an Array(a TransformMorph(587988992))
		fullBounds: 	(482@70) corner: (922@237)
		color: 	Color white
		extension: 	a MorphExtension (276824064) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(683409408)
		scroller: 	a TransformMorph(587988992)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(599523328)
		textMorph: 	a TextMorphForEditView(298057728)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(32 to: 31)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(298057728)
	Arguments and temporary variables: 
		editBlock: 	[ result := editBlock value ]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@18)
		owner: 	a TransformMorph(587988992)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@18)
		color: 	Color black
		extension: 	a MorphExtension (358875136) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'course := CourseDEscargots new.'
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(643563520)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(643563520)
	Arguments and temporary variables: 
		result: 	nil
		editBlock: 	[ textMorph editor evaluateSelection ]
	Receiver's instance variables: 
		bounds: 	(482.0@70.0) corner: (922.0@237.0)
		owner: 	a SystemWindow(995885056)
		submorphs: 	an Array(a TransformMorph(587988992))
		fullBounds: 	(482@70) corner: (922@237)
		color: 	Color white
		extension: 	a MorphExtension (276824064) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(683409408)
		scroller: 	a TransformMorph(587988992)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(599523328)
		textMorph: 	a TextMorphForEditView(298057728)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(32 to: 31)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(643563520)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(482.0@70.0) corner: (922.0@237.0)
		owner: 	a SystemWindow(995885056)
		submorphs: 	an Array(a TransformMorph(587988992))
		fullBounds: 	(482@70) corner: (922@237)
		color: 	Color white
		extension: 	a MorphExtension (276824064) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(683409408)
		scroller: 	a TransformMorph(587988992)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(599523328)
		textMorph: 	a TextMorphForEditView(298057728)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(32 to: 31)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


[ :morph | morph doIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: SmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		morph: 	a PluggableTextMorph(643563520)
	Receiver's instance variables: 
		superclass: 	TextEditor
		methodDict: 	a MethodDictionary(#argAdvance:->SmalltalkEditor>>#argAdvance: #bro...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SmalltalkEditor
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Text-Edition'
		traitComposition: 	{}
		localSelectors: 	nil
		cmdActions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop...etc...
		shiftCmdActions: 	#(#noop: #argAdvance: #noop: #compareToClipboard: #debugIt: #m...etc...


BlockClosure>>cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(643563520)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	157
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(643563520)
		secondArg: 	a PluggableTextMorph(643563520)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	157
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(643563520)
		secondArg: 	a PluggableTextMorph(643563520)
		thirdArg: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	157
		numArgs: 	1


KMCategoryBinding>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#doIt on Cmd + D do [ :morph | morph doIt ]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(643563520)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(643563520)


[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Cmd + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		l: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[ :l | l completeMatch: self buffer: aBuffer ]
		index: 	1
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Cmd + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #doIt on Cmd + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
		entry: 	#doIt on Cmd + D do [ :morph | morph doIt ]

	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


Set>>do:
	Receiver: a Set(#inspectIt on Cmd + I do [ :morph | morph inspectIt ]
 #sendersOfIt on Cmd + N do [ ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andD...etc...
		index: 	9
		each: 	#doIt on Cmd + D do [ :morph | morph doIt ]

	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(#inspectIt on Cmd + I do [ :morph | morph inspectIt ]
 #senders...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aListener: 	a KMDispatcher
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(643563520)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(643563520)


[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextMorphTab) aKMCategoryTarget(#MorphFocusCt...etc...
		morph: 	a PluggableTextMorph(643563520)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#TextMorphTab) aKMCategoryTa...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyM...etc...
		index: 	4
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#TextMorphTab) aKMCate...etc...
		firstIndex: 	1
		lastIndex: 	7


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextMorphTab) aKMCategoryTarget(#MorphFocusCt...etc...
		morph: 	a PluggableTextMorph(643563520)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a PluggableTextMorph(643563520)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		targetToDispatch: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>do:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aBlock: 	[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstan...etc...
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
		chain: 	a KMDispatchChain
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextMorph) aKMCategoryTarget(#MorphFocusCtrlN...etc...
		morph: 	a TextMorphForEditView(298057728)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(298057728)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@18)
		owner: 	a TransformMorph(587988992)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@18)
		color: 	Color black
		extension: 	a MorphExtension (358875136) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'course := CourseDEscargots new.'
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(643563520)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil



--- The full stack ---
Escargot(Object)>>doesNotUnderstand: #annonceur
CourseDEscargots>>nouvelAfficheurPour:
[ :unEscargot | self nouvelAfficheurPour: unEscargot ] in CourseDEscargots>>initialize
[ :each | each ifNotNil: [ newSet add: (aBlock value: each enclosedSetElement) ] ] in Set>>collect:
Array(SequenceableCollection)>>do:
Set>>collect:
CourseDEscargots>>initialize
CourseDEscargots class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[ textMorph editor evaluateSelection ] in PluggableTextMorph>>doIt
[ result := editBlock value ] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
[ :morph | morph doIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "courseFinie" is nil
6 March 2015 6:51:22.811294 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

UndefinedObject(Object)>>doesNotUnderstand: #courseFinie
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	courseFinie
		exception: 	MessageNotUnderstood: receiver of "courseFinie" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

Escargot>>courseFinie
	Receiver: an Escargot
	Arguments and temporary variables: 

	Receiver's instance variables: 
		position: 	(0@100)
		energie: 	8
		annonceur: 	an Announcer
		course: 	nil


Escargot>>boucleCourse
	Receiver: an Escargot
	Arguments and temporary variables: 

	Receiver's instance variables: 
		position: 	(0@100)
		energie: 	8
		annonceur: 	an Announcer
		course: 	nil


[ self boucleCourse ] in Escargot>>faireCourse
	Receiver: an Escargot
	Arguments and temporary variables: 

	Receiver's instance variables: 
		position: 	(0@100)
		energie: 	8
		annonceur: 	an Announcer
		course: 	nil


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ self boucleCourse ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Escargot>>faireCourse
		startpc: 	25
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #courseFinie
Escargot>>courseFinie
Escargot>>boucleCourse
[ self boucleCourse ] in Escargot>>faireCourse
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "courseFinie" is nil
6 March 2015 6:51:22.820186 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

UndefinedObject(Object)>>doesNotUnderstand: #courseFinie
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	courseFinie
		exception: 	MessageNotUnderstood: receiver of "courseFinie" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

Escargot>>courseFinie
	Receiver: an Escargot
	Arguments and temporary variables: 

	Receiver's instance variables: 
		position: 	(0@300)
		energie: 	2
		annonceur: 	an Announcer
		course: 	nil


Escargot>>boucleCourse
	Receiver: an Escargot
	Arguments and temporary variables: 

	Receiver's instance variables: 
		position: 	(0@300)
		energie: 	2
		annonceur: 	an Announcer
		course: 	nil


[ self boucleCourse ] in Escargot>>faireCourse
	Receiver: an Escargot
	Arguments and temporary variables: 

	Receiver's instance variables: 
		position: 	(0@300)
		energie: 	2
		annonceur: 	an Announcer
		course: 	nil


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ self boucleCourse ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Escargot>>faireCourse
		startpc: 	25
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #courseFinie
Escargot>>courseFinie
Escargot>>boucleCourse
[ self boucleCourse ] in Escargot>>faireCourse
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

update: #30862]

UndefinedObject(Object)>>doesNotUnderstand: #courseFinie
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	courseFinie
		exception: 	MessageNotUnderstood: receiver of "courseFinie" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

Escargot>>courseFinie
	Receiver: an Escargot
	Arguments and temporary variables: 

	Receiver's instance variables: 
		position: 	(0@600)
		energie: 	7
		annonceur: 	an Announcer
		course: 	nil


Escargot>>boucleCourse
	Receiver: an Escargot
	Arguments and temporary variables: 

	Receiver's instance variables: 
		position: 	(0@600)
		energie: 	7
		annonceur: 	an Announcer
		course: 	nil


[ self boucleCourse ] in Escargot>>faireCourse
	Receiver: an Escargot
	Arguments and temporary variables: 

	Receiver's instance variables: 
		position: 	(0@600)
		energie: 	7
		annonceur: 	an Announcer
		course: 	nil


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ self boucleCourse ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Escargot>>faireCourse
		startpc: 	25
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #courseFinie
Escargot>>courseFinie
Escargot>>boucleCourse
[ self boucleCourse ] in Escargot>>faireCourse
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Arbitre>>escargots
6 March 2015 7:16:32.988149 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

Arbitre(Object)>>doesNotUnderstand: #escargots
	Receiver: an Arbitre
	Arguments and temporary variables: 
		aMessage: 	escargots
		exception: 	MessageNotUnderstood: Arbitre>>escargots
		resumeValue: 	nil
	Receiver's instance variables: 
		course: 	a CourseDEscargots


Arbitre>>arriveeAtteinte
	Receiver: an Arbitre
	Arguments and temporary variables: 

	Receiver's instance variables: 
		course: 	a CourseDEscargots


[ 
self arriveeAtteinte
	ifTrue: [ ^ self arreterLaCourse ].
self dureeUnPasDeTemps asDelay wait ] in Arbitre>>boucleArbitrage
	Receiver: an Arbitre
	Arguments and temporary variables: 

	Receiver's instance variables: 
		course: 	a CourseDEscargots


BlockClosure>>repeat
	Receiver: [ 
self arriveeAtteinte
	ifTrue: [ ^ self arreterLaCourse ].
self dureeUnPasDeTemps asDela...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Arbitre>>boucleArbitrage
		startpc: 	45
		numArgs: 	0


Arbitre>>boucleArbitrage
	Receiver: an Arbitre
	Arguments and temporary variables: 

	Receiver's instance variables: 
		course: 	a CourseDEscargots


[ self boucleArbitrage ] in Arbitre>>demarrerArbitrage
	Receiver: an Arbitre
	Arguments and temporary variables: 

	Receiver's instance variables: 
		course: 	a CourseDEscargots


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ self boucleArbitrage ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Arbitre>>demarrerArbitrage
		startpc: 	33
		numArgs: 	0



--- The full stack ---
Arbitre(Object)>>doesNotUnderstand: #escargots
Arbitre>>arriveeAtteinte
[ 
self arriveeAtteinte
	ifTrue: [ ^ self arreterLaCourse ].
self dureeUnPasDeTemps asDelay wait ] in Arbitre>>boucleArbitrage
BlockClosure>>repeat
Arbitre>>boucleArbitrage
[ self boucleArbitrage ] in Arbitre>>demarrerArbitrage
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: CourseDEscargots>>escargots
6 March 2015 7:16:57.29664 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

CourseDEscargots(Object)>>doesNotUnderstand: #escargots
	Receiver: a CourseDEscargots
	Arguments and temporary variables: 
		aMessage: 	escargots
		exception: 	MessageNotUnderstood: CourseDEscargots>>escargots
		resumeValue: 	nil
	Receiver's instance variables: 
		courseFinie: 	false
		escargots: 	a Set(an Escargot an Escargot an Escargot)
		afficheursEscargots: 	a Set(an AfficheurEscargot an AfficheurEscargot an Affiche...etc...


Arbitre>>escargots
	Receiver: an Arbitre
	Arguments and temporary variables: 

	Receiver's instance variables: 
		course: 	a CourseDEscargots


Arbitre>>arriveeAtteinte
	Receiver: an Arbitre
	Arguments and temporary variables: 

	Receiver's instance variables: 
		course: 	a CourseDEscargots


[ 
self arriveeAtteinte
	ifTrue: [ ^ self arreterLaCourse ].
self dureeUnPasDeTemps asDelay wait ] in Arbitre>>boucleArbitrage
	Receiver: an Arbitre
	Arguments and temporary variables: 

	Receiver's instance variables: 
		course: 	a CourseDEscargots


BlockClosure>>repeat
	Receiver: [ 
self arriveeAtteinte
	ifTrue: [ ^ self arreterLaCourse ].
self dureeUnPasDeTemps asDela...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Arbitre>>boucleArbitrage
		startpc: 	45
		numArgs: 	0


Arbitre>>boucleArbitrage
	Receiver: an Arbitre
	Arguments and temporary variables: 

	Receiver's instance variables: 
		course: 	a CourseDEscargots


[ self boucleArbitrage ] in Arbitre>>demarrerArbitrage
	Receiver: an Arbitre
	Arguments and temporary variables: 

	Receiver's instance variables: 
		course: 	a CourseDEscargots


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ self boucleArbitrage ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Arbitre>>demarrerArbitrage
		startpc: 	33
		numArgs: 	0



--- The full stack ---
CourseDEscargots(Object)>>doesNotUnderstand: #escargots
Arbitre>>escargots
Arbitre>>arriveeAtteinte
[ 
self arriveeAtteinte
	ifTrue: [ ^ self arreterLaCourse ].
self dureeUnPasDeTemps asDelay wait ] in Arbitre>>boucleArbitrage
BlockClosure>>repeat
Arbitre>>boucleArbitrage
[ self boucleArbitrage ] in Arbitre>>demarrerArbitrage
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: CourseDEscargots>>dureeUnPasDeTemps
6 March 2015 7:17:24.602254 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

CourseDEscargots(Object)>>doesNotUnderstand: #dureeUnPasDeTemps
	Receiver: a CourseDEscargots
	Arguments and temporary variables: 
		aMessage: 	dureeUnPasDeTemps
		exception: 	MessageNotUnderstood: CourseDEscargots>>dureeUnPasDeTemps
		resumeValue: 	nil
	Receiver's instance variables: 
		courseFinie: 	false
		escargots: 	a Set(an Escargot an Escargot an Escargot)
		afficheursEscargots: 	a Set(an AfficheurEscargot an AfficheurEscargot an Affiche...etc...


Arbitre>>dureeUnPasDeTemps
	Receiver: an Arbitre
	Arguments and temporary variables: 

	Receiver's instance variables: 
		course: 	a CourseDEscargots


[ 
self arriveeAtteinte
	ifTrue: [ ^ self arreterLaCourse ].
self dureeUnPasDeTemps asDelay wait ] in Arbitre>>boucleArbitrage
	Receiver: an Arbitre
	Arguments and temporary variables: 

	Receiver's instance variables: 
		course: 	a CourseDEscargots


BlockClosure>>repeat
	Receiver: [ 
self arriveeAtteinte
	ifTrue: [ ^ self arreterLaCourse ].
self dureeUnPasDeTemps asDela...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Arbitre>>boucleArbitrage
		startpc: 	45
		numArgs: 	0


Arbitre>>boucleArbitrage
	Receiver: an Arbitre
	Arguments and temporary variables: 

	Receiver's instance variables: 
		course: 	a CourseDEscargots


[ self boucleArbitrage ] in Arbitre>>demarrerArbitrage
	Receiver: an Arbitre
	Arguments and temporary variables: 

	Receiver's instance variables: 
		course: 	a CourseDEscargots


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ self boucleArbitrage ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Arbitre>>demarrerArbitrage
		startpc: 	33
		numArgs: 	0



--- The full stack ---
CourseDEscargots(Object)>>doesNotUnderstand: #dureeUnPasDeTemps
Arbitre>>dureeUnPasDeTemps
[ 
self arriveeAtteinte
	ifTrue: [ ^ self arreterLaCourse ].
self dureeUnPasDeTemps asDelay wait ] in Arbitre>>boucleArbitrage
BlockClosure>>repeat
Arbitre>>boucleArbitrage
[ self boucleArbitrage ] in Arbitre>>demarrerArbitrage
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "asSymbol" is nil
6 March 2015 7:22:37.959159 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

UndefinedObject(Object)>>doesNotUnderstand: #asSymbol
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asSymbol
		exception: 	MessageNotUnderstood: receiver of "asSymbol" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

RBExtractMethodRefactoring>>getNewMethodName
	Receiver: a RBExtractMethodRefactoring
	Arguments and temporary variables: 
		newSelector: 	nil
		methodName: 	(invalid)
		newMethodName: 	(invalid)
	Receiver's instance variables: 
		model: 	a RBNamespace
		options: 	an IdentityDictionary(#alreadyDefined->[ :ref :class :selector | self ...etc...
		class: 	CourseDEscargots
		selector: 	#nouvelAfficheurLigneArrivee
		extractionInterval: 	(153 to: 154)
		extractedParseTree: 	value
	^ 10
		modifiedParseTree: 	nouvelAfficheurLigneArrivee
	afficheurLigneArrivee := Morph ...etc...
		parameters: 	an OrderedCollection()
		needsReturn: 	true


RBExtractMethodRefactoring>>transform
	Receiver: a RBExtractMethodRefactoring
	Arguments and temporary variables: 
		existingSelector: 	nil
	Receiver's instance variables: 
		model: 	a RBNamespace
		options: 	an IdentityDictionary(#alreadyDefined->[ :ref :class :selector | self ...etc...
		class: 	CourseDEscargots
		selector: 	#nouvelAfficheurLigneArrivee
		extractionInterval: 	(153 to: 154)
		extractedParseTree: 	value
	^ 10
		modifiedParseTree: 	nouvelAfficheurLigneArrivee
	afficheurLigneArrivee := Morph ...etc...
		parameters: 	an OrderedCollection()
		needsReturn: 	true


RBExtractMethodRefactoring(RBRefactoring)>>primitiveExecute
	Receiver: a RBExtractMethodRefactoring
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RBNamespace
		options: 	an IdentityDictionary(#alreadyDefined->[ :ref :class :selector | self ...etc...
		class: 	CourseDEscargots
		selector: 	#nouvelAfficheurLigneArrivee
		extractionInterval: 	(153 to: 154)
		extractedParseTree: 	value
	^ 10
		modifiedParseTree: 	nouvelAfficheurLigneArrivee
	afficheurLigneArrivee := Morph ...etc...
		parameters: 	an OrderedCollection()
		needsReturn: 	true


[ :e | 
self refactoringOptions: e.
e primitiveExecute ] in NautilusRefactoring>>internalPerformRefactorings:
	Receiver: a NautilusRefactoring
	Arguments and temporary variables: 
		aCollectionRefactoring: 	an Array(a RBExtractMethodRefactoring)
		e: 	a RBExtractMethodRefactoring
	Receiver's instance variables: 
		environment: 	a RBNamespace
		model: 	a PackageTreeNautilusUI


Array(SequenceableCollection)>>do:
	Receiver: an Array(a RBExtractMethodRefactoring)
	Arguments and temporary variables: 
		aBlock: 	[ :e | 
self refactoringOptions: e.
e primitiveExecute ]
		index: 	1
	Receiver's instance variables: 
an Array(a RBExtractMethodRefactoring)

NautilusRefactoring>>internalPerformRefactorings:
	Receiver: a NautilusRefactoring
	Arguments and temporary variables: 
		aCollectionRefactoring: 	an Array(a RBExtractMethodRefactoring)
	Receiver's instance variables: 
		environment: 	a RBNamespace
		model: 	a PackageTreeNautilusUI


[ self internalPerformRefactorings: aCollectionRefactoring ] in [ 
[ self internalPerformRefactorings: aCollectionRefactoring ]
	on: RBRefactoringFailure
	do: [ :exception | self handleFailure: exception ] ] in [ 
[ 
[ self internalPerformRefactorings: aCollectionRefactoring ]
	on: RBRefactoringFailure
	do: [ :exception | self handleFailure: exception ] ]
	on: RBRefactoringWarning
	do: [ :exception | self handleWarning: exception ] ] in NautilusRefactoring>>performRefactorings:
	Receiver: a NautilusRefactoring
	Arguments and temporary variables: 
		aCollectionRefactoring: 	an Array(a RBExtractMethodRefactoring)
	Receiver's instance variables: 
		environment: 	a RBNamespace
		model: 	a PackageTreeNautilusUI


BlockClosure>>on:do:
	Receiver: [ self internalPerformRefactorings: aCollectionRefactoring ]
	Arguments and temporary variables: 
		exception: 	RBRefactoringFailure
		handlerAction: 	[ :exception | self handleFailure: exception ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	[ 
[ self internalPerformRefactorings: aCollectionRefactoring ]
	...etc...
		startpc: 	60
		numArgs: 	0


[ 
[ self internalPerformRefactorings: aCollectionRefactoring ]
	on: RBRefactoringFailure
	do: [ :exception | self handleFailure: exception ] ] in [ 
[ 
[ self internalPerformRefactorings: aCollectionRefactoring ]
	on: RBRefactoringFailure
	do: [ :exception | self handleFailure: exception ] ]
	on: RBRefactoringWarning
	do: [ :exception | self handleWarning: exception ] ] in NautilusRefactoring>>performRefactorings:
	Receiver: a NautilusRefactoring
	Arguments and temporary variables: 
		aCollectionRefactoring: 	an Array(a RBExtractMethodRefactoring)
	Receiver's instance variables: 
		environment: 	a RBNamespace
		model: 	a PackageTreeNautilusUI


BlockClosure>>on:do:
	Receiver: [ 
[ self internalPerformRefactorings: aCollectionRefactoring ]
	on: RBRefactoringFailure
...etc...
	Arguments and temporary variables: 
		exception: 	RBRefactoringWarning
		handlerAction: 	[ :exception | self handleWarning: exception ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	[ 
[ 
[ self internalPerformRefactorings: aCollectionRefactoring ...etc...
		startpc: 	55
		numArgs: 	0


[ 
[ 
[ self internalPerformRefactorings: aCollectionRefactoring ]
	on: RBRefactoringFailure
	do: [ :exception | self handleFailure: exception ] ]
	on: RBRefactoringWarning
	do: [ :exception | self handleWarning: exception ] ] in NautilusRefactoring>>performRefactorings:
	Receiver: a NautilusRefactoring
	Arguments and temporary variables: 
		aCollectionRefactoring: 	an Array(a RBExtractMethodRefactoring)
	Receiver's instance variables: 
		environment: 	a RBNamespace
		model: 	a PackageTreeNautilusUI


BlockClosure>>on:do:
	Receiver: [ 
[ 
[ self internalPerformRefactorings: aCollectionRefactoring ]
	on: RBRefactoringFailu...etc...
	Arguments and temporary variables: 
		exception: 	RBRefactoringError
		handlerAction: 	[ :exception | self handleError: exception ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	NautilusRefactoring>>performRefactorings:
		startpc: 	50
		numArgs: 	0


NautilusRefactoring>>performRefactorings:
	Receiver: a NautilusRefactoring
	Arguments and temporary variables: 
		aCollectionRefactoring: 	an Array(a RBExtractMethodRefactoring)
	Receiver's instance variables: 
		environment: 	a RBNamespace
		model: 	a PackageTreeNautilusUI


NautilusRefactoring>>performRefactoring:
	Receiver: a NautilusRefactoring
	Arguments and temporary variables: 
		aRefactoring: 	a RBExtractMethodRefactoring
	Receiver's instance variables: 
		environment: 	a RBNamespace
		model: 	a PackageTreeNautilusUI


NautilusRefactoring>>extractBetween:from:
	Receiver: a NautilusRefactoring
	Arguments and temporary variables: 
		anInterval: 	(153 to: 154)
		aMethod: 	CourseDEscargots>>#nouvelAfficheurLigneArrivee
		refactoring: 	a RBExtractMethodRefactoring
	Receiver's instance variables: 
		environment: 	a RBNamespace
		model: 	a PackageTreeNautilusUI


[ 
target okToChange
	ifFalse: [ ^ target ].
target refactor extractBetween: target sourceTextArea selectionInterval from: target selectedMethod ] in CourseDEscargots class(ClassDescription)>>sourceCodeRefactoring:
	Receiver: CourseDEscargots
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		target: 	a PackageTreeNautilusUI
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#arreter->CourseDEscargots>>#arreter #arreterAff...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	#(#courseFinie #escargots #afficheursEscargots #afficheurLig...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CourseDEscargots
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#CourseEscargots
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [ 
target okToChange
	ifFalse: [ ^ target ].
target refactor extractBetween: target source...etc...
	Arguments and temporary variables: 
		anArg: 	a PackageTreeNautilusUI
	Receiver's instance variables: 
		outerContext: 	CourseDEscargots class(ClassDescription)>>sourceCodeRefactoring:
		startpc: 	294
		numArgs: 	0


[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ 
		selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(90439680)'Extract method'
	Arguments and temporary variables: 
		evt: 	[(461@632) mouseUp 7937091 nil]
		w: 	a WorldMorph(511705088) [world]
		selArgCount: 	1
	Receiver's instance variables: 
		bounds: 	(440.0@627.0) corner: (735.0@641.0)
		owner: 	a MenuMorph(234618880)
		submorphs: 	#()
		fullBounds: 	(440.0@627.0) corner: (735.0@641.0)
		color: 	Color black
		extension: 	a MorphExtension (112721920)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Extract method'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ 
target okToChange
	ifFalse: [ ^ target ].
target refactor extractBet...etc...
		selector: 	#cull:
		arguments: 	an Array(a PackageTreeNautilusUI)
		icon: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selec...etc...
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	134
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(s...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(90439680)'Extract method'
	Arguments and temporary variables: 
		evt: 	[(461@632) mouseUp 7937091 nil]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(440.0@627.0) corner: (735.0@641.0)
		owner: 	a MenuMorph(234618880)
		submorphs: 	#()
		fullBounds: 	(440.0@627.0) corner: (735.0@641.0)
		color: 	Color black
		extension: 	a MorphExtension (112721920)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Extract method'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ 
target okToChange
	ifFalse: [ ^ target ].
target refactor extractBet...etc...
		selector: 	#cull:
		arguments: 	an Array(a PackageTreeNautilusUI)
		icon: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(90439680)'Extract method'
	Arguments and temporary variables: 
		evt: 	[(461@632) mouseUp 7937091 nil]
	Receiver's instance variables: 
		bounds: 	(440.0@627.0) corner: (735.0@641.0)
		owner: 	a MenuMorph(234618880)
		submorphs: 	#()
		fullBounds: 	(440.0@627.0) corner: (735.0@641.0)
		color: 	Color black
		extension: 	a MorphExtension (112721920)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Extract method'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ 
target okToChange
	ifFalse: [ ^ target ].
target refactor extractBet...etc...
		selector: 	#cull:
		arguments: 	an Array(a PackageTreeNautilusUI)
		icon: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(90439680)'Extract method'
	Arguments and temporary variables: 
		anEvent: 	[(461@632) mouseUp 7937091 nil]
	Receiver's instance variables: 
		bounds: 	(440.0@627.0) corner: (735.0@641.0)
		owner: 	a MenuMorph(234618880)
		submorphs: 	#()
		fullBounds: 	(440.0@627.0) corner: (735.0@641.0)
		color: 	Color black
		extension: 	a MorphExtension (112721920)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Extract method'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ 
target okToChange
	ifFalse: [ ^ target ].
target refactor extractBet...etc...
		selector: 	#cull:
		arguments: 	an Array(a PackageTreeNautilusUI)
		icon: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(461@632) mouseUp 7937091 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(90439680)'Extract method'
	Receiver's instance variables: 
		timeStamp: 	7937091
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(461@632)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(90439680)'Extract method'
	Arguments and temporary variables: 
		anEvent: 	[(461@632) mouseUp 7937091 nil]
	Receiver's instance variables: 
		bounds: 	(440.0@627.0) corner: (735.0@641.0)
		owner: 	a MenuMorph(234618880)
		submorphs: 	#()
		fullBounds: 	(440.0@627.0) corner: (735.0@641.0)
		color: 	Color black
		extension: 	a MorphExtension (112721920)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Extract method'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ 
target okToChange
	ifFalse: [ ^ target ].
target refactor extractBet...etc...
		selector: 	#cull:
		arguments: 	an Array(a PackageTreeNautilusUI)
		icon: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(461@632) mouseUp 7937091 nil]
		aMorph: 	a ToggleMenuItemMorph(90439680)'Extract method'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(461@632) mouseUp 7937091 nil]
		aMorph: 	a ToggleMenuItemMorph(90439680)'Extract method'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(90439680)'Extract method'
	Arguments and temporary variables: 
		anEvent: 	[(461@632) mouseUp 7937091 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(440.0@627.0) corner: (735.0@641.0)
		owner: 	a MenuMorph(234618880)
		submorphs: 	#()
		fullBounds: 	(440.0@627.0) corner: (735.0@641.0)
		color: 	Color black
		extension: 	a MorphExtension (112721920)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Extract method'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ 
target okToChange
	ifFalse: [ ^ target ].
target refactor extractBet...etc...
		selector: 	#cull:
		arguments: 	an Array(a PackageTreeNautilusUI)
		icon: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(461@632) mouseUp 7937091 nil]
		aMorph: 	a MenuMorph(234618880)
		localEvt: 	[(461@632) mouseUp 7937091 nil]
		index: 	2
		child: 	a ToggleMenuItemMorph(90439680)'Extract method'
		morphs: 	an Array(a ToggleMenuItemMorph(290455552)'Create cascade' a ToggleMenuI...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(461@632) mouseUp 7937091 nil]
		aMorph: 	a MenuMorph(234618880)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(234618880)
	Arguments and temporary variables: 
		anEvent: 	[(461@632) mouseUp 7937091 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(435.0@607.0) corner: (740.0@814.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(290455552)'Create cascade' a ToggleMe...etc...
		fullBounds: 	(435.0@607.0) corner: (740.0@814.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (439353344) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(90439680)'Extract method'
		stayUp: 	false
		popUpOwner: 	a ToggleMenuItemMorph(126091264)'Source code refactoring'
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	nil


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(234618880)
	Arguments and temporary variables: 
		anEvent: 	[(461@632) mouseUp 7937091 nil]
	Receiver's instance variables: 
		bounds: 	(435.0@607.0) corner: (740.0@814.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(290455552)'Create cascade' a ToggleMe...etc...
		fullBounds: 	(435.0@607.0) corner: (740.0@814.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (439353344) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(90439680)'Extract method'
		stayUp: 	false
		popUpOwner: 	a ToggleMenuItemMorph(126091264)'Source code refactoring'
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	nil


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(234618880)
	Arguments and temporary variables: 
		evt: 	[(461@632) mouseUp 7937091 nil]
	Receiver's instance variables: 
		bounds: 	(435.0@607.0) corner: (740.0@814.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(290455552)'Create cascade' a ToggleMe...etc...
		fullBounds: 	(435.0@607.0) corner: (740.0@814.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (439353344) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(90439680)'Extract method'
		stayUp: 	false
		popUpOwner: 	a ToggleMenuItemMorph(126091264)'Source code refactoring'
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	nil


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(461@632) mouseUp 7937091 nil]
		focusHolder: 	a MenuMorph(234618880)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(469@641.0) corner: (485@657.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(461@632) mouseOver nil nil]
		targetOffset: 	(21.0@5.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7937091 461 632 0 0 0 1)
		lastKeyScanCode: 	36
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(461@632) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@814)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GrowlMorph(570163200) a Nautilu...etc...
		fullBounds: 	(0@0) corner: (1440@814)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.063 g: 0.063 b: 0.063 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(461@632) mouseUp 7937091 nil]
		focusHolder: 	a MenuMorph(234618880)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(469@641.0) corner: (485@657.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(461@632) mouseOver nil nil]
		targetOffset: 	(21.0@5.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7937091 461 632 0 0 0 1)
		lastKeyScanCode: 	36
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(461@632) mouseUp 7937091 nil]
		focusHolder: 	a MenuMorph(234618880)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(469@641.0) corner: (485@657.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(461@632) mouseOver nil nil]
		targetOffset: 	(21.0@5.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7937091 461 632 0 0 0 1)
		lastKeyScanCode: 	36
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #asSymbol
RBExtractMethodRefactoring>>getNewMethodName
RBExtractMethodRefactoring>>transform
RBExtractMethodRefactoring(RBRefactoring)>>primitiveExecute
[ :e | 
self refactoringOptions: e.
e primitiveExecute ] in NautilusRefactoring>>internalPerformRefactorings:
Array(SequenceableCollection)>>do:
NautilusRefactoring>>internalPerformRefactorings:
[ self internalPerformRefactorings: aCollectionRefactoring ] in [ 
[ self internalPerformRefactorings: aCollectionRefactoring ]
	on: RBRefactoringFailure
	do: [ :exception | self handleFailure: exception ] ] in [ 
[ 
[ self internalPerformRefactorings: aCollectionRefactoring ]
	on: RBRefactoringFailure
	do: [ :exception | self handleFailure: exception ] ]
	on: RBRefactoringWarning
	do: [ :exception | self handleWarning: exception ] ] in NautilusRefactoring>>performRefactorings:
BlockClosure>>on:do:
[ 
[ self internalPerformRefactorings: aCollectionRefactoring ]
	on: RBRefactoringFailure
	do: [ :exception | self handleFailure: exception ] ] in [ 
[ 
[ self internalPerformRefactorings: aCollectionRefactoring ]
	on: RBRefactoringFailure
	do: [ :exception | self handleFailure: exception ] ]
	on: RBRefactoringWarning
	do: [ :exception | self handleWarning: exception ] ] in NautilusRefactoring>>performRefactorings:
BlockClosure>>on:do:
[ 
[ 
[ self internalPerformRefactorings: aCollectionRefactoring ]
	on: RBRefactoringFailure
	do: [ :exception | self handleFailure: exception ] ]
	on: RBRefactoringWarning
	do: [ :exception | self handleWarning: exception ] ] in NautilusRefactoring>>performRefactorings:
BlockClosure>>on:do:
NautilusRefactoring>>performRefactorings:
NautilusRefactoring>>performRefactoring:
NautilusRefactoring>>extractBetween:from:
[ 
target okToChange
	ifFalse: [ ^ target ].
target refactor extractBetween: target sourceTextArea selectionInterval from: target selectedMethod ] in CourseDEscargots class(ClassDescription)>>sourceCodeRefactoring:
BlockClosure>>cull:
[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ 
		selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
WorldMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorphWithLimits(PluggableTextMorph)>>yellowButtonActivity:
SmalltalkEditor(TextEditor)>>mouseUp:
[ editor mouseUp: evt ] in TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView>>mouseUp:
TextMorphForEditView(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "delete" is nil
6 March 2015 7:25:06.527651 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

UndefinedObject(Object)>>doesNotUnderstand: #delete
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	delete
		exception: 	MessageNotUnderstood: receiver of "delete" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

CourseDEscargots>>arreterAffichage
	Receiver: a CourseDEscargots
	Arguments and temporary variables: 

	Receiver's instance variables: 
		courseFinie: 	true
		escargots: 	a Set(an Escargot an Escargot an Escargot)
		afficheursEscargots: 	a Set(an AfficheurEscargot an AfficheurEscargot an Affiche...etc...
		afficheurLigneArrivee: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'course arreterAffichage.'
		itsSelection: 	a Text for 'course arreterAffichage.'
		itsSelectionString: 	'course arreterAffichage.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ course arreterAffichage
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(298057728)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(298057728)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[ textMorph editor evaluateSelection ] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(643563520)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(401.0@68.0) corner: (841.0@235.0)
		owner: 	a SystemWindow(995885056)
		submorphs: 	an Array(a TransformMorph(587988992))
		fullBounds: 	(401.0@68.0) corner: (841.0@235.0)
		color: 	Color white
		extension: 	a MorphExtension (276824064) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(683409408)
		scroller: 	a TransformMorph(587988992)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(599523328)
		textMorph: 	a TextMorphForEditView(298057728)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(74 to: 73)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


[ result := editBlock value ] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(643563520)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph editor evaluateSelection ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(401.0@68.0) corner: (841.0@235.0)
		owner: 	a SystemWindow(995885056)
		submorphs: 	an Array(a TransformMorph(587988992))
		fullBounds: 	(401.0@68.0) corner: (841.0@235.0)
		color: 	Color white
		extension: 	a MorphExtension (276824064) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(683409408)
		scroller: 	a TransformMorph(587988992)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(599523328)
		textMorph: 	a TextMorphForEditView(298057728)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(74 to: 73)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(298057728)
	Arguments and temporary variables: 
		editBlock: 	[ result := editBlock value ]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@82)
		owner: 	a TransformMorph(587988992)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@82)
		color: 	Color black
		extension: 	a MorphExtension (358875136) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'course := CourseDEscargots new.
course demarrer.
course arret...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(643563520)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(643563520)
	Arguments and temporary variables: 
		result: 	nil
		editBlock: 	[ textMorph editor evaluateSelection ]
	Receiver's instance variables: 
		bounds: 	(401.0@68.0) corner: (841.0@235.0)
		owner: 	a SystemWindow(995885056)
		submorphs: 	an Array(a TransformMorph(587988992))
		fullBounds: 	(401.0@68.0) corner: (841.0@235.0)
		color: 	Color white
		extension: 	a MorphExtension (276824064) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(683409408)
		scroller: 	a TransformMorph(587988992)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(599523328)
		textMorph: 	a TextMorphForEditView(298057728)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(74 to: 73)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(643563520)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(401.0@68.0) corner: (841.0@235.0)
		owner: 	a SystemWindow(995885056)
		submorphs: 	an Array(a TransformMorph(587988992))
		fullBounds: 	(401.0@68.0) corner: (841.0@235.0)
		color: 	Color white
		extension: 	a MorphExtension (276824064) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(683409408)
		scroller: 	a TransformMorph(587988992)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(599523328)
		textMorph: 	a TextMorphForEditView(298057728)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(74 to: 73)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


[ :morph | morph doIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: SmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		morph: 	a PluggableTextMorph(643563520)
	Receiver's instance variables: 
		superclass: 	TextEditor
		methodDict: 	a MethodDictionary(#argAdvance:->SmalltalkEditor>>#argAdvance: #bro...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SmalltalkEditor
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Text-Edition'
		traitComposition: 	{}
		localSelectors: 	nil
		cmdActions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop...etc...
		shiftCmdActions: 	#(#noop: #argAdvance: #noop: #compareToClipboard: #debugIt: #m...etc...


BlockClosure>>cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(643563520)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	157
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(643563520)
		secondArg: 	a PluggableTextMorph(643563520)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	157
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(643563520)
		secondArg: 	a PluggableTextMorph(643563520)
		thirdArg: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	157
		numArgs: 	1


KMCategoryBinding>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#doIt on Cmd + D do [ :morph | morph doIt ]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(643563520)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(643563520)


[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Cmd + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		l: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[ :l | l completeMatch: self buffer: aBuffer ]
		index: 	1
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Cmd + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #doIt on Cmd + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
		entry: 	#doIt on Cmd + D do [ :morph | morph doIt ]

	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


Set>>do:
	Receiver: a Set(#inspectIt on Cmd + I do [ :morph | morph inspectIt ]
 #sendersOfIt on Cmd + N do [ ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andD...etc...
		index: 	9
		each: 	#doIt on Cmd + D do [ :morph | morph doIt ]

	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(#inspectIt on Cmd + I do [ :morph | morph inspectIt ]
 #senders...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aListener: 	a KMDispatcher
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(643563520)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(643563520)


[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextMorphTab) aKMCategoryTarget(#MorphFocusCt...etc...
		morph: 	a PluggableTextMorph(643563520)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#TextMorphTab) aKMCategoryTa...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyM...etc...
		index: 	4
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#TextMorphTab) aKMCate...etc...
		firstIndex: 	1
		lastIndex: 	7


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextMorphTab) aKMCategoryTarget(#MorphFocusCt...etc...
		morph: 	a PluggableTextMorph(643563520)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a PluggableTextMorph(643563520)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		targetToDispatch: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>do:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aBlock: 	[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstan...etc...
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
		chain: 	a KMDispatchChain
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextMorph) aKMCategoryTarget(#MorphFocusCtrlN...etc...
		morph: 	a TextMorphForEditView(298057728)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(298057728)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@82)
		owner: 	a TransformMorph(587988992)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@82)
		color: 	Color black
		extension: 	a MorphExtension (358875136) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'course := CourseDEscargots new.
course demarrer.
course arret...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(643563520)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(298057728)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@82)
		owner: 	a TransformMorph(587988992)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@82)
		color: 	Color black
		extension: 	a MorphExtension (358875136) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'course := CourseDEscargots new.
course demarrer.
course arret...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(643563520)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-d>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(298057728)
	Receiver's instance variables: 
		timeStamp: 	8094467
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	(170.0@36.0)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	100
		charCode: 	100
		scanCode: 	2


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(298057728)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@82)
		owner: 	a TransformMorph(587988992)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@82)
		color: 	Color black
		extension: 	a MorphExtension (358875136) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'course := CourseDEscargots new.
course demarrer.
course arret...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(643563520)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(298057728)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@82)
		owner: 	a TransformMorph(587988992)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@82)
		color: 	Color black
		extension: 	a MorphExtension (358875136) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'course := CourseDEscargots new.
course demarrer.
course arret...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(643563520)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(298057728)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(567@96.0) corner: (583@112.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(567@96.0) corner: (583@112.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(298057728)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(575@105) mouseOver nil nil]
		targetOffset: 	(170.0@36.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8094039 575 105 0 0 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #delete
CourseDEscargots>>arreterAffichage
UndefinedObject>>DoIt
OpalCompiler>>evaluate
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[ textMorph editor evaluateSelection ] in PluggableTextMorph>>doIt
[ result := editBlock value ] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
[ :morph | morph doIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Duration>>adaptToNumber:andSend:
6 March 2015 7:35:05.847358 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

Duration(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
	Receiver: 0:00:00:00.1
	Arguments and temporary variables: 
		aMessage: 	adaptToNumber: 235 andSend: #*
		exception: 	MessageNotUnderstood: Duration>>adaptToNumber:andSend:
		resumeValue: 	nil
	Receiver's instance variables: 
		nanos: 	100000000
		seconds: 	0


Duration(Object)>>adaptToInteger:andSend:
	Receiver: 0:00:00:00.1
	Arguments and temporary variables: 
		rcvr: 	235
		selector: 	#*
	Receiver's instance variables: 
		nanos: 	100000000
		seconds: 	0


SmallInteger(Integer)>>*
	Receiver: 235
	Arguments and temporary variables: 
		aNumber: 	0:00:00:00.1
	Receiver's instance variables: 
235

SmallInteger>>*
	Receiver: 235
	Arguments and temporary variables: 
		aNumber: 	0:00:00:00.1
	Receiver's instance variables: 
235

Arbitre>>arreterLaCourse
	Receiver: an Arbitre
	Arguments and temporary variables: 

	Receiver's instance variables: 
		course: 	a CourseDEscargots
		temps: 	235


[ 
self arriveeAtteinte
	ifTrue: [ ^ self arreterLaCourse ].
temps := temps + 1.
self dureeUnPasDeTemps asDelay wait ] in Arbitre>>boucleArbitrage
	Receiver: an Arbitre
	Arguments and temporary variables: 

	Receiver's instance variables: 
		course: 	a CourseDEscargots
		temps: 	235


BlockClosure>>repeat
	Receiver: [ 
self arriveeAtteinte
	ifTrue: [ ^ self arreterLaCourse ].
temps := temps + 1.
self dure...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Arbitre>>boucleArbitrage
		startpc: 	45
		numArgs: 	0


Arbitre>>boucleArbitrage
	Receiver: an Arbitre
	Arguments and temporary variables: 

	Receiver's instance variables: 
		course: 	a CourseDEscargots
		temps: 	235


[ 
temps := 0.
self boucleArbitrage ] in Arbitre>>demarrerArbitrage
	Receiver: an Arbitre
	Arguments and temporary variables: 

	Receiver's instance variables: 
		course: 	a CourseDEscargots
		temps: 	235


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
temps := 0.
self boucleArbitrage ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Arbitre>>demarrerArbitrage
		startpc: 	33
		numArgs: 	0



--- The full stack ---
Duration(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
Duration(Object)>>adaptToInteger:andSend:
SmallInteger(Integer)>>*
SmallInteger>>*
Arbitre>>arreterLaCourse
[ 
self arriveeAtteinte
	ifTrue: [ ^ self arreterLaCourse ].
temps := temps + 1.
self dureeUnPasDeTemps asDelay wait ] in Arbitre>>boucleArbitrage
BlockClosure>>repeat
Arbitre>>boucleArbitrage
[ 
temps := 0.
self boucleArbitrage ] in Arbitre>>demarrerArbitrage
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Duration>>asNumber
6 March 2015 7:35:39.347166 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

Duration(Object)>>doesNotUnderstand: #asNumber
	Receiver: 0:00:00:00.1
	Arguments and temporary variables: 
		aMessage: 	asNumber
		exception: 	MessageNotUnderstood: Duration>>asNumber
		resumeValue: 	nil
	Receiver's instance variables: 
		nanos: 	100000000
		seconds: 	0


Duration>>DoIt
	Receiver: 0:00:00:00.1
	Arguments and temporary variables: 

	Receiver's instance variables: 
		nanos: 	100000000
		seconds: 	0


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'self asNumber'
		itsSelection: 	a Text for 'self asNumber'
		itsSelectionString: 	'self asNumber'
	Receiver's instance variables: 
		ast: 	DoIt
	^ self asNumber
		source: 	a ReadStream
		context: 	nil
		receiver: 	0:00:00:00.1
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
printString := [ result printString ]
	on: Error
	do: [ '<...etc...
		result: 	nil
		rcvr: 	0:00:00:00.1
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(739246080)
		selectionShowing: 	true
		model: 	a MorphicTextAdapter
		editingState: 	a SmalltalkEditingState


[ 
(oldEditor := textMorph editor)
	evaluateSelectionAndDo: [ :result | 
		printString := [ result printString ]
			on: Error
			do: [ '<error in printString: try ''Inspect it'' to debug>' ].
		selectionInterval := oldEditor selectionInterval.
		textMorph installEditorToReplace: oldEditor.
		textMorph handleEdit: [ oldEditor afterSelectionInsertAndSelect: printString ].
		selectionInterval := oldEditor selectionInterval.
		textMorph editor selectFrom: selectionInterval first to: selectionInterval last.
		self scrollSelectionIntoView ] ] in PluggableTextMorph>>printIt
	Receiver: a PluggableTextMorph(981467136)
	Arguments and temporary variables: 
		oldEditor: 	a SmalltalkEditor
		printString: 	nil
	Receiver's instance variables: 
		bounds: 	(505.0@330.0) corner: (895.0@397.0)
		owner: 	a PanelMorph(86245376)
		submorphs: 	an Array(a TransformMorph(552075264))
		fullBounds: 	(505@330) corner: (895@397)
		color: 	Color white
		extension: 	a MorphExtension (964952064) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color transparent
		model: 	a MorphicTextAdapter
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1009254400)
		scroller: 	a TransformMorph(552075264)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(810811392)
		textMorph: 	a TextMorphForEditView(739246080)
		getTextSelector: 	#getText
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#readSelection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(15 to: 14)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	false
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	#setSelection:


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(739246080)
	Arguments and temporary variables: 
		editBlock: 	[ 
(oldEditor := textMorph editor)
	evaluateSelectionAndDo: [ :resul...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (384@18)
		owner: 	a TransformMorph(552075264)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (384@18)
		color: 	Color black
		extension: 	a MorphExtension (788004864) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'self asNumber '
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(981467136)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>printIt
	Receiver: a PluggableTextMorph(981467136)
	Arguments and temporary variables: 
		oldEditor: 	a SmalltalkEditor
		printString: 	nil
	Receiver's instance variables: 
		bounds: 	(505.0@330.0) corner: (895.0@397.0)
		owner: 	a PanelMorph(86245376)
		submorphs: 	an Array(a TransformMorph(552075264))
		fullBounds: 	(505@330) corner: (895@397)
		color: 	Color white
		extension: 	a MorphExtension (964952064) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color transparent
		model: 	a MorphicTextAdapter
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1009254400)
		scroller: 	a TransformMorph(552075264)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(810811392)
		textMorph: 	a TextMorphForEditView(739246080)
		getTextSelector: 	#getText
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#readSelection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(15 to: 14)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	false
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	#setSelection:


[ :morph | morph printIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: SmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		morph: 	a PluggableTextMorph(981467136)
	Receiver's instance variables: 
		superclass: 	TextEditor
		methodDict: 	a MethodDictionary(#argAdvance:->SmalltalkEditor>>#argAdvance: #bro...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SmalltalkEditor
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Text-Edition'
		traitComposition: 	{}
		localSelectors: 	nil
		cmdActions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop...etc...
		shiftCmdActions: 	#(#noop: #argAdvance: #noop: #compareToClipboard: #debugIt: #m...etc...


BlockClosure>>cull:
	Receiver: [ :morph | morph printIt ]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(981467136)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	277
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :morph | morph printIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(981467136)
		secondArg: 	a PluggableTextMorph(981467136)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	277
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [ :morph | morph printIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(981467136)
		secondArg: 	a PluggableTextMorph(981467136)
		thirdArg: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	277
		numArgs: 	1


KMCategoryBinding>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#printIt on Cmd + P do [ :morph | morph printIt ]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(981467136)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(981467136)


[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #printIt on Cmd + P do [ :morph | morph printIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		l: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		action: 	[ :morph | morph printIt ]
		name: 	#printIt
		shortcut: 	Cmd + P
		defaultShortcut: 	Cmd + P
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[ :l | l completeMatch: self buffer: aBuffer ]
		index: 	1
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #printIt on Cmd + P do [ :morph | morph printIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[ :morph | morph printIt ]
		name: 	#printIt
		shortcut: 	Cmd + P
		defaultShortcut: 	Cmd + P
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #printIt on Cmd + P do [ :morph | morph printIt ]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		action: 	[ :morph | morph printIt ]
		name: 	#printIt
		shortcut: 	Cmd + P
		defaultShortcut: 	Cmd + P
		description: 	''


[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
		entry: 	#printIt on Cmd + P do [ :morph | morph printIt ]

	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


Set>>do:
	Receiver: a Set(#inspectIt on Cmd + I do [ :morph | morph inspectIt ]
 #sendersOfIt on Cmd + N do [ ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andD...etc...
		index: 	5
		each: 	#printIt on Cmd + P do [ :morph | morph printIt ]

	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(#inspectIt on Cmd + I do [ :morph | morph inspectIt ]
 #senders...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		aListener: 	a KMDispatcher
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(981467136)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(981467136)


[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#TextMorphTab) ...etc...
		morph: 	a PluggableTextMorph(981467136)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCategoryTarg...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyM...etc...
		index: 	4
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCatego...etc...
		firstIndex: 	1
		lastIndex: 	7


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#TextMorphTab) ...etc...
		morph: 	a PluggableTextMorph(981467136)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a PluggableTextMorph(981467136)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
		targetToDispatch: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>do:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aBlock: 	[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstan...etc...
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-p>']
		chain: 	a KMDispatchChain
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a TextMorphForEditView(739246080)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(739246080)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (384@18)
		owner: 	a TransformMorph(552075264)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (384@18)
		color: 	Color black
		extension: 	a MorphExtension (788004864) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'self asNumber '
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(981467136)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(739246080)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (384@18)
		owner: 	a TransformMorph(552075264)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (384@18)
		color: 	Color black
		extension: 	a MorphExtension (788004864) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'self asNumber '
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(981467136)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-p>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(739246080)
	Receiver's instance variables: 
		timeStamp: 	8727275
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	(250.0@28.0)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	112
		scanCode: 	35


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(739246080)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (384@18)
		owner: 	a TransformMorph(552075264)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (384@18)
		color: 	Color black
		extension: 	a MorphExtension (788004864) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'self asNumber '
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(981467136)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(739246080)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (384@18)
		owner: 	a TransformMorph(552075264)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (384@18)
		color: 	Color black
		extension: 	a MorphExtension (788004864) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'self asNumber '
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(981467136)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(739246080)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(758@358.0) corner: (774@374.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(739246080)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(758@358) mouseOver nil nil]
		targetOffset: 	(253.0@28.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8723152 758 358 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@846)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a TickingSpecWindow(506724352) a ...etc...
		fullBounds: 	(0@0) corner: (1440@846)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.063 g: 0.063 b: 0.063 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(739246080)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(758@358.0) corner: (774@374.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(739246080)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(758@358) mouseOver nil nil]
		targetOffset: 	(253.0@28.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8723152 758 358 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(739246080)
		aBlock: 	[ self keyboardFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(758@358.0) corner: (774@374.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(739246080)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(758@358) mouseOver nil nil]
		targetOffset: 	(253.0@28.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8723152 758 358 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	(758@358.0) corner: (774@374.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(739246080)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(758@358) mouseOver nil nil]
		targetOffset: 	(253.0@28.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8723152 758 358 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8



--- The full stack ---
Duration(Object)>>doesNotUnderstand: #asNumber
Duration>>DoIt
OpalCompiler>>evaluate
SmalltalkEditor>>evaluateSelectionAndDo:
[ 
(oldEditor := textMorph editor)
	evaluateSelectionAndDo: [ :result | 
		printString := [ result printString ]
			on: Error
			do: [ '<error in printString: try ''Inspect it'' to debug>' ].
		selectionInterval := oldEditor selectionInterval.
		textMorph installEditorToReplace: oldEditor.
		textMorph handleEdit: [ oldEditor afterSelectionInsertAndSelect: printString ].
		selectionInterval := oldEditor selectionInterval.
		textMorph editor selectFrom: selectionInterval first to: selectionInterval last.
		self scrollSelectionIntoView ] ] in PluggableTextMorph>>printIt
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>printIt
[ :morph | morph printIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Duration>>nanos
6 March 2015 7:35:49.915868 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

Duration(Object)>>doesNotUnderstand: #nanos
	Receiver: 0:00:00:00.1
	Arguments and temporary variables: 
		aMessage: 	nanos
		exception: 	MessageNotUnderstood: Duration>>nanos
		resumeValue: 	nil
	Receiver's instance variables: 
		nanos: 	100000000
		seconds: 	0


Duration>>DoIt
	Receiver: 0:00:00:00.1
	Arguments and temporary variables: 

	Receiver's instance variables: 
		nanos: 	100000000
		seconds: 	0


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'self nanos'
		itsSelection: 	a Text for 'self nanos'
		itsSelectionString: 	'self nanos'
	Receiver's instance variables: 
		ast: 	DoIt
	^ self nanos
		source: 	a ReadStream
		context: 	nil
		receiver: 	0:00:00:00.1
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
printString := [ result printString ]
	on: Error
	do: [ '<...etc...
		result: 	nil
		rcvr: 	0:00:00:00.1
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(739246080)
		selectionShowing: 	true
		model: 	a MorphicTextAdapter
		editingState: 	a SmalltalkEditingState


[ 
(oldEditor := textMorph editor)
	evaluateSelectionAndDo: [ :result | 
		printString := [ result printString ]
			on: Error
			do: [ '<error in printString: try ''Inspect it'' to debug>' ].
		selectionInterval := oldEditor selectionInterval.
		textMorph installEditorToReplace: oldEditor.
		textMorph handleEdit: [ oldEditor afterSelectionInsertAndSelect: printString ].
		selectionInterval := oldEditor selectionInterval.
		textMorph editor selectFrom: selectionInterval first to: selectionInterval last.
		self scrollSelectionIntoView ] ] in PluggableTextMorph>>printIt
	Receiver: a PluggableTextMorph(981467136)
	Arguments and temporary variables: 
		oldEditor: 	a SmalltalkEditor
		printString: 	nil
	Receiver's instance variables: 
		bounds: 	(505.0@330.0) corner: (895.0@397.0)
		owner: 	a PanelMorph(86245376)
		submorphs: 	an Array(a TransformMorph(552075264))
		fullBounds: 	(505@330) corner: (895@397)
		color: 	Color white
		extension: 	a MorphExtension (964952064) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color transparent
		model: 	a MorphicTextAdapter
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1009254400)
		scroller: 	a TransformMorph(552075264)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(810811392)
		textMorph: 	a TextMorphForEditView(739246080)
		getTextSelector: 	#getText
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#readSelection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(11 to: 10)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	false
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	#setSelection:


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(739246080)
	Arguments and temporary variables: 
		editBlock: 	[ 
(oldEditor := textMorph editor)
	evaluateSelectionAndDo: [ :resul...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (384@18)
		owner: 	a TransformMorph(552075264)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (384@18)
		color: 	Color black
		extension: 	a MorphExtension (788004864) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'self nanos '
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(981467136)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>printIt
	Receiver: a PluggableTextMorph(981467136)
	Arguments and temporary variables: 
		oldEditor: 	a SmalltalkEditor
		printString: 	nil
	Receiver's instance variables: 
		bounds: 	(505.0@330.0) corner: (895.0@397.0)
		owner: 	a PanelMorph(86245376)
		submorphs: 	an Array(a TransformMorph(552075264))
		fullBounds: 	(505@330) corner: (895@397)
		color: 	Color white
		extension: 	a MorphExtension (964952064) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color transparent
		model: 	a MorphicTextAdapter
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1009254400)
		scroller: 	a TransformMorph(552075264)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(810811392)
		textMorph: 	a TextMorphForEditView(739246080)
		getTextSelector: 	#getText
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#readSelection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(11 to: 10)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	false
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	#setSelection:


[ :morph | morph printIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: SmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		morph: 	a PluggableTextMorph(981467136)
	Receiver's instance variables: 
		superclass: 	TextEditor
		methodDict: 	a MethodDictionary(#argAdvance:->SmalltalkEditor>>#argAdvance: #bro...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SmalltalkEditor
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Text-Edition'
		traitComposition: 	{}
		localSelectors: 	nil
		cmdActions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop...etc...
		shiftCmdActions: 	#(#noop: #argAdvance: #noop: #compareToClipboard: #debugIt: #m...etc...


BlockClosure>>cull:
	Receiver: [ :morph | morph printIt ]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(981467136)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	277
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :morph | morph printIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(981467136)
		secondArg: 	a PluggableTextMorph(981467136)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	277
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [ :morph | morph printIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(981467136)
		secondArg: 	a PluggableTextMorph(981467136)
		thirdArg: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	277
		numArgs: 	1


KMCategoryBinding>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#printIt on Cmd + P do [ :morph | morph printIt ]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(981467136)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(981467136)


[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #printIt on Cmd + P do [ :morph | morph printIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		l: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		action: 	[ :morph | morph printIt ]
		name: 	#printIt
		shortcut: 	Cmd + P
		defaultShortcut: 	Cmd + P
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[ :l | l completeMatch: self buffer: aBuffer ]
		index: 	1
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #printIt on Cmd + P do [ :morph | morph printIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[ :morph | morph printIt ]
		name: 	#printIt
		shortcut: 	Cmd + P
		defaultShortcut: 	Cmd + P
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #printIt on Cmd + P do [ :morph | morph printIt ]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		action: 	[ :morph | morph printIt ]
		name: 	#printIt
		shortcut: 	Cmd + P
		defaultShortcut: 	Cmd + P
		description: 	''


[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
		entry: 	#printIt on Cmd + P do [ :morph | morph printIt ]

	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


Set>>do:
	Receiver: a Set(#inspectIt on Cmd + I do [ :morph | morph inspectIt ]
 #sendersOfIt on Cmd + N do [ ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andD...etc...
		index: 	5
		each: 	#printIt on Cmd + P do [ :morph | morph printIt ]

	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(#inspectIt on Cmd + I do [ :morph | morph inspectIt ]
 #senders...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		aListener: 	a KMDispatcher
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(981467136)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(981467136)


[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#TextMorphTab) ...etc...
		morph: 	a PluggableTextMorph(981467136)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCategoryTarg...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyM...etc...
		index: 	4
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCatego...etc...
		firstIndex: 	1
		lastIndex: 	7


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#TextMorphTab) ...etc...
		morph: 	a PluggableTextMorph(981467136)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a PluggableTextMorph(981467136)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
		targetToDispatch: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>do:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aBlock: 	[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstan...etc...
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-p>']
		chain: 	a KMDispatchChain
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a TextMorphForEditView(739246080)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(739246080)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (384@18)
		owner: 	a TransformMorph(552075264)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (384@18)
		color: 	Color black
		extension: 	a MorphExtension (788004864) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'self nanos '
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(981467136)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(739246080)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (384@18)
		owner: 	a TransformMorph(552075264)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (384@18)
		color: 	Color black
		extension: 	a MorphExtension (788004864) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'self nanos '
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(981467136)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-p>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(739246080)
	Receiver's instance variables: 
		timeStamp: 	8737876
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	(69.0@8.0)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	112
		scanCode: 	35


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(739246080)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (384@18)
		owner: 	a TransformMorph(552075264)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (384@18)
		color: 	Color black
		extension: 	a MorphExtension (788004864) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'self nanos '
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(981467136)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(739246080)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (384@18)
		owner: 	a TransformMorph(552075264)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (384@18)
		color: 	Color black
		extension: 	a MorphExtension (788004864) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'self nanos '
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(981467136)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(739246080)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(569@329.0) corner: (585@345.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(569@329.0) corner: (585@345.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(739246080)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(577@338) mouseOver nil nil]
		targetOffset: 	(69.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8730745 577 338 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@846)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a TickingSpecWindow(506724352) a ...etc...
		fullBounds: 	(0@0) corner: (1440@846)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.063 g: 0.063 b: 0.063 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(739246080)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(569@329.0) corner: (585@345.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(569@329.0) corner: (585@345.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(739246080)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(577@338) mouseOver nil nil]
		targetOffset: 	(69.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8730745 577 338 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(739246080)
		aBlock: 	[ self keyboardFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(569@329.0) corner: (585@345.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(569@329.0) corner: (585@345.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(739246080)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(577@338) mouseOver nil nil]
		targetOffset: 	(69.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8730745 577 338 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	(569@329.0) corner: (585@345.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(569@329.0) corner: (585@345.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(739246080)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(577@338) mouseOver nil nil]
		targetOffset: 	(69.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8730745 577 338 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8



--- The full stack ---
Duration(Object)>>doesNotUnderstand: #nanos
Duration>>DoIt
OpalCompiler>>evaluate
SmalltalkEditor>>evaluateSelectionAndDo:
[ 
(oldEditor := textMorph editor)
	evaluateSelectionAndDo: [ :result | 
		printString := [ result printString ]
			on: Error
			do: [ '<error in printString: try ''Inspect it'' to debug>' ].
		selectionInterval := oldEditor selectionInterval.
		textMorph installEditorToReplace: oldEditor.
		textMorph handleEdit: [ oldEditor afterSelectionInsertAndSelect: printString ].
		selectionInterval := oldEditor selectionInterval.
		textMorph editor selectFrom: selectionInterval first to: selectionInterval last.
		self scrollSelectionIntoView ] ] in PluggableTextMorph>>printIt
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>printIt
[ :morph | morph printIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Duration>>milliSeconds
6 March 2015 7:36:07.305473 pm

VM: Mac OS - intel - 1095 - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30862]

Duration(Object)>>doesNotUnderstand: #milliSeconds
	Receiver: 0:00:00:00.1
	Arguments and temporary variables: 
		aMessage: 	milliSeconds
		exception: 	MessageNotUnderstood: Duration>>milliSeconds
		resumeValue: 	nil
	Receiver's instance variables: 
		nanos: 	100000000
		seconds: 	0


Duration>>DoIt
	Receiver: 0:00:00:00.1
	Arguments and temporary variables: 

	Receiver's instance variables: 
		nanos: 	100000000
		seconds: 	0


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'self milliSeconds'
		itsSelection: 	a Text for 'self milliSeconds'
		itsSelectionString: 	'self milliSeconds'
	Receiver's instance variables: 
		ast: 	DoIt
	^ self milliSeconds
		source: 	a ReadStream
		context: 	nil
		receiver: 	0:00:00:00.1
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
printString := [ result printString ]
	on: Error
	do: [ '<...etc...
		result: 	nil
		rcvr: 	0:00:00:00.1
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(739246080)
		selectionShowing: 	true
		model: 	a MorphicTextAdapter
		editingState: 	a SmalltalkEditingState


[ 
(oldEditor := textMorph editor)
	evaluateSelectionAndDo: [ :result | 
		printString := [ result printString ]
			on: Error
			do: [ '<error in printString: try ''Inspect it'' to debug>' ].
		selectionInterval := oldEditor selectionInterval.
		textMorph installEditorToReplace: oldEditor.
		textMorph handleEdit: [ oldEditor afterSelectionInsertAndSelect: printString ].
		selectionInterval := oldEditor selectionInterval.
		textMorph editor selectFrom: selectionInterval first to: selectionInterval last.
		self scrollSelectionIntoView ] ] in PluggableTextMorph>>printIt
	Receiver: a PluggableTextMorph(981467136)
	Arguments and temporary variables: 
		oldEditor: 	a SmalltalkEditor
		printString: 	nil
	Receiver's instance variables: 
		bounds: 	(120.0@305.0) corner: (510.0@372.0)
		owner: 	a PanelMorph(86245376)
		submorphs: 	an Array(a TransformMorph(552075264))
		fullBounds: 	(120@305) corner: (510@372)
		color: 	Color white
		extension: 	a MorphExtension (964952064) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color transparent
		model: 	a MorphicTextAdapter
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1009254400)
		scroller: 	a TransformMorph(552075264)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(810811392)
		textMorph: 	a TextMorphForEditView(739246080)
		getTextSelector: 	#getText
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#readSelection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(12 to: 11)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	false
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	#setSelection:


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(739246080)
	Arguments and temporary variables: 
		editBlock: 	[ 
(oldEditor := textMorph editor)
	evaluateSelectionAndDo: [ :resul...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (384@18)
		owner: 	a TransformMorph(552075264)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (384@18)
		color: 	Color black
		extension: 	a MorphExtension (788004864) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'self milliSeconds '
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(981467136)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>printIt
	Receiver: a PluggableTextMorph(981467136)
	Arguments and temporary variables: 
		oldEditor: 	a SmalltalkEditor
		printString: 	nil
	Receiver's instance variables: 
		bounds: 	(120.0@305.0) corner: (510.0@372.0)
		owner: 	a PanelMorph(86245376)
		submorphs: 	an Array(a TransformMorph(552075264))
		fullBounds: 	(120@305) corner: (510@372)
		color: 	Color white
		extension: 	a MorphExtension (964952064) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color transparent
		model: 	a MorphicTextAdapter
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1009254400)
		scroller: 	a TransformMorph(552075264)
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(810811392)
		textMorph: 	a TextMorphForEditView(739246080)
		getTextSelector: 	#getText
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#readSelection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(12 to: 11)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	false
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	#setSelection:


[ :morph | morph printIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: SmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		morph: 	a PluggableTextMorph(981467136)
	Receiver's instance variables: 
		superclass: 	TextEditor
		methodDict: 	a MethodDictionary(#argAdvance:->SmalltalkEditor>>#argAdvance: #bro...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SmalltalkEditor
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Text-Edition'
		traitComposition: 	{}
		localSelectors: 	nil
		cmdActions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop...etc...
		shiftCmdActions: 	#(#noop: #argAdvance: #noop: #compareToClipboard: #debugIt: #m...etc...


BlockClosure>>cull:
	Receiver: [ :morph | morph printIt ]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(981467136)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	277
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :morph | morph printIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(981467136)
		secondArg: 	a PluggableTextMorph(981467136)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	277
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [ :morph | morph printIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(981467136)
		secondArg: 	a PluggableTextMorph(981467136)
		thirdArg: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	277
		numArgs: 	1


KMCategoryBinding>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#printIt on Cmd + P do [ :morph | morph printIt ]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(981467136)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(981467136)


[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #printIt on Cmd + P do [ :morph | morph printIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		l: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		action: 	[ :morph | morph printIt ]
		name: 	#printIt
		shortcut: 	Cmd + P
		defaultShortcut: 	Cmd + P
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[ :l | l completeMatch: self buffer: aBuffer ]
		index: 	1
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #printIt on Cmd + P do [ :morph | morph printIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[ :morph | morph printIt ]
		name: 	#printIt
		shortcut: 	Cmd + P
		defaultShortcut: 	Cmd + P
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #printIt on Cmd + P do [ :morph | morph printIt ]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		action: 	[ :morph | morph printIt ]
		name: 	#printIt
		shortcut: 	Cmd + P
		defaultShortcut: 	Cmd + P
		description: 	''


[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
		entry: 	#printIt on Cmd + P do [ :morph | morph printIt ]

	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


Set>>do:
	Receiver: a Set(#inspectIt on Cmd + I do [ :morph | morph inspectIt ]
 #sendersOfIt on Cmd + N do [ ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andD...etc...
		index: 	5
		each: 	#printIt on Cmd + P do [ :morph | morph printIt ]

	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(#inspectIt on Cmd + I do [ :morph | morph inspectIt ]
 #senders...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		aListener: 	a KMDispatcher
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(981467136)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(981467136)


[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#TextMorphTab) ...etc...
		morph: 	a PluggableTextMorph(981467136)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCategoryTarg...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyM...etc...
		index: 	4
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCatego...etc...
		firstIndex: 	1
		lastIndex: 	7


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#TextMorphTab) ...etc...
		morph: 	a PluggableTextMorph(981467136)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a PluggableTextMorph(981467136)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
		targetToDispatch: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>do:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aBlock: 	[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstan...etc...
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-p>']
		chain: 	a KMDispatchChain
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a TextMorphForEditView(739246080)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(739246080)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (384@18)
		owner: 	a TransformMorph(552075264)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (384@18)
		color: 	Color black
		extension: 	a MorphExtension (788004864) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'self milliSeconds '
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(981467136)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(739246080)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (384@18)
		owner: 	a TransformMorph(552075264)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (384@18)
		color: 	Color black
		extension: 	a MorphExtension (788004864) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'self milliSeconds '
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(981467136)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-p>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(739246080)
	Receiver's instance variables: 
		timeStamp: 	8755266
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	(65.0@21.0)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	112
		scanCode: 	35


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(739246080)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (384@18)
		owner: 	a TransformMorph(552075264)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (384@18)
		color: 	Color black
		extension: 	a MorphExtension (788004864) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'self milliSeconds '
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(981467136)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(739246080)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (384@18)
		owner: 	a TransformMorph(552075264)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (384@18)
		color: 	Color black
		extension: 	a MorphExtension (788004864) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'self milliSeconds '
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(981467136)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(739246080)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(180@317.0) corner: (196@333.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	a NECMenuMorph(626262016)
		keyboardFocus: 	a TextMorphForEditView(739246080)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(180@317) mouseOver nil nil]
		targetOffset: 	(60.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8753628 180 317 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(180@317) mouseOver nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@846)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a NECMenuMorph(626262016) a Ticki...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.063 g: 0.063 b: 0.063 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(739246080)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(180@317.0) corner: (196@333.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	a NECMenuMorph(626262016)
		keyboardFocus: 	a TextMorphForEditView(739246080)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(180@317) mouseOver nil nil]
		targetOffset: 	(60.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8753628 180 317 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(739246080)
		aBlock: 	[ self keyboardFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(180@317.0) corner: (196@333.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	a NECMenuMorph(626262016)
		keyboardFocus: 	a TextMorphForEditView(739246080)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(180@317) mouseOver nil nil]
		targetOffset: 	(60.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8753628 180 317 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	(180@317.0) corner: (196@333.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	a NECMenuMorph(626262016)
		keyboardFocus: 	a TextMorphForEditView(739246080)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(180@317) mouseOver nil nil]
		targetOffset: 	(60.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8753628 180 317 0 0 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8



--- The full stack ---
Duration(Object)>>doesNotUnderstand: #milliSeconds
Duration>>DoIt
OpalCompiler>>evaluate
SmalltalkEditor>>evaluateSelectionAndDo:
[ 
(oldEditor := textMorph editor)
	evaluateSelectionAndDo: [ :result | 
		printString := [ result printString ]
			on: Error
			do: [ '<error in printString: try ''Inspect it'' to debug>' ].
		selectionInterval := oldEditor selectionInterval.
		textMorph installEditorToReplace: oldEditor.
		textMorph handleEdit: [ oldEditor afterSelectionInsertAndSelect: printString ].
		selectionInterval := oldEditor selectionInterval.
		textMorph editor selectFrom: selectionInterval first to: selectionInterval last.
		self scrollSelectionIntoView ] ] in PluggableTextMorph>>printIt
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>printIt
[ :morph | morph printIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------


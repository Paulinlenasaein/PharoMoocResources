Object subclass: #AfficheurTextuelDeLampe	instanceVariableNames: 'affichageAutorise'	classVariableNames: ''	poolDictionaries: ''	category: 'Trafic'!!AfficheurTextuelDeLampe commentStamp: 'NouryBouraqadi 1/30/2014 15:27' prior: 0!Affiche l'état de lampe et éventuellement sa couleur!!AfficheurTextuelDeLampe methodsFor: 'initialisation' stamp: 'NouryBouraqadi 1/30/2014 15:25'!affichageAutoriseParDefaut 	^true! !!AfficheurTextuelDeLampe methodsFor: 'initialisation' stamp: 'NouryBouraqadi 1/30/2014 15:26'!initialize 	super initialize .	self affichageAutorise: self affichageAutoriseParDefaut 	! !!AfficheurTextuelDeLampe methodsFor: 'affichage' stamp: 'NouryBouraqadi 1/30/2014 15:32'!miseAJourAvec: uneLampe	self affichageAutorise ifFalse: [ ^self ].	Transcript cr.	uneLampe estAllumee ifFalse: [ ^Transcript show: 'Lampe eteinte' ].	Transcript 		show: 'Lampe allumee de couleur : ';		show: uneLampe couleur name! !!AfficheurTextuelDeLampe methodsFor: 'affichage' stamp: 'NouryBouraqadi 1/30/2014 15:25'!affichageAutorise	^ affichageAutorise! !!AfficheurTextuelDeLampe methodsFor: 'affichage' stamp: 'NouryBouraqadi 1/30/2014 15:29'!demarrerAffichage 	^self affichageAutorise: true! !!AfficheurTextuelDeLampe methodsFor: 'affichage' stamp: 'NouryBouraqadi 1/30/2014 15:30'!arreterAffichage 	^self affichageAutorise: false! !!AfficheurTextuelDeLampe methodsFor: 'affichage' stamp: 'NouryBouraqadi 1/30/2014 15:25'!affichageAutorise: anObject	affichageAutorise := anObject! !(MaComponent subclass: #AfficheurGraphiqueDeLampe	instanceVariableNames: 'disque position'	classVariableNames: ''	poolDictionaries: ''	category: 'Trafic')forward: {}!!AfficheurGraphiqueDeLampe commentStamp: 'NouryBouraqadi 1/28/2015 15:46' prior: 0!Un AfficheurGraphiqueDeLampe gère un disque de couleur qui représente graphiquement la lampe.Instance Variables	disque:		<EllipseMorph>	position: <Point>	disque	- objet graphique qui représente la lampeposition	- position de l'afficheur!!AfficheurGraphiqueDeLampe methodsFor: 'accessing' stamp: 'NouryBouraqadi 1/28/2015 15:12'!view	^disque! !!AfficheurGraphiqueDeLampe methodsFor: 'accessing' stamp: 'NouryBouraqadi 1/28/2015 15:18'!name	^'Lampe'! !!AfficheurGraphiqueDeLampe methodsFor: 'affichage' stamp: 'NouryBouraqadi 1/28/2015 15:35'!rootMorph	|root|	root := self view.	[ root notNil] whileTrue: [ 		root ifNil: [ ^nil ].		root owner == World ifTrue: [ ^root ].		root := root owner ].	^nil! !!AfficheurGraphiqueDeLampe methodsFor: 'affichage' stamp: 'NouryBouraqadi 1/28/2015 15:06'!miseAJourAvec: uneLampe	disque color: uneLampe couleur! !!AfficheurGraphiqueDeLampe methodsFor: 'affichage' stamp: 'NouryBouraqadi 1/28/2015 15:35'!demarrerAffichage	disque position: 0@0.	self start.	self rootMorph position: position! !!AfficheurGraphiqueDeLampe methodsFor: 'affichage' stamp: 'NouryBouraqadi 1/28/2015 15:27'!arreterAffichage	self stop.! !!AfficheurGraphiqueDeLampe methodsFor: 'affichage' stamp: 'NouryBouraqadi 1/28/2015 15:35'!position: aPoint	| rootMorph |	position := aPoint.	rootMorph := self rootMorph.	rootMorph ifNil: [ ^self ].	rootMorph position: aPoint! !!AfficheurGraphiqueDeLampe methodsFor: 'initialization' stamp: 'NouryBouraqadi 1/28/2015 15:36'!initialize	super initialize.	disque := EllipseMorph new.	disque width: 70.	disque height: disque width.	position := 0@0! !Object subclass: #FeuTricolore	instanceVariableNames: 'lampeCourante lampeVerte lampeOrange lampeRouge'	classVariableNames: ''	poolDictionaries: ''	category: 'Trafic'!!FeuTricolore commentStamp: 'NouryBouraqadi 1/28/2015 15:25' prior: 0!Une FeuTricolore simule un feu de circulation avec un affichage graphique. Pour le tester évaluer l'expression suivante	FeuTricolore exempleFeuAutomatique.Instance Variables	lampeCourante:		<Lampe> désigne la lampe actuellement allumée	lampeOrange:		<Lampe>	lampeRouge:		<Lampe>	lampeVerte:		<Lampe>!!FeuTricolore methodsFor: 'affichage' stamp: 'NouryBouraqadi 1/30/2013 10:15'!arreterAffichage	self lampes do: [:uneLampe|		uneLampe arreterAffichage]! !!FeuTricolore methodsFor: 'affichage' stamp: 'NouryBouraqadi 1/28/2015 15:37'!demarrerAffichage	| positionLampe deltaPosition |	positionLampe := 100@60.	deltaPosition := 0@100.	self lampes do: [:uneLampe|		|unAfficheur|		unAfficheur := uneLampe afficheur.		unAfficheur position: positionLampe.		uneLampe demarrerAffichage.		positionLampe := positionLampe + deltaPosition]! !!FeuTricolore methodsFor: 'etat' stamp: 'NouryBouraqadi 1/14/2010 09:27'!allumerLampeSuivante	lampeCourante eteindre.	lampeCourante := self lampeSuivante.	lampeCourante allumer! !!FeuTricolore methodsFor: 'etat' stamp: 'NouryBouraqadi 1/14/2010 09:27'!lampeSuivante	lampeCourante == lampeVerte ifTrue: [^lampeOrange].	lampeCourante == lampeOrange ifTrue: [^lampeRouge].	^lampeVerte! !!FeuTricolore methodsFor: 'initialisation' stamp: 'Noury 1/19/2009 10:06'!initialize	self		creerLesLampes;		initialiserCouleursDesLampes;		initialiserEtatsDesLampes! !!FeuTricolore methodsFor: 'initialisation' stamp: 'Noury 1/19/2009 10:06'!initialiserEtatsDesLampes	lampeCourante := lampeRouge.	lampeRouge allumer.	lampeOrange eteindre.	lampeVerte eteindre.! !!FeuTricolore methodsFor: 'initialisation' stamp: 'Noury 1/19/2009 10:13'!creerLesLampes	lampeRouge := self classeDesLampes new.	lampeVerte := self classeDesLampes new.	lampeOrange := self classeDesLampes new.	self lampes do: [:lampe|		lampe afficheur: self classeDesAfficheurs new]! !!FeuTricolore methodsFor: 'initialisation' stamp: 'NouryBouraqadi 1/28/2015 15:05'!classeDesAfficheurs	^AfficheurGraphiqueDeLampe! !!FeuTricolore methodsFor: 'initialisation' stamp: 'Noury 1/19/2009 10:13'!classeDesLampes	^Lampe! !!FeuTricolore methodsFor: 'initialisation' stamp: 'Noury 1/19/2009 10:06'!initialiserCouleursDesLampes	lampeRouge couleur: Color red.	lampeOrange couleur: Color orange.	lampeVerte couleur: Color green.! !!FeuTricolore methodsFor: 'accesseurs' stamp: 'NouryBouraqadi 1/14/2010 09:28'!lampes	^{lampeRouge. lampeOrange. lampeVerte}! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!FeuTricolore class	instanceVariableNames: ''!!FeuTricolore class methodsFor: 'exemples' stamp: 'NouryBouraqadi 1/14/2010 09:30'!exempleFeuAutomatique	"Effectue 10 passages à la lampe suivante"	"Expression suivante permet de lancer l'exemple"	"FeuTricolore exempleFeuAutomatique" 	|feu dureeAttenteAvantAllumageLampeSuivante|	feu := self new.	dureeAttenteAvantAllumageLampeSuivante := Delay forSeconds: 1.	feu demarrerAffichage.	[10 timesRepeat: [		dureeAttenteAvantAllumageLampeSuivante wait.		feu allumerLampeSuivante].	feu arreterAffichage] forkAt: Processor userBackgroundPriority.	"forkAt: envoyé à un bloc permet d'exécuter le bloc dans un processus specific.	L'argument correspond à la priorité du nouveau processus.	Ici la priorité est basse pour ne pas perdre la main et ne pas bloquer la mise à jour de l'affichage" ! !Object subclass: #Lampe	instanceVariableNames: 'estAllumee couleur afficheur'	classVariableNames: ''	poolDictionaries: ''	category: 'Trafic'!!Lampe commentStamp: 'NouryBouraqadi 1/30/2014 09:53' prior: 0!Solution complète!!Lampe methodsFor: 'accessing' stamp: 'NouryBouraqadi 1/30/2014 09:45'!afficheur	^ afficheur! !!Lampe methodsFor: 'accessing' stamp: 'NouryBouraqadi 1/30/2014 09:48'!afficheur: anObject	afficheur := anObject.	self mettreAJourAfficheur! !!Lampe methodsFor: 'etat' stamp: 'NouryBouraqadi 1/30/2014 15:34'!estAllumee: unBooleen	estAllumee := unBooleen.	self mettreAJourAfficheur ! !!Lampe methodsFor: 'etat' stamp: 'NouryBouraqadi 1/30/2014 09:44'!allumer	self estAllumee: true! !!Lampe methodsFor: 'etat' stamp: 'NouryBouraqadi 1/30/2014 09:44'!eteindre	self estAllumee: false! !!Lampe methodsFor: 'etat' stamp: 'NouryBouraqadi 1/30/2014 09:44'!estAllumee	^ estAllumee! !!Lampe methodsFor: 'affichage' stamp: 'NouryBouraqadi 1/30/2014 15:51'!arreterAffichage	self afficheur ifNil: [ ^self ].	self afficheur arreterAffichage! !!Lampe methodsFor: 'affichage' stamp: 'NouryBouraqadi 1/30/2014 15:50'!demarrerAffichage	self afficheur ifNil: [^self].	self afficheur demarrerAffichage! !!Lampe methodsFor: 'initialisation' stamp: 'NouryBouraqadi 1/30/2014 09:44'!estAllumeeParDefaut	^false! !!Lampe methodsFor: 'initialisation' stamp: 'NouryBouraqadi 1/30/2014 09:44'!couleurParDefaut	^Color yellow! !!Lampe methodsFor: 'initialisation' stamp: 'NouryBouraqadi 1/30/2014 09:44'!initialize	super initialize.	self estAllumee: self estAllumeeParDefaut.	self couleur: self couleurParDefaut ! !!Lampe methodsFor: 'apparence' stamp: 'NouryBouraqadi 1/30/2014 09:52'!couleur: uneCouleur	couleur := uneCouleur.	self mettreAJourAfficheur! !!Lampe methodsFor: 'apparence' stamp: 'NouryBouraqadi 1/30/2014 09:50'!couleurLampeEteinte	^Color gray! !!Lampe methodsFor: 'apparence' stamp: 'NouryBouraqadi 1/30/2014 15:29'!mettreAJourAfficheur	self afficheur ifNil: [ ^self ].	self afficheur miseAJourAvec: self! !!Lampe methodsFor: 'apparence' stamp: 'NouryBouraqadi 1/30/2014 09:50'!couleur	self estAllumee ifFalse: [ ^self couleurLampeEteinte ].	^ couleur! !
Object subclass: #Lampe	instanceVariableNames: 'estAllumee couleur afficheur'	classVariableNames: ''	poolDictionaries: ''	category: 'Chenillard'!!Lampe commentStamp: 'NouryBouraqadi 2/3/2014 10:31' prior: 0!Une lampe  dispose d'une couleur et sait si elle est allumée ou non à un instant donnée. Elle connait un afficheur auquel elle notifie ses changements d'état. !!Lampe methodsFor: 'accessing' stamp: 'NouryBouraqadi 1/30/2014 09:45'!afficheur	^ afficheur! !!Lampe methodsFor: 'accessing' stamp: 'NouryBouraqadi 1/30/2014 09:48'!afficheur: anObject	afficheur := anObject.	self mettreAJourAfficheur! !!Lampe methodsFor: 'affichage' stamp: 'NouryBouraqadi 1/30/2014 15:50'!demarrerAffichage	self afficheur ifNil: [^self].	self afficheur demarrerAffichage! !!Lampe methodsFor: 'affichage' stamp: 'NouryBouraqadi 1/30/2014 15:51'!arreterAffichage	self afficheur ifNil: [ ^self ].	self afficheur arreterAffichage! !!Lampe methodsFor: 'initialisation' stamp: 'NouryBouraqadi 1/30/2014 09:44'!estAllumeeParDefaut	^false! !!Lampe methodsFor: 'initialisation' stamp: 'NouryBouraqadi 1/30/2014 09:44'!couleurParDefaut	^Color yellow! !!Lampe methodsFor: 'initialisation' stamp: 'NouryBouraqadi 1/30/2014 09:44'!initialize	super initialize.	self estAllumee: self estAllumeeParDefaut.	self couleur: self couleurParDefaut ! !!Lampe methodsFor: 'apparence' stamp: 'NouryBouraqadi 1/30/2014 15:29'!mettreAJourAfficheur	self afficheur ifNil: [ ^self ].	self afficheur miseAJourAvec: self! !!Lampe methodsFor: 'apparence' stamp: 'NouryBouraqadi 1/30/2014 09:50'!couleur	self estAllumee ifFalse: [ ^self couleurLampeEteinte ].	^ couleur! !!Lampe methodsFor: 'apparence' stamp: 'NouryBouraqadi 2/5/2014 11:08'!couleurLampeEteinte	^Color black! !!Lampe methodsFor: 'apparence' stamp: 'NouryBouraqadi 1/30/2014 09:52'!couleur: uneCouleur	couleur := uneCouleur.	self mettreAJourAfficheur! !!Lampe methodsFor: 'etat' stamp: 'NouryBouraqadi 1/30/2014 09:44'!eteindre	self estAllumee: false! !!Lampe methodsFor: 'etat' stamp: 'NouryBouraqadi 1/30/2014 15:34'!estAllumee: unBooleen	estAllumee := unBooleen.	self mettreAJourAfficheur ! !!Lampe methodsFor: 'etat' stamp: 'NouryBouraqadi 1/30/2014 09:44'!estAllumee	^ estAllumee! !!Lampe methodsFor: 'etat' stamp: 'NouryBouraqadi 1/30/2014 09:44'!allumer	self estAllumee: true! !Object subclass: #PanneauTexteEnLED	instanceVariableNames: 'caracteres buffer'	classVariableNames: ''	poolDictionaries: ''	category: 'Chenillard'!!PanneauTexteEnLED commentStamp: 'NouryBouraqadi 2/6/2014 16:03' prior: 0!Un PanneauTexteEnLED représente un panneau constitué de plusieurs caractères en LED. Instance Variables	caracteres:		<OrderedCollection Of CaractereEnLED>	bufferAnimation <Character>caracteres	- gèrent l'affichage des lettres individuelles du texte affiché sur le panneau	bufferAnimation	-Stocke le prochain caractère à afficher sur l'extrêmité de l'afficheur!!PanneauTexteEnLED methodsFor: 'animation' stamp: 'NouryBouraqadi 2/13/2015 08:54'!defilerVersGauche	self executer: [ self defilerUnPasVersGauche ] repetition: 4 * caracteres size + 2! !!PanneauTexteEnLED methodsFor: 'animation' stamp: 'NouryBouraqadi 2/5/2014 11:59'!defilerUnPasVersGauche	|lettresDepart|	lettresDepart := caracteres collect: [ :unCaractere | unCaractere lettreAffichee].	lettresDepart allButFirst with: caracteres allButLast do: [ :uneLettre :unCaractere|		unCaractere lettreAffichee: uneLettre	].	caracteres last lettreAffichee: buffer.	buffer := lettresDepart first! !!PanneauTexteEnLED methodsFor: 'animation' stamp: 'NouryBouraqadi 2/5/2014 12:06'!executer: unBlock repetition: nombreDefois	| dureeAttenteAvantAllumageLampeSuivante |	dureeAttenteAvantAllumageLampeSuivante := 300 milliSeconds asDelay.	[ 	nombreDefois		timesRepeat: [ 			dureeAttenteAvantAllumageLampeSuivante wait.			unBlock value ] 	] forkAt: Processor userInterruptPriority 	"forkAt:  permet d'exécuter le bloc dans un processus dédié.	L'argument correspond à la priorité du nouveau processus."! !!PanneauTexteEnLED methodsFor: 'affichage' stamp: 'NouryBouraqadi 2/5/2014 11:25'!creerCaracteres: nombreCaracteres	| positionPremierAfficheur nouveauCaractere deltaPositionsAfficheurs |	caracteres := OrderedCollection new. 	positionPremierAfficheur := self positionPremierAfficheurParDefaut.	nombreCaracteres timesRepeat: [ 		nouveauCaractere := CaractereEnLED new.		nouveauCaractere positionPremierAfficheur: positionPremierAfficheur.		caracteres add: nouveauCaractere.		deltaPositionsAfficheurs := (nouveauCaractere largeurAffichage + self espaceEntreAfficheurs) @ 0.		positionPremierAfficheur := positionPremierAfficheur + deltaPositionsAfficheurs]! !!PanneauTexteEnLED methodsFor: 'affichage' stamp: 'NouryBouraqadi 2/6/2014 16:02'!afficher: uneString	self arreterAffichage.	buffer := Character space.	self creerCaracteres: uneString size.	caracteres with: uneString do: [ :caractereLed :lettre|		caractereLed lettreAffichee: lettre asUppercase.	]! !!PanneauTexteEnLED methodsFor: 'affichage' stamp: 'NouryBouraqadi 2/5/2014 11:32'!demarrerAffichage	caracteres ifNil: [ ^self ].	caracteres do: [ :unCaractere| unCaractere demarrerAffichage ]! !!PanneauTexteEnLED methodsFor: 'affichage' stamp: 'NouryBouraqadi 2/5/2014 11:30'!arreterAffichage	caracteres ifNil: [ ^self ].	caracteres do: [ :unCaractere| unCaractere arreterAffichage ]! !!PanneauTexteEnLED methodsFor: 'affichage' stamp: 'NouryBouraqadi 2/5/2014 11:23'!positionPremierAfficheurParDefaut	^10@10! !!PanneauTexteEnLED methodsFor: 'affichage' stamp: 'NouryBouraqadi 2/5/2014 11:25'!espaceEntreAfficheurs	^5! !Object subclass: #CaractereEnLED	instanceVariableNames: 'matriceLampes positionPremierAfficheur lettreAffichee dictionnairePositionsLampesAllumeesParLettre'	classVariableNames: ''	poolDictionaries: ''	category: 'Chenillard'!!CaractereEnLED commentStamp: 'NouryBouraqadi 2/5/2014 11:48' prior: 0!Un CaractereEnLED représente un caractère dans un panneau en LEDInstance Variables	dictionnairePositionsLampesAllumeesParLettre		<Dictionary of Point>	lettreAffichee:		<Character >	matriceLampes:		<Matrix>	positionPremierAfficheur:		<Point>dictionnairePositionsLampesAllumeesParLettre	- Fait correspondre les les lettres aux positions des lampes à allumerlettreAffichee	- La lettreAffichee matriceLampes	- Matrice avec les lampes. Les positions des lampes sont celles utilisées dans le dictionnaire dictionnairePositionsLampesAllumeesParLettrepositionPremierAfficheur	- point de référence pour disposer les autres afficheurs!!CaractereEnLED methodsFor: 'affichage' stamp: 'NouryBouraqadi 2/4/2014 10:20'!largeurAffichage	| nombreEspacesEntreColonnesAfficheurs espaceEntreDeuxColonnes |	nombreEspacesEntreColonnesAfficheurs := self nombreColonnesLampes - 1.	espaceEntreDeuxColonnes := self distanceEntreCentresDesAfficheurs - self coteAfficheurLampe.	^(self nombreColonnesLampes * self coteAfficheurLampe) 			+ (nombreEspacesEntreColonnesAfficheurs * espaceEntreDeuxColonnes)! !!CaractereEnLED methodsFor: 'affichage' stamp: 'NouryBouraqadi 2/5/2014 11:07'!lettreAffichee: uneLettre	lettreAffichee := uneLettre.	self mettreAJourAffichage! !!CaractereEnLED methodsFor: 'affichage' stamp: 'NouryBouraqadi 2/5/2014 10:59'!eteindreToutesLesLampes	matriceLampes do: [ :uneLampe| uneLampe eteindre  ]! !!CaractereEnLED methodsFor: 'affichage' stamp: 'NouryBouraqadi 2/3/2014 15:12'!positionPremierAfficheur	positionPremierAfficheur ifNil: [ self positionPremierAfficheur: 0 ].	^positionPremierAfficheur! !!CaractereEnLED methodsFor: 'affichage' stamp: 'NouryBouraqadi 2/5/2014 11:47'!mettreAJourAffichage	| positionsLampesAAllumer |	positionsLampesAAllumer := dictionnairePositionsLampesAllumeesParLettre at: self lettreAffichee.	self eteindreToutesLesLampes.	positionsLampesAAllumer do: [ :position | self allumerLampeEn: position ]! !!CaractereEnLED methodsFor: 'affichage' stamp: 'NouryBouraqadi 2/3/2014 14:28'!demarrerAffichage	matriceLampes do: [ :uneLampe| uneLampe demarrerAffichage  ]! !!CaractereEnLED methodsFor: 'affichage' stamp: 'NouryBouraqadi 2/3/2014 14:32'!arreterAffichage	matriceLampes do: [ :uneLampe| uneLampe arreterAffichage  ]! !!CaractereEnLED methodsFor: 'affichage' stamp: 'NouryBouraqadi 2/3/2014 15:33'!allumerLampeEn: position	| lampe |	lampe := matriceLampes at: position y at: position x.	lampe demarrerAffichage.	lampe allumer! !!CaractereEnLED methodsFor: 'affichage' stamp: 'NouryBouraqadi 2/5/2014 11:08'!lettreAffichee	^lettreAffichee! !!CaractereEnLED methodsFor: 'initialisation' stamp: 'NouryBouraqadi 2/3/2014 14:25'!classeAfficheur	^AfficheurGraphiqueDeLampe ! !!CaractereEnLED methodsFor: 'initialisation' stamp: 'NouryBouraqadi 2/4/2014 10:09'!coteAfficheurLampe	^30! !!CaractereEnLED methodsFor: 'initialisation' stamp: 'NouryBouraqadi 2/5/2014 11:48'!dictionnairePositionsLampesAllumeesParLettre	dictionnairePositionsLampesAllumeesParLettre := Dictionary  newFrom: {		Character space -> {  }.		$A -> {	   2@1. 			1@2.		3@2.				1@3. 2@3. 3@3.			1@4.		3@4.				 1@5.  		3@5}.		$C-> {	2@1. 3@1. 			1@2.						1@3.			1@4.						 	2@5. 3@5. }.		$E -> {1@1.  2@1. 3@1. 			1@2.					1@3. 2@3.			1@4.					 1@5. 2@5. 3@5  }.		$I-> {			1@1. 2@1. 3@1.				   2@2.				   2@3.				   2@4.			1@5. 2@5. 3@5.}.		$H -> {			1@1.		3@1. 			1@2.		3@2.				1@3. 2@3. 3@3.			1@4.		3@4.				1@5.   		3@5}.		$L -> {1@1.  			1@2.					1@3.					1@4.					 1@5. 2@5. 3@5  }.		$O -> {2@1. 			1@2.	3@2.				1@3.	3@3.			1@4.	3@4.				 	2@5.   }.		$P -> {1@1. 2@1. 			1@2.		3@2.				1@3. 2@3.			1@4.				1@5.   }.		$R -> {1@1. 2@1. 			1@2.		3@2.				1@3. 2@3.			1@4.		3@4.			1@5.   		3@5}.							$S-> {  2@1. 3@1. 			1@2.				2@3.					3@4.			1@5. 2@5.}.		$T -> {1@1. 2@1. 3@1.					2@2.					2@3.					2@4.					2@5. }.		$V -> {1@1. 	3@1.				1@2.	3@2.				1@3.	3@3.				1@4.	3@4.					2@5. }.		}! !!CaractereEnLED methodsFor: 'initialisation' stamp: 'NouryBouraqadi 2/4/2014 10:18'!distanceEntreCentresDesAfficheurs	^28! !!CaractereEnLED methodsFor: 'initialisation' stamp: 'NouryBouraqadi 2/4/2014 10:18'!creerAfficheurPourLampe: uneLampe abscisse: x ordonnee: y	| nouvelAfficheur deltaPositionAfficheur |	nouvelAfficheur := self classeAfficheur new.	nouvelAfficheur afficherEnCarreDeCote: self coteAfficheurLampe.	deltaPositionAfficheur := self distanceEntreCentresDesAfficheurs * ((x - 1)@(y - 1)).	nouvelAfficheur position: self positionPremierAfficheur + deltaPositionAfficheur.	uneLampe afficheur: nouvelAfficheur	! !!CaractereEnLED methodsFor: 'initialisation' stamp: 'NouryBouraqadi 2/13/2015 08:35'!initialiserLesAfficheurs	matriceLampes withIndicesDo: [ :uneLampe :y :x| 		self creerAfficheurPourLampe: uneLampe abscisse: x ordonnee: y	].	self demarrerAffichage! !!CaractereEnLED methodsFor: 'initialisation' stamp: 'NouryBouraqadi 2/3/2014 12:08'!nombreLignesLampes	^5! !!CaractereEnLED methodsFor: 'initialisation' stamp: 'NouryBouraqadi 2/13/2015 08:36'!initialize	super initialize.	self creerLesLampesEtLesAfficheurs.	self dictionnairePositionsLampesAllumeesParLettre.	! !!CaractereEnLED methodsFor: 'initialisation' stamp: 'NouryBouraqadi 2/3/2014 14:43'!nombreColonnesLampes	^3! !!CaractereEnLED methodsFor: 'initialisation' stamp: 'NouryBouraqadi 2/13/2015 08:36'!creerLesLampesEtLesAfficheurs	matriceLampes := Matrix 						rows: self nombreLignesLampes 						columns:  self nombreColonnesLampes 						tabulate: [ :y :x| Lampe new]! !!CaractereEnLED methodsFor: 'initialisation' stamp: 'NouryBouraqadi 2/13/2015 08:35'!positionPremierAfficheur: unPoint	positionPremierAfficheur := unPoint.	self initialiserLesAfficheurs ! !Object subclass: #Guirlande	instanceVariableNames: 'lampes'	classVariableNames: ''	poolDictionaries: ''	category: 'Chenillard'!!Guirlande commentStamp: 'NouryBouraqadi 2/3/2014 10:32' prior: 0!Une guirlande est constituée d'une collection ordonnée de lampes.!!Guirlande methodsFor: 'affichage' stamp: 'NouryBouraqadi 2/3/2014 11:08'!demarrerAffichage	self lampes do: [ :uneLampe| uneLampe demarrerAffichage ]! !!Guirlande methodsFor: 'affichage' stamp: 'NouryBouraqadi 2/3/2014 11:22'!arreterAffichage	self lampes do: [ :uneLampe| uneLampe arreterAffichage ]! !!Guirlande methodsFor: 'animation' stamp: 'NouryBouraqadi 2/5/2014 11:28'!defilerUnPasVersGauche	|etatsInitiaux|	etatsInitiaux := self lampes collect: [:uneLampe| uneLampe estAllumee].	etatsInitiaux allButFirst with: self lampes allButLast do: [:etatLampeDroite :uneLampe|		uneLampe estAllumee: etatLampeDroite.	].	self lampes last estAllumee: etatsInitiaux first! !!Guirlande methodsFor: 'animation' stamp: 'NouryBouraqadi 1/12/2012 11:59'!eteindreToutesLesLampes	self lampes do: [:uneLampe|		uneLampe eteindre]! !!Guirlande methodsFor: 'animation' stamp: 'NouryBouraqadi 2/5/2014 11:28'!defilerVersGauche	self eteindreToutesLesLampes.	self allumerSeulementLampesNumeros: #(1 2 3).	self executer: [ self defilerUnPasVersGauche ] repetition: 50! !!Guirlande methodsFor: 'animation' stamp: 'NouryBouraqadi 2/5/2014 12:06'!executer: unBlock repetition: nombreDefois	| dureeAttenteAvantAllumageLampeSuivante |	dureeAttenteAvantAllumageLampeSuivante := Delay forMilliseconds: 100.	[ 	nombreDefois		timesRepeat: [ 			dureeAttenteAvantAllumageLampeSuivante wait.			unBlock value ] 	] forkAt: Processor userBackgroundPriority		"forkAt:  permet d'exécuter le bloc dans un processus dédié.	L'argument correspond à la priorité du nouveau processus."! !!Guirlande methodsFor: 'animation' stamp: 'NouryBouraqadi 1/13/2012 09:43'!allumerSeulementLampesNumeros: desIndices	self eteindreToutesLesLampes.	desIndices do: [:indice|		(self lampes at: indice) allumer	]! !!Guirlande methodsFor: 'initialisation' stamp: 'NouryBouraqadi 2/13/2015 08:36'!initialize	super initialize.	self creerLesLampesEtLesAfficheurs.	self initialiserLesAfficheurs.	self demarrerAffichage! !!Guirlande methodsFor: 'initialisation' stamp: 'NouryBouraqadi 2/3/2014 11:18'!classeAfficheur	^AfficheurGraphiqueDeLampe ! !!Guirlande methodsFor: 'initialisation' stamp: 'NouryBouraqadi 2/13/2015 16:22'!ajouterUneLampeEtSonAfficheur	|nouvelleLampe|	nouvelleLampe := Lampe new.	nouvelleLampe afficheur: self classeAfficheur new.	self lampes add: nouvelleLampe! !!Guirlande methodsFor: 'initialisation' stamp: 'NouryBouraqadi 2/3/2014 12:05'!positionPremierAfficheur	^0 @ 0! !!Guirlande methodsFor: 'initialisation' stamp: 'NouryBouraqadi 2/3/2014 12:05'!nombreInitialDeLampes	^10! !!Guirlande methodsFor: 'initialisation' stamp: 'NouryBouraqadi 2/13/2015 16:22'!creerLesLampesEtLesAfficheurs	self lampes: OrderedCollection new.	self nombreInitialDeLampes timesRepeat: [ self ajouterUneLampeEtSonAfficheur ]! !!Guirlande methodsFor: 'initialisation' stamp: 'NouryBouraqadi 2/13/2015 08:35'!initialiserLesAfficheurs	| positionAfficheur  espaceEntreAfficheurs|	positionAfficheur := self positionPremierAfficheur.	self afficheurs		do: [ :unAfficheur | 			unAfficheur position: positionAfficheur.			espaceEntreAfficheurs := unAfficheur largeur @ 0.			positionAfficheur := positionAfficheur + espaceEntreAfficheurs ]! !!Guirlande methodsFor: 'accesseurs' stamp: 'NouryBouraqadi 2/3/2014 11:18'!lampes: anObject	lampes := anObject! !!Guirlande methodsFor: 'accesseurs' stamp: 'NouryBouraqadi 2/13/2015 08:37'!afficheurs	^self lampes collect: [ :uneLampe| uneLampe afficheur ]! !!Guirlande methodsFor: 'accesseurs' stamp: 'NouryBouraqadi 2/3/2014 11:07'!lampes	^lampes! !Object subclass: #AfficheurGraphiqueDeLampe	instanceVariableNames: 'morph'	classVariableNames: ''	poolDictionaries: ''	category: 'Chenillard'!!AfficheurGraphiqueDeLampe commentStamp: '<historical>' prior: 0!Un AfficheurGraphiqueDeLampe gère un disque de couleur qui représente graphiquement la lampe.Instance Variables	disque:		<EllipseMorph>disque	- objet graphique qui représente la lampe!!AfficheurGraphiqueDeLampe methodsFor: 'affichage' stamp: 'NouryBouraqadi 2/4/2014 09:56'!largeur	^self morph width! !!AfficheurGraphiqueDeLampe methodsFor: 'affichage' stamp: 'NouryBouraqadi 2/4/2014 09:54'!hauteur	^self morph height! !!AfficheurGraphiqueDeLampe methodsFor: 'affichage' stamp: 'NouryBouraqadi 2/4/2014 09:54'!hauteur: hauteur	self morph height: hauteur! !!AfficheurGraphiqueDeLampe methodsFor: 'affichage' stamp: 'NouryBouraqadi 2/4/2014 09:33'!miseAJourAvec: uneLampe	self morph color: uneLampe couleur! !!AfficheurGraphiqueDeLampe methodsFor: 'affichage' stamp: 'NouryBouraqadi 2/4/2014 09:33'!demarrerAffichage	self morph openInWorld! !!AfficheurGraphiqueDeLampe methodsFor: 'affichage' stamp: 'NouryBouraqadi 2/4/2014 09:33'!arreterAffichage	self morph delete! !!AfficheurGraphiqueDeLampe methodsFor: 'affichage' stamp: 'NouryBouraqadi 2/4/2014 09:54'!largeur: largeur	self morph width: largeur! !!AfficheurGraphiqueDeLampe methodsFor: 'accesseurs' stamp: 'NouryBouraqadi 2/4/2014 09:33'!morph	^ morph! !!AfficheurGraphiqueDeLampe methodsFor: 'accesseurs' stamp: 'NouryBouraqadi 2/4/2014 09:51'!morph: unMorph	morph ifNotNil: [ self arreterAffichage ].	morph := unMorph! !!AfficheurGraphiqueDeLampe methodsFor: 'accesseurs' stamp: 'NouryBouraqadi 2/4/2014 09:33'!position: unPoint	self morph position: unPoint! !!AfficheurGraphiqueDeLampe methodsFor: 'initialization' stamp: 'NouryBouraqadi 2/4/2014 09:46'!initialize	super initialize.	self afficherEnDisqueDeDiametre: self largeurMorphParDefaut! !!AfficheurGraphiqueDeLampe methodsFor: 'initialization' stamp: 'NouryBouraqadi 2/4/2014 09:49'!afficherEnDisqueDeDiametre: diametre	self initMorphInstanceDe: self classeMorphEllipse largeur: diametre hauteur: diametre! !!AfficheurGraphiqueDeLampe methodsFor: 'initialization' stamp: 'NouryBouraqadi 2/4/2014 09:52'!classeMorphRectangle	^BorderedMorph ! !!AfficheurGraphiqueDeLampe methodsFor: 'initialization' stamp: 'NouryBouraqadi 2/4/2014 09:52'!classeMorphEllipse	^EllipseMorph ! !!AfficheurGraphiqueDeLampe methodsFor: 'initialization' stamp: 'NouryBouraqadi 2/4/2014 09:49'!afficherEnCarreDeCote: longueur	self initMorphInstanceDe: self classeMorphRectangle  largeur: longueur hauteur: longueur! !!AfficheurGraphiqueDeLampe methodsFor: 'initialization' stamp: 'NouryBouraqadi 2/4/2014 09:48'!largeurMorphParDefaut	^70! !!AfficheurGraphiqueDeLampe methodsFor: 'initialization' stamp: 'NouryBouraqadi 2/4/2014 09:54'!initMorphInstanceDe: classeMorph largeur: largeur hauteur: hauteur	self morph:  classeMorph new.	self largeur: largeur.	self hauteur: hauteur.! !